-- MariaDB dump 10.18  Distrib 10.5.8-MariaDB, for debian-linux-gnu (x86_64)
--
-- Host: localhost    Database: kuzzydb
-- ------------------------------------------------------
-- Server version	10.5.8-MariaDB-1:10.5.8+maria~focal

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `kata_entity`
--

DROP TABLE IF EXISTS `kata_entity`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `kata_entity` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `completions` text NOT NULL,
  `cwId` text NOT NULL,
  `description` text NOT NULL,
  `kyu` text NOT NULL,
  `name` text NOT NULL,
  `stars` text NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=55 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `kata_entity`
--

LOCK TABLES `kata_entity` WRITE;
/*!40000 ALTER TABLE `kata_entity` DISABLE KEYS */;
INSERT INTO `kata_entity` VALUES (1,'109.527','54bf1c2cd5b56cc47f0007a1','### Count the number of Duplicates\\\\n\\\\nWrite a function that will return the count of **distinct case-insensitive** alphabetic characters and numeric digits that occur more than \\\\nonce in the input string. \\\\nThe input string can be assumed to contain only alphabets (both uppercase and lowercase) and numeric digits.\\\\n\\\\n\\\\n### Example\\\\n\\\\\\\"abcde\\\\\\\" -\\\\u003e 0             `# no characters repeats more than once`  \\\\n\\\\\\\"aabbcde\\\\\\\" -\\\\u003e 2           `# \'a\' and \'b\'`  \\\\n\\\\\\\"aabBcde\\\\\\\" -\\\\u003e 2           ``# \'a\' occurs twice and \'b\' twice (`b` and `B`)``  \\\\n\\\\\\\"indivisibility\\\\\\\" -\\\\u003e 1    `# \'i\' occurs six times`  \\\\n\\\\\\\"Indivisibilities\\\\\\\" -\\\\u003e 2  `# \'i\' occurs seven times and \'s\' occurs twice`  \\\\n\\\\\\\"aA11\\\\\\\" -\\\\u003e 2              `# \'a\' and \'1\'`  \\\\n\\\\\\\"ABBA\\\\\\\" -\\\\u003e 2              `# \'A\' and \'B\' each occur twice`\\\\n\\','6','Counting Duplicates','2456'),(2,'189.003','514b92a657cdc65150000006','If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.\\\\n\\\\nFinish the solution so that it returns the sum of all the multiples of 3 or 5 **below** the number passed in. \\\\n\\\\n\\\\u003e Note: If the number is a multiple of **both** 3 and 5, only count it *once*.\\\\n\\\\u003e Also, if a number is negative, return 0(for languages that do have them)\\\\n  \\\\n###### *Courtesy of projecteuler.net*\\\\n\\','6','Multiples of 3 or 5','1858'),(3,'149.646','54da5a58ea159efa38000836','Given an array of integers, find the one that appears an odd number of times.\\\\n\\\\nThere will always be only one integer that appears an odd number of times.\\\\n\\','6','Find the odd int','2631'),(5,'135.624','541c8630095125aba6000c00','[Digital root](https://en.wikipedia.org/wiki/Digital_root) is the _recursive sum of all the digits in a number._\\\\n\\\\nGiven `n`, take the sum of the digits of `n`. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. The input will be a non-negative integer.\\\\n\\\\n## Examples\\\\n```\\\\n    16  --\\\\u003e  1 + 6 = 7\\\\n   942  --\\\\u003e  9 + 4 + 2 = 15  --\\\\u003e  1 + 5 = 6\\\\n132189  --\\\\u003e  1 + 3 + 2 + 1 + 8 + 9 = 24  --\\\\u003e  2 + 4 = 6\\\\n493193  --\\\\u003e  4 + 9 + 3 + 1 + 9 + 3 = 29  --\\\\u003e  2 + 9 = 11  --\\\\u003e  1 + 1 = 2\\\\n```\\\\n\\','6','Sum of Digits / Digital Root','2416'),(6,'125.444','5264d2b162488dc400000001','Write a function that takes in a string of one or more words, and returns the same string, but with all five or more letter words reversed (like the name of this kata).\\\\n\\\\n* Strings passed in will consist of only letters and spaces.\\\\n* Spaces will be included only when more than one word is present.\\\\n\\\\nExamples:\\\\n\\\\n```\\\\nspinWords(\\\\\\\"Hey fellow warriors\\\\\\\") =\\\\u003e \\\\\\\"Hey wollef sroirraw\\\\\\\" \\\\nspinWords(\\\\\\\"This is a test\\\\\\\") =\\\\u003e \\\\\\\"This is a test\\\\\\\" \\\\nspinWords(\\\\\\\"This is another test\\\\\\\") =\\\\u003e \\\\\\\"This is rehtona test\\\\\\\"\\\\n```\\\\n\\','6','Stop gninnipS My sdroW!','1688'),(7,'143.430','5266876b8f4bf2da9b000362','You probably know the \\\\\\\"like\\\\\\\" system from Facebook and other pages. People can \\\\\\\"like\\\\\\\" blog posts, pictures or other items. We want to create the text that should be displayed next to such an item.\\\\n\\\\nImplement the function `likes` which takes an array containing the names of people that like an item. It must return the display text as shown in the examples:\\\\n\\\\n```haskell\\\\nlikes [] -- must be \\\\\\\"no one likes this\\\\\\\"\\\\nlikes [\\\\\\\"Peter\\\\\\\"] -- must be \\\\\\\"Peter likes this\\\\\\\"\\\\nlikes [\\\\\\\"Jacob\\\\\\\", \\\\\\\"Alex\\\\\\\"] -- must be \\\\\\\"Jacob and Alex like this\\\\\\\"\\\\nlikes [\\\\\\\"Max\\\\\\\", \\\\\\\"John\\\\\\\", \\\\\\\"Mark\\\\\\\"] -- must be \\\\\\\"Max, John and Mark like this\\\\\\\"\\\\nlikes [\\\\\\\"Alex\\\\\\\", \\\\\\\"Jacob\\\\\\\", \\\\\\\"Mark\\\\\\\", \\\\\\\"Max\\\\\\\"] -- must be \\\\\\\"Alex, Jacob and 2 others like this\\\\\\\"\\\\n```\\\\n```csharp\\\\nKata.Likes(new string[0]) =\\\\u003e \\\\\\\"no one likes this\\\\\\\"\\\\nKata.Likes(new string[] {\\\\\\\"Peter\\\\\\\"}) =\\\\u003e \\\\\\\"Peter likes this\\\\\\\"\\\\nKata.Likes(new string[] {\\\\\\\"Jacob\\\\\\\", \\\\\\\"Alex\\\\\\\"}) =\\\\u003e \\\\\\\"Jacob and Alex like this\\\\\\\"\\\\nKata.Likes(new string[] {\\\\\\\"Max\\\\\\\", \\\\\\\"John\\\\\\\", \\\\\\\"Mark\\\\\\\"}) =\\\\u003e \\\\\\\"Max, John and Mark like this\\\\\\\"\\\\nKata.Likes(new string[] {\\\\\\\"Alex\\\\\\\", \\\\\\\"Jacob\\\\\\\", \\\\\\\"Mark\\\\\\\", \\\\\\\"Max\\\\\\\"}) =\\\\u003e \\\\\\\"Alex, Jacob and 2 others like this\\\\\\\"\\\\n```\\\\n```c\\\\n* return must be an allocated string\\\\n* do not mutate input\\\\n\\\\nlikes({})\\\\n    // should return \\\\\\\"no one likes this\\\\\\\"\\\\n\\\\nlikes({\\\\\\\"Peter\\\\\\\"})\\\\n    // should return \\\\\\\"Peter likes this\\\\\\\"\\\\n\\\\nlikes({\\\\\\\"Jacob\\\\\\\", \\\\\\\"Alex\\\\\\\"})\\\\n    // should return \\\\\\\"Jacob and Alex like this\\\\\\\"\\\\n\\\\nlikes({\\\\\\\"Max\\\\\\\",\\\\\\\"John\\\\\\\",\\\\\\\"Mark\\\\\\\"})\\\\n    // should return \\\\\\\"Max, John and Mark like this\\\\\\\"\\\\n\\\\nlikes({\\\\\\\"Alex\\\\\\\", \\\\\\\"Jacob\\\\\\\", \\\\\\\"Mark\\\\\\\", \\\\\\\"Max\\\\\\\"})\\\\n    // should return \\\\\\\"Alex, Jacob and 2 others like this\\\\\\\"\\\\n```\\\\n```cpp\\\\nlikes {} // must be \\\\\\\"no one likes this\\\\\\\"\\\\nlikes {\\\\\\\"Peter\\\\\\\"} // must be \\\\\\\"Peter likes this\\\\\\\"\\\\nlikes {\\\\\\\"Jacob\\\\\\\", \\\\\\\"Alex\\\\\\\"} // must be \\\\\\\"Jacob and Alex like this\\\\\\\"\\\\nlikes {\\\\\\\"Max\\\\\\\", \\\\\\\"John\\\\\\\", \\\\\\\"Mark\\\\\\\"} // must be \\\\\\\"Max, John and Mark like this\\\\\\\"\\\\nlikes {\\\\\\\"Alex\\\\\\\", \\\\\\\"Jacob\\\\\\\", \\\\\\\"Mark\\\\\\\", \\\\\\\"Max\\\\\\\"} // must be \\\\\\\"Alex, Jacob and 2 others like this\\\\\\\"\\\\n```\\\\n```java\\\\nlikes {} // must be \\\\\\\"no one likes this\\\\\\\"\\\\nlikes {\\\\\\\"Peter\\\\\\\"} // must be \\\\\\\"Peter likes this\\\\\\\"\\\\nlikes {\\\\\\\"Jacob\\\\\\\", \\\\\\\"Alex\\\\\\\"} // must be \\\\\\\"Jacob and Alex like this\\\\\\\"\\\\nlikes {\\\\\\\"Max\\\\\\\", \\\\\\\"John\\\\\\\", \\\\\\\"Mark\\\\\\\"} // must be \\\\\\\"Max, John and Mark like this\\\\\\\"\\\\nlikes {\\\\\\\"Alex\\\\\\\", \\\\\\\"Jacob\\\\\\\", \\\\\\\"Mark\\\\\\\", \\\\\\\"Max\\\\\\\"} // must be \\\\\\\"Alex, Jacob and 2 others like this\\\\\\\"\\\\n```\\\\n```julia\\\\nlikes([]) # must be \\\\\\\"no one likes this\\\\\\\"\\\\nlikes([\\\\\\\"Peter\\\\\\\"]) # must be \\\\\\\"Peter likes this\\\\\\\"\\\\nlikes([\\\\\\\"Jacob\\\\\\\", \\\\\\\"Alex\\\\\\\"]) # must be \\\\\\\"Jacob and Alex like this\\\\\\\"\\\\nlikes([\\\\\\\"Max\\\\\\\", \\\\\\\"John\\\\\\\", \\\\\\\"Mark\\\\\\\"]) # must be \\\\\\\"Max, John and Mark like this\\\\\\\"\\\\nlikes([\\\\\\\"Alex\\\\\\\", \\\\\\\"Jacob\\\\\\\", \\\\\\\"Mark\\\\\\\", \\\\\\\"Max\\\\\\\"]) # must be \\\\\\\"Alex, Jacob and 2 others like this\\\\\\\"\\\\n```\\\\n```python\\\\nlikes([]) # must be \\\\\\\"no one likes this\\\\\\\"\\\\nlikes([\\\\\\\"Peter\\\\\\\"]) # must be \\\\\\\"Peter likes this\\\\\\\"\\\\nlikes([\\\\\\\"Jacob\\\\\\\", \\\\\\\"Alex\\\\\\\"]) # must be \\\\\\\"Jacob and Alex like this\\\\\\\"\\\\nlikes([\\\\\\\"Max\\\\\\\", \\\\\\\"John\\\\\\\", \\\\\\\"Mark\\\\\\\"]) # must be \\\\\\\"Max, John and Mark like this\\\\\\\"\\\\nlikes([\\\\\\\"Alex\\\\\\\", \\\\\\\"Jacob\\\\\\\", \\\\\\\"Mark\\\\\\\", \\\\\\\"Max\\\\\\\"]) # must be \\\\\\\"Alex, Jacob and 2 others like this\\\\\\\"\\\\n```\\\\n```prolog\\\\nlikes([], \\\\\\\"no one likes this\\\\\\\").\\\\nlikes([\\\\\\\"Peter\\\\\\\"], \\\\\\\"Peter likes this\\\\\\\").\\\\nlikes([\\\\\\\"Jacob\\\\\\\", \\\\\\\"Alex\\\\\\\"], \\\\\\\"Jacob and Alex like this\\\\\\\").\\\\nlikes([\\\\\\\"Max\\\\\\\", \\\\\\\"John\\\\\\\", \\\\\\\"Mark\\\\\\\"], \\\\\\\"Max, John and Mark like this\\\\\\\").\\\\nlikes([\\\\\\\"Alex\\\\\\\", \\\\\\\"Jacob\\\\\\\", \\\\\\\"Mark\\\\\\\", \\\\\\\"Max\\\\\\\"], \\\\\\\"Alex, Jacob and 2 others like this\\\\\\\").\\\\n```\\\\n```rust\\\\nlikes(\\\\u0026[]) // must be \\\\\\\"no one likes this\\\\\\\"\\\\nlikes(\\\\u0026[\\\\\\\"Peter\\\\\\\"]) // must be \\\\\\\"Peter likes this\\\\\\\"\\\\nlikes(\\\\u0026[\\\\\\\"Jacob\\\\\\\", \\\\\\\"Alex\\\\\\\"]) // must be \\\\\\\"Jacob and Alex like this\\\\\\\"\\\\nlikes(\\\\u0026[\\\\\\\"Max\\\\\\\", \\\\\\\"John\\\\\\\", \\\\\\\"Mark\\\\\\\"]) // must be \\\\\\\"Max, John and Mark like this\\\\\\\"\\\\nlikes(\\\\u0026[\\\\\\\"Alex\\\\\\\", \\\\\\\"Jacob\\\\\\\", \\\\\\\"Mark\\\\\\\", \\\\\\\"Max\\\\\\\"]) // must be \\\\\\\"Alex, Jacob and 2 others like this\\\\\\\"\\\\n```\\\\n\\\\nFor 4 or more names, the number in `and 2 others` simply increases.\\\\n\\','6','Who likes it?','2445'),(8,'99.292','55bf01e5a717a0d57e0000ec','Write a function, `persistence`, that takes in a positive parameter `num` and returns its multiplicative persistence, which is the number of times you must multiply the digits in `num` until you reach a single digit.\\\\n\\\\nFor example:\\\\n\\\\n```c\\\\npersistence(39) === 3;\\\\n//     because 3*9 = 27, 2*7 = 14, 1*4 = 4\\\\n//         and 4 has only one digit\\\\n\\\\npersistence(999) === 4;\\\\n//     because 9*9*9 = 729, 7*2*9 = 126, 1*2*6 = 12,\\\\n// and finally 1*2 = 2\\\\n                \\\\npersistence(4) === 0;\\\\n//     because 4 is already a one-digit number\\\\n```\\\\n```swift\\\\n persistence(for: 39) === 3 // because 3*9 = 27, 2*7 = 14, 1*4=4\\\\n                       // and 4 has only one digit\\\\n                 \\\\n persistence(for: 999) === 4 // because 9*9*9 = 729, 7*2*9 = 126,\\\\n                        // 1*2*6 = 12, and finally 1*2 = 2\\\\n                  \\\\n persistence(for: 4) === 0 // because 4 is already a one-digit number\\\\n```\\\\n```javascript\\\\n persistence(39) === 3 // because 3*9 = 27, 2*7 = 14, 1*4=4\\\\n                       // and 4 has only one digit\\\\n                 \\\\n persistence(999) === 4 // because 9*9*9 = 729, 7*2*9 = 126,\\\\n                        // 1*2*6 = 12, and finally 1*2 = 2\\\\n                  \\\\n persistence(4) === 0 // because 4 is already a one-digit number\\\\n```\\\\n```php\\\\npersistence(39) === 3; // because 3 * 9 = 27, 2 * 7 = 14, 1 * 4 = 4 and 4 has only one digit\\\\npersistence(999) === 4; // because 9 * 9 * 9 = 729, 7 * 2 * 9 = 126, 1 * 2 * 6 = 12, and finally 1 * 2 = 2\\\\npersistence(4) === 0; // because 4 is already a one-digit number\\\\n```\\\\n```coffeescript\\\\n persistence(39) === 3 // because 3*9 = 27, 2*7 = 14, 1*4=4\\\\n                       // and 4 has only one digit\\\\n                 \\\\n persistence(999) === 4 // because 9*9*9 = 729, 7*2*9 = 126,\\\\n                        // 1*2*6 = 12, and finally 1*2 = 2\\\\n                  \\\\n persistence(4) === 0 // because 4 is already a one-digit number\\\\n```\\\\n```csharp\\\\n persistence(39) == 3 // because 3*9 = 27, 2*7 = 14, 1*4=4\\\\n                      // and 4 has only one digit\\\\n                 \\\\n persistence(999) == 4 // because 9*9*9 = 729, 7*2*9 = 126,\\\\n                       // 1*2*6 = 12, and finally 1*2 = 2\\\\n                  \\\\n persistence(4) == 0 // because 4 is already a one-digit number\\\\n```\\\\n```fsharp\\\\npersistence 39 = 3  // because 3*9 = 27, 2*7 = 14, 1*4=4\\\\n                    // and 4 has only one digit\\\\n               \\\\npersistence 999 = 4 // because 9*9*9 = 729, 7*2*9 = 126,\\\\n                    // 1*2*6 = 12, and finally 1*2 = 2\\\\n                \\\\npersistence 4 = 0   // because 4 is already a one-digit number\\\\n```\\\\n```java\\\\n persistence(39) == 3 // because 3*9 = 27, 2*7 = 14, 1*4=4\\\\n                      // and 4 has only one digit\\\\n                 \\\\n persistence(999) == 4 // because 9*9*9 = 729, 7*2*9 = 126,\\\\n                       // 1*2*6 = 12, and finally 1*2 = 2\\\\n                  \\\\n persistence(4) == 0 // because 4 is already a one-digit number\\\\n```\\\\n```clojure\\\\n (persistence 39) ; returns 3, because 3*9=27, 2*7=14, 1*4=4\\\\n                  ; and 4 has only one digit\\\\n                  \\\\n (persistence 999) ; returns 4, because 9*9*9=729, 7*2*9=126,\\\\n                   ; 1*2*6=12, and finally 1*2=2\\\\n\\\\n (persistence 4) ; returns 0, because 4 is already a one-digit number\\\\n```\\\\n```haskell\\\\n persistence 39 -- returns 3, because 3*9=27, 2*7=14, 1*4=4\\\\n                -- and 4 has only one digit\\\\n                  \\\\n persistence 999 -- returns 4, because 9*9*9=729, 7*2*9=126,\\\\n                 -- 1*2*6=12, and finally 1*2=2\\\\n\\\\n persistence 4 -- returns 0, because 4 is already a one-digit number\\\\n```\\\\n```ruby\\\\n persistence(39) # returns 3, because 3*9=27, 2*7=14, 1*4=4\\\\n                 # and 4 has only one digit\\\\n                  \\\\n persistence(999) # returns 4, because 9*9*9=729, 7*2*9=126,\\\\n                  # 1*2*6=12, and finally 1*2=2\\\\n\\\\n persistence(4) # returns 0, because 4 is already a one-digit number\\\\n```\\\\n```python\\\\n persistence(39) # returns 3, because 3*9=27, 2*7=14, 1*4=4\\\\n                 # and 4 has only one digit\\\\n                  \\\\n persistence(999) # returns 4, because 9*9*9=729, 7*2*9=126,\\\\n                  # 1*2*6=12, and finally 1*2=2\\\\n\\\\n persistence(4) # returns 0, because 4 is already a one-digit number\\\\n```\\\\n```coffeescript\\\\n persistence(39) # returns 3, because 3*9=27, 2*7=14, 1*4=4\\\\n                 # and 4 has only one digit\\\\n                  \\\\n persistence(999) # returns 4, because 9*9*9=729, 7*2*9=126,\\\\n                  # 1*2*6=12, and finally 1*2=2\\\\n\\\\n persistence(4) # returns 0, because 4 is already a one-digit number\\\\n```\\\\n```elixir\\\\n persistence(39) # returns 3, because 3*9=27, 2*7=14, 1*4=4\\\\n                 # and 4 has only one digit\\\\n                  \\\\n persistence(999) # returns 4, because 9*9*9=729, 7*2*9=126,\\\\n                  # 1*2*6=12, and finally 1*2=2\\\\n\\\\n persistence(4) # returns 0, because 4 is already a one-digit number\\\\n```\\\\n```kotlin\\\\n persistence(39) == 3 // because 3*9 = 27, 2*7 = 14, 1*4=4\\\\n                       // and 4 has only one digit\\\\n                 \\\\n persistence(999) == 4 // because 9*9*9 = 729, 7*2*9 = 126,\\\\n                        // 1*2*6 = 12, and finally 1*2 = 2\\\\n                  \\\\n persistence(4) == 0 // because 4 is already a one-digit number\\\\n```\\\\n```scala\\\\n // because 3*9 = 27, 2*7 = 14, 1*4=4 and 4 has only one digit:\\\\n persistence(39) == 3\\\\n\\\\n // because 9*9*9 = 729, 7*2*9 = 126, 1*2*6 = 12, and finally 1*2 = 2\\\\n persistence(999) == 4\\\\n\\\\n // because 4 is already a one-digit number:\\\\n persistence(4) == 0\\\\n```\\\\n```julia\\\\npersistence(39) # returns 3, because 3*9=27, 2*7=14, 1*4=4\\\\n                # and 4 has only one digit\\\\n                \\\\npersistence(999) # returns 4, because 9*9*9=729, 7*2*9=126,\\\\n                 # 1*2*6=12, and finally 1*2=2\\\\n\\\\npersistence(4) # returns 0, because 4 is already a one-digit number\\\\n```\\\\n```rust\\\\npersistence(39) // returns 3, because 3*9=27, 2*7=14, 1*4=4\\\\n                // and 4 has only one digit\\\\n                \\\\npersistence(999) // returns 4, because 9*9*9=729, 7*2*9=126,\\\\n                 // 1*2*6=12, and finally 1*2=2\\\\n\\\\npersistence(4) // returns 0, because 4 is already a one-digit number\\\\n```\\\\n```prolog\\\\npersistence(39, 3) % because 3*9=27, 2*7=14, 1*4=4\\\\n                   % and 4 has only one digit\\\\n                \\\\npersistence(999, 4) % because 9*9*9=729, 7*2*9=126,\\\\n                    % 1*2*6=12, and finally 1*2=2\\\\n\\\\npersistence(4, 0) % because 4 is already a one-digit number\\\\n```\\\\n```pascal\\\\nPersistence(39) = 3 // because 3*9=27, 2*7=14, 1*4=4\\\\n                    // and 4 has only one digit\\\\n                \\\\nPersistence(999) = 4 // because 9*9*9=729, 7*2*9=126,\\\\n                     // 1*2*6=12, and finally 1*2=2\\\\n\\\\nPersistence(4) = 0 // because 4 is already a one-digit number\\\\n```\\\\n\\','6','Persistent Bugger.','2502'),(9,'145.497','525f50e3b73515a6db000b83','Write a function that accepts an array of 10 integers (between 0 and 9), that returns a string of those numbers in the form of a phone number.\\\\n\\\\n### Example\\\\n\\\\n```javascript\\\\ncreatePhoneNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) // =\\\\u003e returns \\\\\\\"(123) 456-7890\\\\\\\"\\\\n```\\\\n```cpp\\\\ncreatePhoneNumber(int[10]{1, 2, 3, 4, 5, 6, 7, 8, 9, 0}) // =\\\\u003e returns \\\\\\\"(123) 456-7890\\\\\\\"\\\\n```\\\\n```crystal\\\\ncreate_phone_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) # =\\\\u003e returns \\\\\\\"(123) 456-7890\\\\\\\"\\\\n```\\\\n```ruby\\\\ncreatePhoneNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) # =\\\\u003e returns \\\\\\\"(123) 456-7890\\\\\\\"\\\\n```\\\\n```coffeescript\\\\ncreatePhoneNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) # =\\\\u003e returns \\\\\\\"(123) 456-7890\\\\\\\"\\\\n```\\\\n```java\\\\nKata.createPhoneNumber(new int[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 0}) // =\\\\u003e returns \\\\\\\"(123) 456-7890\\\\\\\"\\\\n```\\\\n```dart\\\\ncreatePhoneNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) // =\\\\u003e returns \\\\\\\"(123) 456-7890\\\\\\\"\\\\n```\\\\n```haskell\\\\ncreatePhoneNumber [1,2,3,4,5,6,7,8,9,0] -- =\\\\u003e returns \\\\\\\"(123) 456-7890\\\\\\\"\\\\n```\\\\n```csharp\\\\nKata.CreatePhoneNumber(new int[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 0}) // =\\\\u003e returns \\\\\\\"(123) 456-7890\\\\\\\"\\\\n```\\\\n```fsharp\\\\ncreatePhoneNumber [1; 2; 3; 4; 5; 6; 7; 8; 9; 0] // =\\\\u003e returns \\\\\\\"(123) 456-7890\\\\\\\"\\\\n```\\\\n```python\\\\ncreate_phone_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) # =\\\\u003e returns \\\\\\\"(123) 456-7890\\\\\\\"\\\\n```\\\\n```scala\\\\nKata.createPhoneNumber(Seq(1, 2, 3, 4, 5, 6, 7, 8, 9, 0)) # =\\\\u003e returns \\\\\\\"(123) 456-7890\\\\\\\"\\\\n```\\\\n```php\\\\ncreatePhoneNumber([1,2,3,4,5,6,7,8,9,0]); // =\\\\u003e returns \\\\\\\"(123) 456-7890\\\\\\\"\\\\n```\\\\n```f#\\\\ncreatePhoneNumber [1; 2; 3; 4; 5; 6; 7; 8; 9; 0] // =\\\\u003e returns \\\\\\\"(123) 456-7890\\\\\\\"\\\\n```\\\\n```clojure\\\\n(create-phone-number [1 2 3 4 5 6 7 8 9 0]) ;; =\\\\u003e returns \\\\\\\"(123) 456-7890\\\\\\\"\\\\n```\\\\n```rust\\\\ncreate_phone_number(\\\\u0026[1,2,3,4,5,6,7,8,9,0]); // returns \\\\\\\"(123) 456-7890\\\\\\\"\\\\n```\\\\n```go\\\\nCreatePhoneNumber([10]uint{1,2,3,4,5,6,7,8,9,0})  // returns \\\\\\\"(123) 456-7890\\\\\\\"\\\\n```\\\\n```c\\\\ncreate_phone_number(phnum, (const unsigned char[]){1,2,3,4,5,6,7,8,9,0});\\\\n    /* phnum \\\\u003c- \\\\\\\"(123) 456-7890\\\\\\\" */\\\\n```\\\\n```nasm\\\\nphnum:  resb 15\\\\nnums:   db  1,2,3,4,5,6,7,8,9,0\\\\n\\\\nmov rdi, phnum\\\\nmov rsi, nums\\\\ncall create_phone_number  ; RAX \\\\u003c- phnum \\\\u003c- \\\\\\\"(123) 456-7890\\\\\\\" \\\\n```\\\\n```typescript\\\\ncreatePhoneNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) // =\\\\u003e returns \\\\\\\"(123) 456-7890\\\\\\\"\\\\n```\\\\n```julia\\\\ncreatephonenumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) # -\\\\u003e returns \\\\\\\"(123) 456-7890\\\\\\\"\\\\n```\\\\n```cfml\\\\ncreatePhoneNumber( [1, 2, 3, 4, 5, 6, 7, 8, 9, 0] ) // =\\\\u003e returns \\\\\\\"(123) 456-7890\\\\\\\"\\\\n```\\\\n```factor\\\\n{ 1 2 3 4 5 6 7 8 9 0 } create-phone-number ! returns \\\\\\\"(123) 456-7890\\\\\\\"\\\\n```\\\\n\\\\nThe returned format must be correct in order to complete this challenge.  \\\\nDon\'t forget the space after the closing parentheses!\\','6','Create Phone Number','1675'),(10,'118.209','523f5d21c841566fde000009','Your goal in this kata is to implement a difference function, which subtracts one list from another and returns the result.\\\\n\\\\nIt should remove all values from list `a`, which are present in list `b` keeping their order.\\\\n\\\\n```c\\\\narray_diff({1, 2}, 2, {1}, 1, *z) == {2} (z == 1)\\\\n```\\\\n```javascript\\\\narrayDiff([1,2],[1]) == [2]\\\\n```\\\\n```ruby\\\\narray_diff([1,2],[1]) == [2]\\\\n```\\\\n```crystal\\\\narray_diff([1,2],[1]) == [2]\\\\n```\\\\n```python\\\\narray_diff([1,2],[1]) == [2]\\\\n```\\\\n```coffeescript\\\\narrayDiff([1,2],[1]) == [2]\\\\n```\\\\n```haskell\\\\ndifference [1,2] [1] == [2]\\\\n```\\\\n```csharp\\\\nKata.ArrayDiff(new int[] {1, 2}, new int[] {1}) =\\\\u003e new int[] {2}\\\\n```\\\\n```fsharp\\\\narrayDiff [|1|] [|1; 2|] = [|2|]\\\\n```\\\\n```rust\\\\narray_diff(vec![1,2], vec![1]) == vec![2]\\\\n```\\\\n```clojure\\\\n(= (array-diff [1 2] [1]) [2])\\\\n```\\\\n```groovy\\\\nKata.arrayDiff([1,2],[1]) == [2]\\\\n```\\\\n```java\\\\nKata.arrayDiff(new int[] {1, 2}, new int[] {1}) =\\\\u003e new int[] {2}\\\\n```\\\\n```julia\\\\narraydiff([1,2],[1]) == [2]\\\\n```\\\\n```nim\\\\narrayDiff(@[1,2],@[1]) == @[2]\\\\n```\\\\n```php\\\\narrayDiff([1,2],[1]) == [2]\\\\n```\\\\n```r\\\\narray_diff(c(1, 2), 1) == 2\\\\n```\\\\n```prolog\\\\narray_diff([1, 2], [1], [2]). % Result = [2]\\\\n```\\\\n\\\\nIf a value is present in `b`, all of its occurrences must be removed from the other:\\\\n\\\\n```c\\\\narray_diff({1, 2, 2, 2, 3}, 5, {2}, 1, *z) == {1, 3} (z == 2)\\\\n```\\\\n```javascript\\\\narrayDiff([1,2,2,2,3],[2]) == [1,3]\\\\n```\\\\n```ruby\\\\narray_diff([1,2],[1]) == [2]\\\\n```\\\\n```python\\\\narray_diff([1,2,2,2,3],[2]) == [1,3]\\\\n```\\\\n```coffeescript\\\\narrayDiff([1,2,2,2,3],[2]) == [1,3]\\\\n```\\\\n```haskell\\\\ndifference [1,2,2,2,3] [2] == [1,3]\\\\n```\\\\n```csharp\\\\nKata.ArrayDiff(new int[] {1, 2, 2, 2, 3}, new int[] {2}) =\\\\u003e new int[] {1, 3}\\\\n```\\\\n```fsharp\\\\narrayDiff [|2|] [|1; 2; 2; 2; 3|] = [|1; 3|]\\\\n```\\\\n```rust\\\\narray_diff(vec![1,2,2,2,3], vec![2]) == vec![1,3]\\\\n```\\\\n```clojure\\\\n(= (array-diff [1,2,2,2,3] [2]) [1,3])\\\\n```\\\\n```groovy\\\\nKata.arrayDiff([1,2,2,2,3],[2]) == [1,3]\\\\n```\\\\n```java\\\\nKata.arrayDiff(new int[] {1, 2, 2, 2, 3}, new int[] {2}) =\\\\u003e new int[] {1, 3}\\\\n```\\\\n```julia\\\\narraydiff([1,2,2,2,3],[2]) == [1,3]\\\\n```\\\\n```nim\\\\narrayDiff(@[1,2,2,2,3],@[2]) == @[1,3]\\\\n```\\\\n```php\\\\narrayDiff([1,2,2,2,3],[2]) == [1,3]\\\\n```\\\\n```r\\\\narray_diff(c(1, 2, 2, 2, 3), 2) == c(1, 3)\\\\n```\\\\n```prolog\\\\narray_diff([1, 2, 2, 2, 3], [2], [1, 3]). % Result = [1, 3]\\\\n```\\\\n~~~ if:c\\\\nNOTE: In C, assign return array length to pointer *z\\\\n~~~\\','6','Array.diff','1747'),(11,'117.879','526571aae218b8ee490006f4','Write a function that takes an integer as input, and returns the number of bits that are equal to one in the binary representation of that number. You can guarantee that input is non-negative.\\\\n\\\\n*Example*: The binary representation of `1234` is `10011010010`, so the function should return `5` in this case\\\\n\\','6','Bit Counting','1318'),(12,'113.713','5526fc09a1bbd946250002dc','You are given an array (which will have a length of at least 3, but could be very large) containing integers. The array is either entirely comprised of odd integers or entirely comprised of even integers except for a single integer `N`. Write a method that takes the array as an argument and returns this \\\\\\\"outlier\\\\\\\" `N`.\\\\n\\\\n## Examples\\\\n\\\\n```python\\\\n[2, 4, 0, 100, 4, 11, 2602, 36]\\\\nShould return: 11 (the only odd number)\\\\n\\\\n[160, 3, 1719, 19, 11, 13, -21]\\\\nShould return: 160 (the only even number)\\\\n```\\','6','Find The Parity Outlier','1688'),(13,'104.070','54b42f9314d9229fd6000d9c','The goal of this exercise is to convert a string to a new string where each character in the new string is `\\\\\\\"(\\\\\\\"` if that character appears only once in the original string, or `\\\\\\\")\\\\\\\"` if that character appears more than once in the original string. Ignore capitalization when determining if a character is a duplicate.\\\\n\\\\n## Examples\\\\n```\\\\n\\\\\\\"din\\\\\\\"      =\\\\u003e  \\\\\\\"(((\\\\\\\"\\\\n\\\\\\\"recede\\\\\\\"   =\\\\u003e  \\\\\\\"()()()\\\\\\\"\\\\n\\\\\\\"Success\\\\\\\"  =\\\\u003e  \\\\\\\")())())\\\\\\\"\\\\n\\\\\\\"(( @\\\\\\\"     =\\\\u003e  \\\\\\\"))((\\\\\\\" \\\\n```\\\\n\\\\n**Notes**\\\\n\\\\nAssertion messages may be unclear about what they display in some languages. If you read `\\\\\\\"...It Should encode XXX\\\\\\\"`, the `\\\\\\\"XXX\\\\\\\"` is the expected result, not the input!\\','6','Duplicate Encoder','2256'),(14,'97.006','54da539698b8a2ad76000228','You live in the city of Cartesia where all roads are laid out in a perfect grid.  You arrived ten minutes too early to an appointment, so you decided to take the opportunity to go for a short walk.  The city provides its citizens with a Walk Generating App on their phones -- everytime you press the button it sends you an array of one-letter strings representing directions to walk (eg. [\'n\', \'s\', \'w\', \'e\']).  You always walk only a single block for each letter (direction) and you know it takes you one minute to traverse one city block, so create a function that will return **true** if the walk the app gives you will take you exactly ten minutes (you don\'t want to be early or late!) and will, of course, return you to your starting point.  Return **false** otherwise.\\\\n\\\\n\\\\n\\\\u003e **Note**: you will always receive a valid array containing a random assortment of direction letters (\'n\', \'s\', \'e\', or \'w\' only).  It will never give you an empty array (that\'s not a walk, that\'s standing still!).\\\\n\\\\n\\','6','Take a Ten Minute Walk','1997'),(16,'89.346','54e6533c92449cc251001667','Implement the function unique_in_order which takes as argument a sequence and returns a list of items without any elements with the same value next to each other and preserving the original order of elements.\\\\n\\\\nFor example:\\\\n\\\\n```cpp\\\\nuniqueInOrder(\\\\\\\"AAAABBBCCDAABBB\\\\\\\") == {\'A\', \'B\', \'C\', \'D\', \'A\', \'B\'}\\\\nuniqueInOrder(\\\\\\\"ABBCcAD\\\\\\\")         == {\'A\', \'B\', \'C\', \'c\', \'A\', \'D\'}\\\\nuniqueInOrder([1,2,2,3,3])       == {1,2,3}\\\\n```\\\\n```javascript\\\\nuniqueInOrder(\'AAAABBBCCDAABBB\') == [\'A\', \'B\', \'C\', \'D\', \'A\', \'B\']\\\\nuniqueInOrder(\'ABBCcAD\')         == [\'A\', \'B\', \'C\', \'c\', \'A\', \'D\']\\\\nuniqueInOrder([1,2,2,3,3])       == [1,2,3]\\\\n```\\\\n```python\\\\nunique_in_order(\'AAAABBBCCDAABBB\') == [\'A\', \'B\', \'C\', \'D\', \'A\', \'B\']\\\\nunique_in_order(\'ABBCcAD\')         == [\'A\', \'B\', \'C\', \'c\', \'A\', \'D\']\\\\nunique_in_order([1,2,2,3,3])       == [1,2,3]\\\\n```\\\\n```ruby\\\\nunique_in_order(\'AAAABBBCCDAABBB\') == [\'A\', \'B\', \'C\', \'D\', \'A\', \'B\']\\\\nunique_in_order(\'ABBCcAD\')         == [\'A\', \'B\', \'C\', \'c\', \'A\', \'D\']\\\\nunique_in_order([1,2,2,3,3])       == [1,2,3]\\\\n```\\\\n```haskell\\\\nuniqueInOrder \\\\\\\"AAAABBBCCDAABBB\\\\\\\" == \\\\\\\"ABCDAB\\\\\\\"\\\\nuniqueInOrder \\\\\\\"ABBCcAD\\\\\\\"         == \\\\\\\"ABCcAD\\\\\\\"\\\\nuniqueInOrder [1,2,2,3,3]       == [1,2,3]\\\\n```\\\\n```crystal\\\\nunique_in_order(\\\\\\\"AAAABBBCCDAABBB\\\\\\\") == [\'A\', \'B\', \'C\', \'D\', \'A\', \'B\']\\\\nunique_in_order(\\\\\\\"ABBCcAD\\\\\\\")         == [\'A\', \'B\', \'C\', \'c\', \'A\', \'D\']\\\\nunique_in_order([1,2,2,3,3])       == [1,2,3]\\\\n```\\\\n\\','6','Unique In Order','1706'),(17,'86.979','551dc350bf4e526099000ae5','Polycarpus works as a DJ in the best Berland nightclub, and he often uses dubstep music in his performance. Recently, he has decided to take a couple of old songs and make dubstep remixes from them.\\\\n\\\\nLet\'s assume that a song consists of some number of words (that don\'t contain WUB). To make the dubstep remix of this song, Polycarpus inserts a certain number of words \\\\\\\"WUB\\\\\\\" before the first word of the song (the number may be zero), after the last word (the number may be zero), and between words (at least one between any pair of neighbouring words), and then the boy glues together all the words, including \\\\\\\"WUB\\\\\\\", in one string and plays the song at the club.\\\\n\\\\nFor example, a song with words \\\\\\\"I AM X\\\\\\\" can transform into a dubstep remix as \\\\\\\"WUBWUBIWUBAMWUBWUBX\\\\\\\" and cannot transform into \\\\\\\"WUBWUBIAMWUBX\\\\\\\".\\\\n\\\\nRecently, Jonny has heard Polycarpus\'s new dubstep track, but since he isn\'t into modern music, he decided to find out what was the initial song that Polycarpus remixed. Help Jonny restore the original song.\\\\n\\\\n## Input\\\\nThe input consists of a single non-empty string, consisting only of uppercase English letters, the string\'s length doesn\'t exceed 200 characters\\\\n\\\\n## Output\\\\nReturn the words of the initial song that Polycarpus used to make a dubsteb remix. Separate the words with a space.\\\\n\\\\n## Examples\\\\n\\\\n```javascript\\\\nsongDecoder(\\\\\\\"WUBWEWUBAREWUBWUBTHEWUBCHAMPIONSWUBMYWUBFRIENDWUB\\\\\\\")\\\\n  // =\\\\u003e  WE ARE THE CHAMPIONS MY FRIEND\\\\n```\\\\n```ruby\\\\nsong_decoder(\\\\\\\"WUBWEWUBAREWUBWUBTHEWUBCHAMPIONSWUBMYWUBFRIENDWUB\\\\\\\")\\\\n  #  =\\\\u003e  WE ARE THE CHAMPIONS MY FRIEND\\\\n```\\\\n```haskell\\\\nsongDecoder \\\\\\\"WUBWEWUBAREWUBWUBTHEWUBCHAMPIONSWUBMYWUBFRIENDWUB\\\\\\\"\\\\n  `shouldBe` \\\\\\\"WE ARE THE CHAMPIONS MY FRIEND\\\\\\\"\\\\n```\\\\n```python\\\\nsong_decoder(\\\\\\\"WUBWEWUBAREWUBWUBTHEWUBCHAMPIONSWUBMYWUBFRIENDWUB\\\\\\\")\\\\n  # =\\\\u003e  WE ARE THE CHAMPIONS MY FRIEND\\\\n```\\\\n```clojure\\\\n(song-decoder \\\\\\\"WUBWEWUBAREWUBWUBTHEWUBCHAMPIONSWUBMYWUBFRIENDWUB\\\\\\\")\\\\n  ; =\\\\u003e WE ARE THE CHAMPIONS MY FRIEND\\\\n```\\\\n```scala\\\\nsongDecoder(\\\\\\\"WUBWEWUBAREWUBWUBTHEWUBCHAMPIONSWUBMYWUBFRIENDWUB\\\\\\\")\\\\n  // =\\\\u003e  WE ARE THE CHAMPIONS MY FRIEND\\\\n```\\\\n```rust\\\\nsongDecoder(\\\\\\\"WUBWEWUBAREWUBWUBTHEWUBCHAMPIONSWUBMYWUBFRIENDWUB\\\\\\\")\\\\n  // =\\\\u003e  WE ARE THE CHAMPIONS MY FRIEND\\\\n```\\','6','Dubstep','1634'),(18,'82.504','556deca17c58da83c00002db','Well met with Fibonacci bigger brother, AKA Tribonacci.\\\\n\\\\nAs the name may already reveal, it works basically like a Fibonacci, but summing the last 3 (instead of 2) numbers of the sequence to generate the next. And, worse part of it, regrettably I won\'t get to hear non-native Italian speakers trying to pronounce it :(\\\\n\\\\nSo, if we are to start our Tribonacci sequence with `[1, 1, 1]` as a starting input (AKA *signature*), we have this sequence:\\\\n\\\\n```\\\\n[1, 1 ,1, 3, 5, 9, 17, 31, ...]\\\\n```\\\\n\\\\nBut what if we started with `[0, 0, 1]` as a signature? As starting with `[0, 1]` instead of `[1, 1]` basically *shifts* the common Fibonacci sequence by once place, you may be tempted to think that we would get the same sequence shifted by 2 places, but that is not the case and we would get:\\\\n\\\\n```\\\\n[0, 0, 1, 1, 2, 4, 7, 13, 24, ...]\\\\n```\\\\n\\\\nWell, you may have guessed it by now, but to be clear: you need to create a fibonacci function that given a **signature** array/list, returns **the first n elements - signature included** of the so seeded sequence.\\\\n\\\\nSignature will always contain 3 numbers; n will always be a non-negative number; if `n == 0`, then return an empty array (except in C return NULL) and be ready for anything else which is not clearly specified ;)\\\\n\\\\nIf you enjoyed this kata more advanced and generalized version of it can be found in the \\\\u003ca href=\\\\\\\"http://www.codewars.com/kata/fibonacci-tribonacci-and-friends\\\\\\\"  target=\\\\\\\"_blank\\\\\\\" title=\\\\\\\"Xbonacci sequence\\\\\\\"\\\\u003eXbonacci kata\\\\u003c/a\\\\u003e\\\\n\\\\n*[Personal thanks to Professor \\\\u003ca href=\\\\\\\"https://www.coursera.org/instructor/jimfowler\\\\\\\" target=\\\\\\\"_blank\\\\\\\" title=\\\\\\\"Jim Fowler\\\\\\\"\\\\u003eJim Fowler\\\\u003c/a\\\\u003e on Coursera for his awesome classes that I really recommend to any math enthusiast and for showing me this mathematical curiosity too with his usual contagious passion :)]*\\','6','Tribonacci Sequence','1886'),(19,'82.053','55c45be3b2079eccff00010f','Your task is to sort a given string. Each word in the string will contain a single number. This number is the position the word should have in the result.\\\\n\\\\nNote: Numbers can be from 1 to 9. So 1 will be the first word (not 0).\\\\n\\\\nIf the input string is empty, return an empty string.\\\\nThe words in the input String will only contain valid consecutive numbers.\\\\n\\\\n\\\\n## Examples\\\\n\\\\n```\\\\n\\\\\\\"is2 Thi1s T4est 3a\\\\\\\"  --\\\\u003e  \\\\\\\"Thi1s is2 3a T4est\\\\\\\"\\\\n\\\\\\\"4of Fo1r pe6ople g3ood th5e the2\\\\\\\"  --\\\\u003e  \\\\\\\"Fo1r the2 g3ood 4of th5e pe6ople\\\\\\\"\\\\n\\\\\\\"\\\\\\\"  --\\\\u003e  \\\\\\\"\\\\\\\"\\\\n```\\','6','Your order, please','2112'),(20,'78.037','552c028c030765286c00007d','Bob is preparing to pass IQ test. The most frequent task in this test is `to find out which one of the given numbers differs from the others`. Bob observed that one number usually differs from the others in **evenness**. Help Bob — to check his answers, he needs a program that among the given numbers finds one that is different in evenness, and return a position of this number.\\\\n\\\\n`!` Keep in mind that your task is to help Bob solve a `real IQ test`, which means indexes of the elements start from `1 (not 0)`\\\\n\\\\n## Examples:\\\\n\\\\n```csharp\\\\nIQ.Test(\\\\\\\"2 4 7 8 10\\\\\\\") =\\\\u003e 3 // Third number is odd, while the rest of the numbers are even\\\\n\\\\nIQ.Test(\\\\\\\"1 2 1 1\\\\\\\") =\\\\u003e 2 // Second number is even, while the rest of the numbers are odd\\\\n```\\\\n```javascript\\\\niqTest(\\\\\\\"2 4 7 8 10\\\\\\\") =\\\\u003e 3 // Third number is odd, while the rest of the numbers are even\\\\n\\\\niqTest(\\\\\\\"1 2 1 1\\\\\\\") =\\\\u003e 2 // Second number is even, while the rest of the numbers are odd\\\\n```\\\\n```typescript\\\\niqTest(\\\\\\\"2 4 7 8 10\\\\\\\") =\\\\u003e 3 // Third number is odd, while the rest of the numbers are even\\\\n\\\\niqTest(\\\\\\\"1 2 1 1\\\\\\\") =\\\\u003e 2 // Second number is even, while the rest of the numbers are odd\\\\n```\\\\n```ruby\\\\niq_test(\\\\\\\"2 4 7 8 10\\\\\\\") =\\\\u003e 3 # Third number is odd, while the rest of the numbers are even\\\\n\\\\niq_test(\\\\\\\"1 2 1 1\\\\\\\") =\\\\u003e 2 # Second number is even, while the rest of the numbers are odd\\\\n```\\\\n```python\\\\niq_test(\\\\\\\"2 4 7 8 10\\\\\\\") =\\\\u003e 3 # Third number is odd, while the rest of the numbers are even\\\\n\\\\niq_test(\\\\\\\"1 2 1 1\\\\\\\") =\\\\u003e 2 # Second number is even, while the rest of the numbers are odd\\\\n```\\\\n```rust\\\\niq_test(\\\\\\\"2 4 7 8 10\\\\\\\") =\\\\u003e 3 // Third number is odd, while the rest of the numbers are even\\\\n\\\\niq_test(\\\\\\\"1 2 1 1\\\\\\\") =\\\\u003e 2 // Second number is even, while the rest of the numbers are odd\\\\n```\\\\n  \\\\n\\','6','IQ Test','1774'),(21,'76.703','517abf86da9663f1d2000003','Complete the method/function so that it converts dash/underscore delimited words into camel casing. The first word within the output should be capitalized **only** if the original word was capitalized (known as Upper Camel Case, also often referred to as Pascal case). \\\\n\\\\n### Examples\\\\n\\\\n`\\\\\\\"the-stealth-warrior\\\\\\\"` gets converted to `\\\\\\\"theStealthWarrior\\\\\\\"`  \\\\n`\\\\\\\"The_Stealth_Warrior\\\\\\\"` gets converted to `\\\\\\\"TheStealthWarrior\\\\\\\"`\\\\n\\','6','Convert string to camel case','1376'),(22,'73.110','5552101f47fc5178b1000050','Some numbers have funny properties. For example:\\\\n\\\\n\\\\u003e 89 --\\\\u003e 8¹ + 9² = 89 * 1\\\\n\\\\n\\\\u003e 695 --\\\\u003e 6² + 9³ + 5⁴= 1390 = 695 * 2\\\\n\\\\n\\\\u003e 46288 --\\\\u003e 4³ + 6⁴+ 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51\\\\n\\\\nGiven a positive integer n written as abcd... (a, b, c, d... being digits) and a positive integer p \\\\n- we want to find a positive integer k, if it exists, such as the sum of the digits of n taken to the successive powers of p is equal to k * n. \\\\n\\\\nIn other words:\\\\n\\\\n\\\\n\\\\u003e Is there an integer k such as : (a ^ p + b ^ (p+1) + c ^(p+2) + d ^ (p+3) + ...) = n * k\\\\n\\\\nIf it is the case we will return k, if not return -1.\\\\n\\\\n**Note**: n and p will always be given as strictly positive integers.\\\\n\\\\n```julia\\\\ndig_pow(89, 1) should return 1 since 8¹ + 9² = 89 = 89 * 1\\\\ndig_pow(92, 1) should return -1 since there is no k such as 9¹ + 2² equals 92 * k\\\\ndig_pow(695, 2) should return 2 since 6² + 9³ + 5⁴= 1390 = 695 * 2\\\\ndig_pow(46288, 3) should return 51 since 4³ + 6⁴+ 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51\\\\n```\\\\n```rust\\\\ndig_pow(89, 1) should return 1 since 8¹ + 9² = 89 = 89 * 1\\\\ndig_pow(92, 1) should return -1 since there is no k such as 9¹ + 2² equals 92 * k\\\\ndig_pow(695, 2) should return 2 since 6² + 9³ + 5⁴= 1390 = 695 * 2\\\\ndig_pow(46288, 3) should return 51 since 4³ + 6⁴+ 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51\\\\n```\\\\n```ruby\\\\ndig_pow(89, 1) should return 1 since 8¹ + 9² = 89 = 89 * 1\\\\ndig_pow(92, 1) should return -1 since there is no k such as 9¹ + 2² equals 92 * k\\\\ndig_pow(695, 2) should return 2 since 6² + 9³ + 5⁴= 1390 = 695 * 2\\\\ndig_pow(46288, 3) should return 51 since 4³ + 6⁴+ 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51\\\\n```\\\\n```crystal\\\\ndig_pow(89, 1) should return 1 since 8¹ + 9² = 89 = 89 * 1\\\\ndig_pow(92, 1) should return -1 since there is no k such as 9¹ + 2² equals 92 * k\\\\ndig_pow(695, 2) should return 2 since 6² + 9³ + 5⁴= 1390 = 695 * 2\\\\ndig_pow(46288, 3) should return 51 since 4³ + 6⁴+ 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51\\\\n```\\\\n```python\\\\ndig_pow(89, 1) should return 1 since 8¹ + 9² = 89 = 89 * 1\\\\ndig_pow(92, 1) should return -1 since there is no k such as 9¹ + 2² equals 92 * k\\\\ndig_pow(695, 2) should return 2 since 6² + 9³ + 5⁴= 1390 = 695 * 2\\\\ndig_pow(46288, 3) should return 51 since 4³ + 6⁴+ 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51\\\\n```\\\\n```csharp\\\\ndigPow(89, 1) should return 1 since 8¹ + 9² = 89 = 89 * 1\\\\ndigPow(92, 1) should return -1 since there is no k such as 9¹ + 2² equals 92 * k\\\\ndigPow(695, 2) should return 2 since 6² + 9³ + 5⁴= 1390 = 695 * 2\\\\ndigPow(46288, 3) should return 51 since 4³ + 6⁴+ 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51\\\\n```\\\\n```fsharp\\\\ndigPow(89, 1) should return 1 since 8¹ + 9² = 89 = 89 * 1\\\\ndigPow(92, 1) should return -1 since there is no k such as 9¹ + 2² equals 92 * k\\\\ndigPow(695, 2) should return 2 since 6² + 9³ + 5⁴= 1390 = 695 * 2\\\\ndigPow(46288, 3) should return 51 since 4³ + 6⁴+ 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51\\\\n```\\\\n```ocaml\\\\ndigPow(89, 1) should return 1 since 8¹ + 9² = 89 = 89 * 1\\\\ndigPow(92, 1) should return -1 since there is no k such as 9¹ + 2² equals 92 * k\\\\ndigPow(695, 2) should return 2 since 6² + 9³ + 5⁴= 1390 = 695 * 2\\\\ndigPow(46288, 3) should return 51 since 4³ + 6⁴+ 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51\\\\n```\\\\n```php\\\\ndigPow(89, 1) should return 1 since 8¹ + 9² = 89 = 89 * 1\\\\ndigPow(92, 1) should return -1 since there is no k such as 9¹ + 2² equals 92 * k\\\\ndigPow(695, 2) should return 2 since 6² + 9³ + 5⁴= 1390 = 695 * 2\\\\ndigPow(46288, 3) should return 51 since 4³ + 6⁴+ 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51\\\\n```\\\\n```cpp\\\\ndigPow(89, 1) should return 1 since 8¹ + 9² = 89 = 89 * 1\\\\ndigPow(92, 1) should return -1 since there is no k such as 9¹ + 2² equals 92 * k\\\\ndigPow(695, 2) should return 2 since 6² + 9³ + 5⁴= 1390 = 695 * 2\\\\ndigPow(46288, 3) should return 51 since 4³ + 6⁴+ 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51\\\\n```\\\\n```java\\\\ndigPow(89, 1) should return 1 since 8¹ + 9² = 89 = 89 * 1\\\\ndigPow(92, 1) should return -1 since there is no k such as 9¹ + 2² equals 92 * k\\\\ndigPow(695, 2) should return 2 since 6² + 9³ + 5⁴= 1390 = 695 * 2\\\\ndigPow(46288, 3) should return 51 since 4³ + 6⁴+ 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51\\\\n```\\\\n```javascript\\\\ndigPow(89, 1) should return 1 since 8¹ + 9² = 89 = 89 * 1\\\\ndigPow(92, 1) should return -1 since there is no k such as 9¹ + 2² equals 92 * k\\\\ndigPow(695, 2) should return 2 since 6² + 9³ + 5⁴= 1390 = 695 * 2\\\\ndigPow(46288, 3) should return 51 since 4³ + 6⁴+ 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51\\\\n```\\\\n```coffeescript\\\\ndigPow(89, 1) should return 1 since 8¹ + 9² = 89 = 89 * 1\\\\ndigPow(92, 1) should return -1 since there is no k such as 9¹ + 2² equals 92 * k\\\\ndigPow(695, 2) should return 2 since 6² + 9³ + 5⁴= 1390 = 695 * 2\\\\ndigPow(46288, 3) should return 51 since 4³ + 6⁴+ 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51\\\\n```\\\\n```go\\\\ndigPow(89, 1) should return 1 since 8¹ + 9² = 89 = 89 * 1\\\\ndigPow(92, 1) should return -1 since there is no k such as 9¹ + 2² equals 92 * k\\\\ndigPow(695, 2) should return 2 since 6² + 9³ + 5⁴= 1390 = 695 * 2\\\\ndigPow(46288, 3) should return 51 since 4³ + 6⁴+ 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51\\\\n```\\\\n```haskell\\\\ndigpow 89 1 should return 1 since 8¹ + 9² = 89 = 89 * 1\\\\ndigpow 92 1 should return -1 since there is no k such as 9¹ + 2² equals 92 * k\\\\ndigpow 695 2 should return 2 since 6² + 9³ + 5⁴= 1390 = 695 * 2\\\\ndigpow 46288 3 should return 51 since 4³ + 6⁴+ 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51\\\\n```\\\\n```clojure\\\\ndig-pow 89 1 should return 1 since 8¹ + 9² = 89 = 89 * 1\\\\ndig-pow 92 1 should return -1 since there is no k such as 9¹ + 2² equals 92 * k\\\\ndig-pow 695 2 should return 2 since 6² + 9³ + 5⁴= 1390 = 695 * 2\\\\ndig-pow 46288 3 should return 51 since 4³ + 6⁴+ 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51\\\\n```\\\\n```kotlin\\\\ndigPow(89, 1) should return 1 since 8¹ + 9² = 89 = 89 * 1\\\\ndigPow(92, 1) should return -1 since there is no k such as 9¹ + 2² equals 92 * k\\\\ndigPow(695, 2) should return 2 since 6² + 9³ + 5⁴= 1390 = 695 * 2\\\\ndigPow(46288, 3) should return 51 since 4³ + 6⁴+ 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51\\\\n```\\\\n```nasm\\\\nmov edi, 89\\\\nmov esi, 1\\\\ncall dig_pow  ; EAX \\\\u003c- 1 since 8¹ + 9² = 89 = 89 * 1\\\\n\\\\nmov edi, 92\\\\nmov esi, 1\\\\ncall dig_pow  ; EAX \\\\u003c- -1 since there is no k such as 9¹ + 2² equals 92 * k\\\\n\\\\nmov edi, 695\\\\nmov esi, 2\\\\ncall dig_pow  ; EAX \\\\u003c- 2 since 6² + 9³ + 5⁴= 1390 = 695 * 2\\\\n\\\\nmov edi, 46288\\\\nmov esi, 3\\\\ncall dig_pow  ; EAX \\\\u003c- 51 since 4³ + 6⁴+ 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51\\\\n```\\\\n```lua\\\\ndig_pow(89, 1) -- should return 1 since 8¹ + 9² = 89 = 89 * 1\\\\ndig_pow(92, 1) -- should return -1 since there is no k such as 9¹ + 2² equals 92 * k\\\\ndig_pow(695, 2) -- should return 2 since 6² + 9³ + 5⁴= 1390 = 695 * 2\\\\ndig_pow(46288, 3) -- should return 51 since 4³ + 6⁴+ 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51\\\\n```\\\\n```commonlisp\\\\ndig-pow(89, 1) should return 1 since 8¹ + 9² = 89 = 89 * 1\\\\ndig-pow(92, 1) should return -1 since there is no k such as 9¹ + 2² equals 92 * k\\\\ndig-pow(695, 2) should return 2 since 6² + 9³ + 5⁴= 1390 = 695 * 2\\\\ndig-pow(46288, 3) should return 51 since 4³ + 6⁴+ 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51\\\\n```\\\\n```pascal\\\\nDigPow(89, 1) should return 1 since 8¹ + 9² = 89 = 89 * 1\\\\nDigPow(92, 1) should return -1 since there is no k such as 9¹ + 2² equals 92 * k\\\\nDigPow(695, 2) should return 2 since 6² + 9³ + 5⁴= 1390 = 695 * 2\\\\nDigPow(46288, 3) should return 51 since 4³ + 6⁴+ 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51\\\\n```\\','6','Playing with digits','2062'),(23,'184.630','54ff3102c1bad923760001f3','Return the number (count) of vowels in the given string. \\\\n\\\\nWe will consider `a, e, i, o, u` as vowels for this Kata (but not `y`).\\\\n\\\\nThe input string will only consist of lower case letters and/or spaces.\\\\n\\','7','Vowel Count','1365'),(24,'148.207','52fba66badcd10859f00097e','Trolls are attacking your comment section!\\\\n\\\\nA common way to deal with this situation is to remove all of the vowels from the trolls\' comments, neutralizing the threat.\\\\n\\\\nYour task is to write a function that takes a string and return a new string with all vowels removed.\\\\n\\\\nFor example, the string \\\\\\\"This website is for losers LOL!\\\\\\\" would become \\\\\\\"Ths wbst s fr lsrs LL!\\\\\\\".\\\\n\\\\nNote: for this kata `y` isn\'t considered a vowel.\\\\n\\','7','Disemvowel Trolls','1478'),(25,'135.980','546e2562b03326a88e000020','Welcome. In this kata, you are asked to square every digit of a number and concatenate them.\\\\n\\\\nFor example, if we run 9119 through the function, 811181 will come out, because 9\\\\u003csup\\\\u003e2\\\\u003c/sup\\\\u003e is 81 and 1\\\\u003csup\\\\u003e2\\\\u003c/sup\\\\u003e is 1.\\\\n\\\\n**Note:** The function accepts an integer and returns an integer\\','7','Square Every Digit','1240'),(26,'133.140','554b4ac871d6813a03000035','In this little assignment you are given a string of space separated numbers, and have to return the highest and lowest number.\\\\n\\\\n**Example:**\\\\n```php\\\\nhighAndLow(\\\\\\\"1 2 3 4 5\\\\\\\");  // return \\\\\\\"5 1\\\\\\\"\\\\nhighAndLow(\\\\\\\"1 2 -3 4 5\\\\\\\"); // return \\\\\\\"5 -3\\\\\\\"\\\\nhighAndLow(\\\\\\\"1 9 3 4 -5\\\\\\\"); // return \\\\\\\"9 -5\\\\\\\"\\\\n```\\\\n```csharp\\\\nKata.HighAndLow(\\\\\\\"1 2 3 4 5\\\\\\\");  // return \\\\\\\"5 1\\\\\\\"\\\\nKata.HighAndLow(\\\\\\\"1 2 -3 4 5\\\\\\\"); // return \\\\\\\"5 -3\\\\\\\"\\\\nKata.HighAndLow(\\\\\\\"1 9 3 4 -5\\\\\\\"); // return \\\\\\\"9 -5\\\\\\\"\\\\n```\\\\n```fsharp\\\\nhighAndLow \\\\\\\"1 2 3 4 5\\\\\\\"  // return \\\\\\\"5 1\\\\\\\"\\\\nhighAndLow \\\\\\\"1 2 -3 4 5\\\\\\\" // return \\\\\\\"5 -3\\\\\\\"\\\\nhighAndLow \\\\\\\"1 9 3 4 -5\\\\\\\" // return \\\\\\\"9 -5\\\\\\\"\\\\n```\\\\n```javascript\\\\nhighAndLow(\\\\\\\"1 2 3 4 5\\\\\\\");  // return \\\\\\\"5 1\\\\\\\"\\\\nhighAndLow(\\\\\\\"1 2 -3 4 5\\\\\\\"); // return \\\\\\\"5 -3\\\\\\\"\\\\nhighAndLow(\\\\\\\"1 9 3 4 -5\\\\\\\"); // return \\\\\\\"9 -5\\\\\\\"\\\\n```\\\\n```cpp\\\\nhighAndLow(\\\\\\\"1 2 3 4 5\\\\\\\");  // return \\\\\\\"5 1\\\\\\\"\\\\nhighAndLow(\\\\\\\"1 2 -3 4 5\\\\\\\"); // return \\\\\\\"5 -3\\\\\\\"\\\\nhighAndLow(\\\\\\\"1 9 3 4 -5\\\\\\\"); // return \\\\\\\"9 -5\\\\\\\"\\\\n```\\\\n```typescript\\\\nhighAndLow(\\\\\\\"1 2 3 4 5\\\\\\\");  // return \\\\\\\"5 1\\\\\\\"\\\\nhighAndLow(\\\\\\\"1 2 -3 4 5\\\\\\\"); // return \\\\\\\"5 -3\\\\\\\"\\\\nhighAndLow(\\\\\\\"1 9 3 4 -5\\\\\\\"); // return \\\\\\\"9 -5\\\\\\\"\\\\n```\\\\n```coffeescript\\\\nhighAndLow(\\\\\\\"1 2 3 4 5\\\\\\\")  # return \\\\\\\"5 1\\\\\\\"\\\\nhighAndLow(\\\\\\\"1 2 -3 4 5\\\\\\\") # return \\\\\\\"5 -3\\\\\\\"\\\\nhighAndLow(\\\\\\\"1 9 3 4 -5\\\\\\\") # return \\\\\\\"9 -5\\\\\\\"\\\\n```\\\\n```python\\\\nhigh_and_low(\\\\\\\"1 2 3 4 5\\\\\\\")  # return \\\\\\\"5 1\\\\\\\"\\\\nhigh_and_low(\\\\\\\"1 2 -3 4 5\\\\\\\") # return \\\\\\\"5 -3\\\\\\\"\\\\nhigh_and_low(\\\\\\\"1 9 3 4 -5\\\\\\\") # return \\\\\\\"9 -5\\\\\\\"\\\\n```\\\\n```ruby\\\\nhigh_and_low(\\\\\\\"1 2 3 4 5\\\\\\\")  # return \\\\\\\"5 1\\\\\\\"\\\\nhigh_and_low(\\\\\\\"1 2 -3 4 5\\\\\\\") # return \\\\\\\"5 -3\\\\\\\"\\\\nhigh_and_low(\\\\\\\"1 9 3 4 -5\\\\\\\") # return \\\\\\\"9 -5\\\\\\\"\\\\n```\\\\n```crystal\\\\nhigh_and_low(\\\\\\\"1 2 3 4 5\\\\\\\")  # return \\\\\\\"5 1\\\\\\\"\\\\nhigh_and_low(\\\\\\\"1 2 -3 4 5\\\\\\\") # return \\\\\\\"5 -3\\\\\\\"\\\\nhigh_and_low(\\\\\\\"1 9 3 4 -5\\\\\\\") # return \\\\\\\"9 -5\\\\\\\"\\\\n```\\\\n```r\\\\nhigh_and_low(\\\\\\\"1 2 3 4 5\\\\\\\")  # return \\\\\\\"5 1\\\\\\\"\\\\nhigh_and_low(\\\\\\\"1 2 -3 4 5\\\\\\\") # return \\\\\\\"5 -3\\\\\\\"\\\\nhigh_and_low(\\\\\\\"1 9 3 4 -5\\\\\\\") # return \\\\\\\"9 -5\\\\\\\"\\\\n```\\\\n```java\\\\nhighAndLow(\\\\\\\"1 2 3 4 5\\\\\\\")  // return \\\\\\\"5 1\\\\\\\"\\\\nhighAndLow(\\\\\\\"1 2 -3 4 5\\\\\\\") // return \\\\\\\"5 -3\\\\\\\"\\\\nhighAndLow(\\\\\\\"1 9 3 4 -5\\\\\\\") // return \\\\\\\"9 -5\\\\\\\"\\\\n```\\\\n```haskell\\\\nhighAndLow \\\\\\\"1 2 3 4 5\\\\\\\")  # return \\\\\\\"5 1\\\\\\\"\\\\nhighAndLow \\\\\\\"1 2 -3 4 5\\\\\\\") # return \\\\\\\"5 -3\\\\\\\"\\\\nhighAndLow \\\\\\\"1 9 3 4 -5\\\\\\\") # return \\\\\\\"9 -5\\\\\\\"\\\\n```\\\\n```golang\\\\nHighAndLow(\\\\\\\"1 2 3 4 5\\\\\\\")  // return \\\\\\\"5 1\\\\\\\"\\\\nHighAndLow(\\\\\\\"1 2 -3 4 5\\\\\\\") // return \\\\\\\"5 -3\\\\\\\"\\\\nHighAndLow(\\\\\\\"1 9 3 4 -5\\\\\\\") // return \\\\\\\"9 -5\\\\\\\"\\\\n```\\\\n```kotlin\\\\nhighAndLow(\\\\\\\"1 2 3 4 5\\\\\\\")  // return \\\\\\\"5 1\\\\\\\"\\\\nhighAndLow(\\\\\\\"1 2 -3 4 5\\\\\\\") // return \\\\\\\"5 -3\\\\\\\"\\\\nhighAndLow(\\\\\\\"1 9 3 4 -5\\\\\\\") // return \\\\\\\"9 -5\\\\\\\"\\\\n```\\\\n```elixir\\\\nKata.high_and_low(\\\\\\\"1 2 3 4 5\\\\\\\")  # return \\\\\\\"5 1\\\\\\\"\\\\nKata.high_and_low(\\\\\\\"1 2 -3 4 5\\\\\\\") # return \\\\\\\"5 -3\\\\\\\"\\\\nKata.high_and_low(\\\\\\\"1 9 3 4 -5\\\\\\\") # return \\\\\\\"9 -5\\\\\\\"\\\\n```\\\\n\\\\n**Notes:**\\\\n- All numbers are valid ```Int32```, no *need* to validate them.\\\\n- There will always be at least one number in the input string.\\\\n- Output string must be two numbers separated by a single space, and highest number is first.\\\\n\\','7','Highest and Lowest','1576'),(27,'135.244','56747fd5cb988479af000028','You are going to be given a word. Your job is to return the middle character of the word. If the word\'s length is odd, return the middle character. If the word\'s length is even, return the middle 2 characters.\\\\n\\\\n#Examples:\\\\n~~~if-not:bf\\\\n```\\\\nKata.getMiddle(\\\\\\\"test\\\\\\\") should return \\\\\\\"es\\\\\\\"\\\\n\\\\nKata.getMiddle(\\\\\\\"testing\\\\\\\") should return \\\\\\\"t\\\\\\\"\\\\n\\\\nKata.getMiddle(\\\\\\\"middle\\\\\\\") should return \\\\\\\"dd\\\\\\\"\\\\n\\\\nKata.getMiddle(\\\\\\\"A\\\\\\\") should return \\\\\\\"A\\\\\\\"\\\\n\\\\n```\\\\n~~~\\\\n~~~if:bf\\\\n```\\\\nrunBF(\\\\\\\"test\\\\\\\\0\\\\\\\") should return \\\\\\\"es\\\\\\\"\\\\n\\\\nrunBF(\\\\\\\"testing\\\\\\\\0\\\\\\\") should return \\\\\\\"t\\\\\\\"\\\\n\\\\nrunBF(\\\\\\\"middle\\\\\\\\0\\\\\\\") should return \\\\\\\"dd\\\\\\\"\\\\n\\\\nrunBF(\\\\\\\"A\\\\\\\\0\\\\\\\") should return \\\\\\\"A\\\\\\\"\\\\n\\\\n```\\\\n~~~\\\\n\\\\n#Input\\\\n\\\\nA word (string) of length `0 \\\\u003c str \\\\u003c 1000` (In javascript you may get slightly more than 1000 in some test cases due to an error in the test cases). You do not need to test for this. This is only here to tell you that you do not need to worry about your solution timing out.\\\\n\\\\n\\\\n#Output\\\\n\\\\nThe middle character(s) of the word represented as a string. \\','7','Get the Middle Character','1186'),(28,'128.409','54c27a33fb7da0db0100040e','## A square of squares\\\\nYou like building blocks. You especially like building blocks that are squares. And what you even like more, is to arrange them into a square of square building blocks!\\\\n\\\\nHowever, sometimes, you can\'t arrange them into a square. Instead, you end up with an ordinary rectangle! Those blasted things! If you just had a way to know, whether you\'re currently working in vain… Wait! That\'s it! You just have to check if your number of building blocks is a _perfect square_.\\\\n\\\\n## Task\\\\n\\\\nGiven an integral number, determine if it\'s a [square number](https://en.wikipedia.org/wiki/Square_number):\\\\n\\\\n\\\\u003e In mathematics, a __square number__ or __perfect square__ is an integer that is the square of an integer; in other words, it is the product of some integer with itself.\\\\n\\\\nThe tests will _always_ use some integral number, so don\'t worry about that in dynamic typed languages.\\\\n\\\\n### Examples\\\\n\\\\n```\\\\n-1  =\\\\u003e  false\\\\n 0  =\\\\u003e  true\\\\n 3  =\\\\u003e  false\\\\n 4  =\\\\u003e  true\\\\n25  =\\\\u003e  true\\\\n26  =\\\\u003e  false\\\\n```\\','7','You\'re a square!','1117'),(29,'123.147','5467e4d82edf8bbf40000155','Your task is to make a function that can take any non-negative integer as an argument and return it with its digits in descending order. Essentially, rearrange the digits to create the highest possible number.\\\\n\\\\n\\\\n### Examples:\\\\n\\\\nInput: `42145`\\\\nOutput: `54421`\\\\n\\\\nInput: `145263`\\\\nOutput: `654321`\\\\n\\\\nInput: `123456789`\\\\nOutput: `987654321`\\\\n\\\\n\\','7','Descending Order','1581'),(30,'120.734','5667e8f4e3f572a8f2000039','This time no story, no theory. The examples below show you how to write function `accum`:\\\\n\\\\n#### Examples:\\\\n```\\\\naccum(\\\\\\\"abcd\\\\\\\") -\\\\u003e \\\\\\\"A-Bb-Ccc-Dddd\\\\\\\"\\\\naccum(\\\\\\\"RqaEzty\\\\\\\") -\\\\u003e \\\\\\\"R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy\\\\\\\"\\\\naccum(\\\\\\\"cwAt\\\\\\\") -\\\\u003e \\\\\\\"C-Ww-Aaa-Tttt\\\\\\\"\\\\n```\\\\n\\\\nThe parameter of accum is a string which includes only letters from `a..z` and `A..Z`.\\\\n\\\\n\\\\n\\\\n\\\\n\\','7','Mumbling','1846'),(31,'117.784','57cebe1dc6fdc20c57000ac9','Simple, given a string of words, return the length of the shortest word(s).\\\\n\\\\nString will never be empty and you do not need to account for different data types.\\\\n\\','7','Shortest Word','999'),(32,'115.319','55908aad6620c066bc00002a','Check to see if a string has the same amount of \'x\'s and \'o\'s. The method must return a boolean and be case insensitive. The string can contain any char.\\\\n\\\\nExamples input/output:\\\\n```\\\\nXO(\\\\\\\"ooxx\\\\\\\") =\\\\u003e true\\\\nXO(\\\\\\\"xooxx\\\\\\\") =\\\\u003e false\\\\nXO(\\\\\\\"ooxXm\\\\\\\") =\\\\u003e true\\\\nXO(\\\\\\\"zpzpzpp\\\\\\\") =\\\\u003e true // when no \'x\' and \'o\' is present should return true\\\\nXO(\\\\\\\"zzoo\\\\\\\") =\\\\u003e false\\\\n```\\','7','Exes and Ohs','942'),(33,'113.066','5390bac347d09b7da40006f6','Jaden Smith, the son of Will Smith, is the star of films such as The Karate Kid (2010) and After Earth (2013). Jaden is also known for [some of his philosophy that he delivers via Twitter](https://twitter.com/jaden). When writing on Twitter, he is known for almost always capitalizing every word. For simplicity, you\'ll have to capitalize each word, check out how contractions are expected to be in the example below.\\\\n\\\\nYour task is to convert strings to how they would be written by Jaden Smith. The strings are actual quotes from Jaden Smith, but they are not capitalized in the same way he originally typed them.\\\\n\\\\nExample:\\\\n\\\\n    Not Jaden-Cased: \\\\\\\"How can mirrors be real if our eyes aren\'t real\\\\\\\"\\\\n    Jaden-Cased:     \\\\\\\"How Can Mirrors Be Real If Our Eyes Aren\'t Real\\\\\\\"\\\\n\\\\n```if:java    \\\\nNote that the **Java version** expects a return value of null for an empty string or null.\\\\n```\\\\n\\\\n[Link to Jaden\'s former Twitter account @officialjaden via archive.org](https://web.archive.org/web/20190624190255/https://twitter.com/officialjaden)\\','7','Jaden Casing Strings','1450'),(34,'111.104','554e4a2f232cdd87d9000038','Deoxyribonucleic acid (DNA) is a chemical found in the nucleus of cells and carries the \\\\\\\"instructions\\\\\\\" for the development and functioning of living organisms.\\\\n\\\\nIf you want to know more: http://en.wikipedia.org/wiki/DNA\\\\n\\\\nIn DNA strings, symbols \\\\\\\"A\\\\\\\" and \\\\\\\"T\\\\\\\" are complements of each other, as \\\\\\\"C\\\\\\\" and \\\\\\\"G\\\\\\\". \\\\nYou have function with one side of the DNA (string, except for Haskell); you need to get the other complementary side. DNA strand is never empty or there is no DNA at all (again, except for Haskell).\\\\n\\\\nMore similar exercise are found here: http://rosalind.info/problems/list-view/ (source)\\\\n\\\\nExample: (**input: output**)\\\\n```python\\\\nDNA_strand (\\\\\\\"ATTGC\\\\\\\") # return \\\\\\\"TAACG\\\\\\\"\\\\nDNA_strand (\\\\\\\"GTAT\\\\\\\") # return \\\\\\\"CATA\\\\\\\"\\\\n```\\\\n```javascript\\\\nDNAStrand (\\\\\\\"ATTGC\\\\\\\") // return \\\\\\\"TAACG\\\\\\\"\\\\nDNAStrand (\\\\\\\"GTAT\\\\\\\") // return \\\\\\\"CATA\\\\\\\" \\\\n```\\\\n```typescript\\\\ndnaStrand(\\\\\\\"ATTGC\\\\\\\") // return \\\\\\\"TAACG\\\\\\\"\\\\ndnaStrand(\\\\\\\"GTAT\\\\\\\") // return \\\\\\\"CATA\\\\\\\" \\\\n```\\\\n```csharp\\\\nMakeComplement(\\\\\\\"ATTGC\\\\\\\") =\\\\u003e \\\\\\\"TAACG\\\\\\\"\\\\nMakeComplement(\\\\\\\"GTAT\\\\\\\") =\\\\u003e \\\\\\\"CATA\\\\\\\"\\\\n```\\\\n```php\\\\nDNA_strand(\\\\\\\"ATTGC\\\\\\\") // returns \\\\\\\"TAACG\\\\\\\"\\\\nDNA_strand(\\\\\\\"GTAT\\\\\\\") // returns \\\\\\\"CATA\\\\\\\"\\\\n```\\\\n```ruby\\\\nDNA_strand (\\\\\\\"ATTGC\\\\\\\") # return \\\\\\\"TAACG\\\\\\\"\\\\nDNA_strand (\\\\\\\"GTAT\\\\\\\") # return \\\\\\\"CATA\\\\\\\"\\\\n```\\\\n```crystal\\\\ndna_strand(\\\\\\\"ATTGC\\\\\\\") # return \\\\\\\"TAACG\\\\\\\"\\\\ndna_strand(\\\\\\\"GTAT\\\\\\\") # return \\\\\\\"CATA\\\\\\\"\\\\n```\\\\n```java\\\\nDnaStrand.makeComplement(\\\\\\\"ATTGC\\\\\\\") // return \\\\\\\"TAACG\\\\\\\"\\\\nDnaStrand.makeComplement(\\\\\\\"GTAT\\\\\\\") // return \\\\\\\"CATA\\\\\\\"\\\\n```\\\\n```scala\\\\nDnaStrand.makeComplement(\\\\\\\"ATTGC\\\\\\\") // return \\\\\\\"TAACG\\\\\\\"\\\\nDnaStrand.makeComplement(\\\\\\\"GTAT\\\\\\\") // return \\\\\\\"CATA\\\\\\\"\\\\n```\\\\n```kotlin\\\\nmakeComplement(\\\\\\\"ATTGC\\\\\\\") // return \\\\\\\"TAACG\\\\\\\"\\\\nmakeComplement(\\\\\\\"GTAT\\\\\\\") // return \\\\\\\"CATA\\\\\\\"\\\\n```\\\\n```haskell\\\\ndnaStrand []        `shouldBe` []\\\\ndnaStrand [A,T,G,C] `shouldBe` [T,A,C,G]\\\\ndnaStrand [G,T,A,T] `shouldBe` [C,A,T,A]\\\\ndnaStrand [A,A,A,A] `shouldBe` [T,T,T,T]\\\\n```\\\\n```clojure\\\\n(is (= (dna-strand \\\\\\\"ATTGC\\\\\\\") \\\\\\\"TAACG\\\\\\\"))\\\\n(is (= (dna-strand \\\\\\\"GTAT\\\\\\\") \\\\\\\"CATA\\\\\\\"))\\\\n```\\\\n```c\\\\ndna_strand(\\\\\\\"ATTGC\\\\\\\") /* return \\\\\\\"TAACG\\\\\\\" */\\\\ndna_strand(\\\\\\\"GTAT\\\\\\\")  /* return \\\\\\\"CATA\\\\\\\"  */\\\\n```\\\\n```golang\\\\nDNAStrand(\\\\\\\"ATTGC\\\\\\\") // returns \\\\\\\"TAACG\\\\\\\"\\\\nDNAStrand(\\\\\\\"GTAT\\\\\\\") // returns \\\\\\\"CATA\\\\\\\"\\\\n```\\\\n```rust\\\\ndna_strand(\\\\\\\"ATTGC\\\\\\\") // returns \\\\\\\"TAACG\\\\\\\"\\\\ndna_strand(\\\\\\\"GTAT\\\\\\\")  // returns \\\\\\\"CATA\\\\\\\"\\\\n```\\\\n```julia\\\\ndnastrand(\\\\\\\"ATTGC\\\\\\\") # returns \\\\\\\"TAACG\\\\\\\"\\\\ndnastrand(\\\\\\\"GTAT\\\\\\\")  # returns \\\\\\\"CATA\\\\\\\"\\\\n```\\\\n```prolog\\\\ndna_strand(\\\\\\\"ATTGC\\\\\\\") == \\\\\\\"TAACG\\\\\\\"\\\\ndna_strand(\\\\\\\"GTAT\\\\\\\") == \\\\\\\"CATA\\\\\\\"\\\\n```\\\\n```elixir\\\\nDna.dna_strand(\\\\\\\"ATTGC\\\\\\\") == \\\\\\\"TAACG\\\\\\\"\\\\nDna.dna_strand(\\\\\\\"GTAT\\\\\\\") == \\\\\\\"CATA\\\\\\\"\\\\n```\\','7','Complementary DNA','1291'),(35,'110.257','53dbd5315a3c69eed20002dd','In this kata you will create a function that takes a list of non-negative integers and strings and returns a new list with the strings filtered out.\\\\n\\\\n### Example\\\\n\\\\n```python\\\\nfilter_list([1,2,\'a\',\'b\']) == [1,2]\\\\nfilter_list([1,\'a\',\'b\',0,15]) == [1,0,15]\\\\nfilter_list([1,2,\'aasf\',\'1\',\'123\',123]) == [1,2,123]\\\\n```\\\\n```csharp\\\\nListFilterer.GetIntegersFromList(new List\\\\u003cobject\\\\u003e(){1, 2, \\\\\\\"a\\\\\\\", \\\\\\\"b\\\\\\\"}) =\\\\u003e {1, 2}\\\\nListFilterer.GetIntegersFromList(new List\\\\u003cobject\\\\u003e(){1, 2, \\\\\\\"a\\\\\\\", \\\\\\\"b\\\\\\\", 0, 15}) =\\\\u003e {1, 2, 0, 15}\\\\nListFilterer.GetIntegersFromList(new List\\\\u003cobject\\\\u003e(){1, 2, \\\\\\\"a\\\\\\\", \\\\\\\"b\\\\\\\", \\\\\\\"aasf\\\\\\\", \\\\\\\"1\\\\\\\", \\\\\\\"123\\\\\\\", 231}) =\\\\u003e {1, 2, 231}\\\\n```\\','7','List Filtering','775'),(36,'109.119','54ba84be607a92aa900000f1','An isogram is a word that has no repeating letters, consecutive or non-consecutive. Implement a function that determines whether a string that contains only letters is an isogram. Assume the empty string is an isogram. Ignore letter case.\\\\n\\\\n```haskell\\\\nisIsogram \\\\\\\"Dermatoglyphics\\\\\\\" == true\\\\nisIsogram \\\\\\\"aba\\\\\\\" == false\\\\nisIsogram \\\\\\\"moOse\\\\\\\" == false -- ignore letter case\\\\n```\\\\n```javascript\\\\nisIsogram(\\\\\\\"Dermatoglyphics\\\\\\\") == true\\\\nisIsogram(\\\\\\\"aba\\\\\\\") == false\\\\nisIsogram(\\\\\\\"moOse\\\\\\\") == false // -- ignore letter case\\\\n```\\\\n```python\\\\nis_isogram(\\\\\\\"Dermatoglyphics\\\\\\\" ) == true\\\\nis_isogram(\\\\\\\"aba\\\\\\\" ) == false\\\\nis_isogram(\\\\\\\"moOse\\\\\\\" ) == false # -- ignore letter case\\\\n```\\\\n```ruby\\\\nis_isogram(\\\\\\\"Dermatoglyphics\\\\\\\" ) == true\\\\nis_isogram(\\\\\\\"aba\\\\\\\" ) == false\\\\nis_isogram(\\\\\\\"moOse\\\\\\\" ) == false # -- ignore letter case\\\\n```\\\\n```C\\\\nis_isogram(\\\\\\\"Dermatoglyphics\\\\\\\" ) == true;\\\\nis_isogram(\\\\\\\"aba\\\\\\\" ) == false;\\\\nis_isogram(\\\\\\\"moOse\\\\\\\" ) == false; // -- ignore letter case\\\\n```\\\\n```julia\\\\nisisogram(\\\\\\\"Dermatoglyphics\\\\\\\" ) == true\\\\nisisogram(\\\\\\\"aba\\\\\\\" ) == false\\\\nisisogram(\\\\\\\"moOse\\\\\\\" ) == false # -- ignore letter case\\\\n```\\\\n```nasm\\\\nfor the string \\\\\\\"Dermatoglyphics\\\\\\\" return 1 ; It\'s true\\\\nfor the string \\\\\\\"aba\\\\\\\" return 0 ; It\'s false\\\\nfor the string \\\\\\\"moOse\\\\\\\" return 0 ; It\'s false\\\\n```\\','7','Isograms','1388'),(37,'100.251','55f2b110f61eb01779000053','Given two integers `a` and `b`, which can be positive or negative, find the sum of all the integers between and including them and return it. If the two numbers are equal return `a` or `b`.\\\\n\\\\n**Note:** `a` and `b` are not ordered!\\\\n\\\\n## Examples\\\\n\\\\n```javascript\\\\nGetSum(1, 0) == 1   // 1 + 0 = 1\\\\nGetSum(1, 2) == 3   // 1 + 2 = 3\\\\nGetSum(0, 1) == 1   // 0 + 1 = 1\\\\nGetSum(1, 1) == 1   // 1 Since both are same\\\\nGetSum(-1, 0) == -1 // -1 + 0 = -1\\\\nGetSum(-1, 2) == 2  // -1 + 0 + 1 + 2 = 2\\\\n```\\\\n```crystal\\\\nget_sum(1, 0) == 1   # 1 + 0 = 1\\\\nget_sum(1, 2) == 3   # 1 + 2 = 3\\\\nget_sum(0, 1) == 1   # 0 + 1 = 1\\\\nget_sum(1, 1) == 1   # 1 Since both are same\\\\nget_sum(-1, 0) == -1 # -1 + 0 = -1\\\\nget_sum(-1, 2) == 2  # -1 + 0 + 1 + 2 = 2\\\\n```\\\\n```coffeescript\\\\ngetSum(1, 0) == 1   // 1 + 0 = 1\\\\ngetSum(1, 2) == 3   // 1 + 2 = 3\\\\ngetSum(0, 1) == 1   // 0 + 1 = 1\\\\ngetSum(1, 1) == 1   // 1 Since both are same\\\\ngetSum(-1, 0) == -1 // -1 + 0 = -1\\\\ngetSum(-1, 2) == 2  // -1 + 0 + 1 + 2 = 2\\\\n```\\\\n```java\\\\nGetSum(1, 0) == 1   // 1 + 0 = 1\\\\nGetSum(1, 2) == 3   // 1 + 2 = 3\\\\nGetSum(0, 1) == 1   // 0 + 1 = 1\\\\nGetSum(1, 1) == 1   // 1 Since both are same\\\\nGetSum(-1, 0) == -1 // -1 + 0 = -1\\\\nGetSum(-1, 2) == 2  // -1 + 0 + 1 + 2 = 2\\\\n```\\\\n```csharp\\\\nGetSum(1, 0) == 1   // 1 + 0 = 1\\\\nGetSum(1, 2) == 3   // 1 + 2 = 3\\\\nGetSum(0, 1) == 1   // 0 + 1 = 1\\\\nGetSum(1, 1) == 1   // 1 Since both are same\\\\nGetSum(-1, 0) == -1 // -1 + 0 = -1\\\\nGetSum(-1, 2) == 2  // -1 + 0 + 1 + 2 = 2\\\\n```\\\\n```python\\\\nget_sum(1, 0) == 1   // 1 + 0 = 1\\\\nget_sum(1, 2) == 3   // 1 + 2 = 3\\\\nget_sum(0, 1) == 1   // 0 + 1 = 1\\\\nget_sum(1, 1) == 1   // 1 Since both are same\\\\nget_sum(-1, 0) == -1 // -1 + 0 = -1\\\\nget_sum(-1, 2) == 2  // -1 + 0 + 1 + 2 = 2\\\\n```\\\\n```ruby\\\\nget_sum(1, 0) == 1   # 1 + 0 = 1\\\\nget_sum(1, 2) == 3   # 1 + 2 = 3\\\\nget_sum(0, 1) == 1   # 0 + 1 = 1\\\\nget_sum(1, 1) == 1   # 1 Since both are same\\\\nget_sum(-1, 0) == -1 # -1 + 0 = -1\\\\nget_sum(-1, 2) == 2  # -1 + 0 + 1 + 2 = 2\\\\n```\\\\n```C\\\\nget_sum(1, 0) == 1   // 1 + 0 = 1\\\\nget_sum(1, 2) == 3   // 1 + 2 = 3\\\\nget_sum(0, 1) == 1   // 0 + 1 = 1\\\\nget_sum(1, 1) == 1   // 1 Since both are same\\\\nget_sum(-1, 0) == -1 // -1 + 0 = -1\\\\nget_sum(-1, 2) == 2  // -1 + 0 + 1 + 2 = 2\\\\n```\\\\n```cpp\\\\nget_sum(1, 0) == 1   // 1 + 0 = 1\\\\nget_sum(1, 2) == 3   // 1 + 2 = 3\\\\nget_sum(0, 1) == 1   // 0 + 1 = 1\\\\nget_sum(1, 1) == 1   // 1 Since both are same\\\\nget_sum(-1, 0) == -1 // -1 + 0 = -1\\\\nget_sum(-1, 2) == 2  // -1 + 0 + 1 + 2 = 2\\\\n```\\\\n```r\\\\nget_sum(1, 0) == 1   # 1 + 0 = 1\\\\nget_sum(1, 2) == 3   # 1 + 2 = 3\\\\nget_sum(0, 1) == 1   # 0 + 1 = 1\\\\nget_sum(1, 1) == 1   # 1 Since both are same\\\\nget_sum(-1, 0) == -1 # -1 + 0 = -1\\\\nget_sum(-1, 2) == 2  # -1 + 0 + 1 + 2 = 2\\\\n```\\\\n```nasm\\\\nmov edi, 1\\\\nmov esi, 0\\\\ncall get_sum    ; EAX \\\\u003c- 1 = 1 + 0\\\\n\\\\nmov edi, 1\\\\nmov esi, 2\\\\ncall get_sum    ; EAX \\\\u003c- 3 = 1 + 2\\\\n\\\\nmov edi, 0\\\\nmov esi, 1\\\\ncall get_sum    ; EAX \\\\u003c- 1 = 0 + 1\\\\n```\\\\n```fsharp\\\\ngetSum 1 0 == 1   // 1 + 0 = 1\\\\ngetSum 1 2 == 3   // 1 + 2 = 3\\\\ngetSum 0 1 == 1   // 0 + 1 = 1\\\\ngetSum 1 1 == 1   // 1 Since both are same\\\\ngetSum -1 0 == -1 // -1 + 0 = -1\\\\ngetSum -1 2 == 2  // -1 + 0 + 1 + 2 = 2\\\\n```\\\\n```julia\\\\ngetsum(1, 0) == 1   # 1 + 0 = 1\\\\ngetsum(1, 2) == 3   # 1 + 2 = 3\\\\ngetsum(0, 1) == 1   # 0 + 1 = 1\\\\ngetsum(1, 1) == 1   # 1 Since both are same\\\\ngetsum(-1, 0) == -1 # -1 + 0 = -1\\\\ngetsum(-1, 2) == 2  # -1 + 0 + 1 + 2 = 2\\\\n```\\\\n```prolog\\\\nget_sum(1, 0, 1) % 1 + 0 = 1\\\\nget_sum(1, 2, 3) % 1 + 2 = 3\\\\nget_sum(0, 1, 3) % 0 + 1 = 1\\\\nget_sum(1, 1, 1)  % 1 Since both are same\\\\nget_sum(-1, 0, -1) % -1 + 0 = -1\\\\nget_sum(-1, 2, 2) % -1 + 0 + 1 + 2 = 2\\\\n```\\\\n```scala\\\\ngetSum(1, 0) == 1   // 1 + 0 = 1\\\\ngetSum(1, 2) == 3   // 1 + 2 = 3\\\\ngetSum(0, 1) == 1   // 0 + 1 = 1\\\\ngetSum(1, 1) == 1   // 1 Since both are same\\\\ngetSum(-1, 0) == -1 // -1 + 0 = -1\\\\ngetSum(-1, 2) == 2  // -1 + 0 + 1 + 2 = 2\\\\n```\\\\n```pascal\\\\nGetSum(1, 0) = 1   // 1 + 0 = 1\\\\nGetSum(1, 2) = 3   // 1 + 2 = 3\\\\nGetSum(0, 1) = 1   // 0 + 1 = 1\\\\nGetSum(1, 1) = 1   // 1 Since both are same\\\\nGetSum(-1, 0) = -1 // -1 + 0 = -1\\\\nGetSum(-1, 2) = 2  // -1 + 0 + 1 + 2 = 2\\\\n```\\\\n\\\\n\\\\n\\\\n\\','7','Beginner Series #3 Sum of Numbers','1217'),(38,'97.052','558fc85d8fd1938afb000014','Create a function that returns the sum of the two lowest positive numbers given an array of minimum 4 positive integers. No floats or non-positive integers will be passed.\\\\n\\\\nFor example, when an array is passed like `[19, 5, 42, 2, 77]`, the output should be `7`.\\\\n\\\\n`[10, 343445353, 3453445, 3453545353453]` should return `3453455`.\\\\n\\','7','Sum of two lowest positive integers','764'),(39,'90.638','5412509bd436bd33920011bc','Usually when you buy something, you\'re asked whether your credit card number, phone number or answer to your most secret question is still correct. However, since someone could look over your shoulder, you don\'t want that shown on your screen. Instead, we mask it.\\\\n\\\\nYour task is to write a function `maskify`, which changes all but the last four characters into `\'#\'`.\\\\n\\\\n## Examples\\\\n```javascript\\\\nmaskify(\\\\\\\"4556364607935616\\\\\\\") == \\\\\\\"############5616\\\\\\\"\\\\nmaskify(     \\\\\\\"64607935616\\\\\\\") ==      \\\\\\\"#######5616\\\\\\\"\\\\nmaskify(               \\\\\\\"1\\\\\\\") ==                \\\\\\\"1\\\\\\\"\\\\nmaskify(                \\\\\\\"\\\\\\\") ==                 \\\\\\\"\\\\\\\"\\\\n\\\\n// \\\\\\\"What was the name of your first pet?\\\\\\\"\\\\nmaskify(\\\\\\\"Skippy\\\\\\\")                                   == \\\\\\\"##ippy\\\\\\\"\\\\nmaskify(\\\\\\\"Nananananananananananananananana Batman!\\\\\\\") == \\\\\\\"####################################man!\\\\\\\"\\\\n```\\\\n\\\\n```coffeescript\\\\nmaskify(\\\\\\\"4556364607935616\\\\\\\") == \\\\\\\"############5616\\\\\\\"\\\\nmaskify(     \\\\\\\"64607935616\\\\\\\") ==      \\\\\\\"#######5616\\\\\\\"\\\\nmaskify(               \\\\\\\"1\\\\\\\") ==                \\\\\\\"1\\\\\\\"\\\\nmaskify(                \\\\\\\"\\\\\\\") ==                 \\\\\\\"\\\\\\\"\\\\n\\\\n# \\\\\\\"What was the name of your first pet?\\\\\\\"\\\\nmaskify(\\\\\\\"Skippy\\\\\\\")                                   == \\\\\\\"##ippy\\\\\\\"\\\\nmaskify(\\\\\\\"Nananananananananananananananana Batman!\\\\\\\") == \\\\\\\"####################################man!\\\\\\\"\\\\n```\\\\n\\\\n\\\\n```python\\\\nmaskify(\\\\\\\"4556364607935616\\\\\\\") == \\\\\\\"############5616\\\\\\\"\\\\nmaskify(     \\\\\\\"64607935616\\\\\\\") ==      \\\\\\\"#######5616\\\\\\\"\\\\nmaskify(               \\\\\\\"1\\\\\\\") ==                \\\\\\\"1\\\\\\\"\\\\nmaskify(                \\\\\\\"\\\\\\\") ==                 \\\\\\\"\\\\\\\"\\\\n\\\\n# \\\\\\\"What was the name of your first pet?\\\\\\\"\\\\nmaskify(\\\\\\\"Skippy\\\\\\\")                                   == \\\\\\\"##ippy\\\\\\\"\\\\nmaskify(\\\\\\\"Nananananananananananananananana Batman!\\\\\\\") == \\\\\\\"####################################man!\\\\\\\"\\\\n```\\\\n\\\\n\\\\n```haskell\\\\nmaskify \\\\\\\"4556364607935616\\\\\\\" == \\\\\\\"############5616\\\\\\\"\\\\nmaskify      \\\\\\\"64607935616\\\\\\\" ==      \\\\\\\"#######5616\\\\\\\"\\\\nmaskify                \\\\\\\"1\\\\\\\" ==                \\\\\\\"1\\\\\\\"\\\\nmaskify                 \\\\\\\"\\\\\\\" ==                 \\\\\\\"\\\\\\\"\\\\n\\\\n-- \\\\\\\"What was the name of your first pet?\\\\\\\"\\\\nmaskify \\\\\\\"Skippy\\\\\\\" == \\\\\\\"##ippy\\\\\\\"\\\\nmaskify \\\\\\\"Nananananananananananananananana Batman!\\\\\\\"\\\\n     -- \\\\\\\"####################################man!\\\\\\\"\\\\n```\\\\n\\\\n\\\\n```ruby\\\\nmaskify(\'4556364607935616\') # should return \'############5616\'\\\\nmaskify(\'64607935616\')      # should return \'#######5616\'\\\\nmaskify(\'1\')                # should return \'1\'\\\\nmaskify(\'\')                 # should return \'\'\\\\n\\\\n# \\\\\\\"What was the name of your first pet?\\\\\\\"\\\\nmaskify(\'Skippy\')                                   # should return \'##ippy\'\\\\nmaskify(\'Nananananananananananananananana Batman!\') # should return \'####################################man!\'\\\\n```\\\\n\\\\n```csharp\\\\nKata.Maskify(\\\\\\\"4556364607935616\\\\\\\"); // should return \\\\\\\"############5616\\\\\\\"\\\\nKata.Maskify(\\\\\\\"64607935616\\\\\\\");      // should return \\\\\\\"#######5616\\\\\\\"\\\\nKata.Maskify(\\\\\\\"1\\\\\\\");                // should return \\\\\\\"1\\\\\\\"\\\\nKata.Maskify(\\\\\\\"\\\\\\\");                 // should return \\\\\\\"\\\\\\\"\\\\n\\\\n// \\\\\\\"What was the name of your first pet?\\\\\\\"\\\\nKata.Maskify(\\\\\\\"Skippy\\\\\\\");                                   // should return \\\\\\\"##ippy\\\\\\\"\\\\nKata.Maskify(\\\\\\\"Nananananananananananananananana Batman!\\\\\\\"); // should return \\\\\\\"####################################man!\\\\\\\"\\\\n```\\\\n\\\\n```java\\\\nMaskify.Maskify(\\\\\\\"4556364607935616\\\\\\\"); // should return \\\\\\\"############5616\\\\\\\"\\\\nMaskify.Maskify(\\\\\\\"64607935616\\\\\\\");      // should return \\\\\\\"#######5616\\\\\\\"\\\\nMaskify.Maskify(\\\\\\\"1\\\\\\\");                // should return \\\\\\\"1\\\\\\\"\\\\nMaskify.Maskify(\\\\\\\"\\\\\\\");                 // should return \\\\\\\"\\\\\\\"\\\\n\\\\n// \\\\\\\"What was the name of your first pet?\\\\\\\"\\\\nMaskify.Maskify(\\\\\\\"Skippy\\\\\\\");                                   // should return \\\\\\\"##ippy\\\\\\\"\\\\nMaskify.Maskify(\\\\\\\"Nananananananananananananananana Batman!\\\\\\\"); // should return \\\\\\\"####################################man!\\\\\\\"\\\\n```\\\\n\\\\n```rust\\\\nmaskify(\\\\\\\"4556364607935616\\\\\\\") == String::from(\\\\\\\"############5616\\\\\\\");\\\\nmaskify(\\\\\\\"64607935616\\\\\\\") == String::from(\\\\\\\"#######5616\\\\\\\");\\\\nmaskify(\\\\\\\"1\\\\\\\") == String::from(\\\\\\\"1\\\\\\\");\\\\nmaskify(\\\\\\\"\\\\\\\") == String::from(\\\\\\\"\\\\\\\");\\\\n\\\\n\\\\n// \\\\\\\"What was the name of your first pet?\\\\\\\"\\\\nmaskify(\\\\\\\"Skippy\\\\\\\") == String::from(\\\\\\\"##ippy\\\\\\\");\\\\nmaskify(\\\\\\\"Nananananananananananananananana Batman!\\\\\\\") ==String::from(\\\\\\\"####################################man!\\\\\\\");\\\\n```\\\\n\\\\n```swift\\\\nmaskify(\\\\\\\"4556364607935616\\\\\\\") // should return \\\\\\\"############5616\\\\\\\"\\\\nmaskify(\\\\\\\"64607935616\\\\\\\")      // should return \\\\\\\"#######5616\\\\\\\"\\\\nmaskify(\\\\\\\"1\\\\\\\")                // should return \\\\\\\"1\\\\\\\"\\\\nmaskify(\\\\\\\"\\\\\\\")                 // should return \\\\\\\"\\\\\\\"\\\\n\\\\n// \\\\\\\"What was the name of your first pet?\\\\\\\"\\\\nmaskify(\\\\\\\"Skippy\\\\\\\")                                   // should return \\\\\\\"##ippy\\\\\\\"\\\\nmaskify(\\\\\\\"Nananananananananananananananana Batman!\\\\\\\") // should return \\\\\\\"####################################man!\\\\\\\"\\\\n```\\\\n\\','7','Credit Card Mask','921'),(40,'88.970','563b662a59afc2b5120000c6','In a small town the population is `p0 = 1000` at the beginning of a year. The population\\\\nregularly increases by `2 percent` per year and moreover `50` new inhabitants per year come to live in the town. \\\\nHow many years does the town need to see its population\\\\ngreater or equal to `p = 1200` inhabitants?\\\\n\\\\n```\\\\nAt the end of the first year there will be: \\\\n1000 + 1000 * 0.02 + 50 =\\\\u003e 1070 inhabitants\\\\n\\\\nAt the end of the 2nd year there will be: \\\\n1070 + 1070 * 0.02 + 50 =\\\\u003e 1141 inhabitants (** number of inhabitants is an integer **)\\\\n\\\\nAt the end of the 3rd year there will be:\\\\n1141 + 1141 * 0.02 + 50 =\\\\u003e 1213\\\\n\\\\nIt will need 3 entire years.\\\\n```\\\\nMore generally given parameters:\\\\n\\\\n`p0, percent, aug (inhabitants coming or leaving each year), p (population to surpass)`\\\\n\\\\nthe function `nb_year` should return `n` number of entire years needed to get a population greater or equal to `p`.\\\\n\\\\naug is an integer, percent a positive or null floating number, p0 and p are positive integers (\\\\u003e 0)\\\\n\\\\n```\\\\nExamples:\\\\nnb_year(1500, 5, 100, 5000) -\\\\u003e 15\\\\nnb_year(1500000, 2.5, 10000, 2000000) -\\\\u003e 10\\\\n```\\\\n\\\\n#### Note: \\\\nDon\'t forget to convert the percent parameter as a percentage in the body of your function: if the parameter percent is 2 you have to convert it to 0.02.\\\\n\\\\n\\','7','Growth of a Population','1296'),(41,'80.776','56606694ec01347ce800001b','Implement a method that accepts 3 integer values a, b, c. The method should return true if a triangle can be built with the sides of given length and false in any other case.\\\\n\\\\n(In this case, all triangles must have surface greater than 0 to be accepted).\\\\n\\','7','Is this a triangle?','616'),(42,'78.966','5656b6906de340bd1b0000ac','Take 2 strings `s1` and `s2` including only letters from `a`to `z`.\\\\nReturn a new **sorted** string, the longest possible, containing distinct letters - each taken only once - coming from s1 or s2.\\\\n\\\\n#### Examples:\\\\n```\\\\na = \\\\\\\"xyaabbbccccdefww\\\\\\\"\\\\nb = \\\\\\\"xxxxyyyyabklmopq\\\\\\\"\\\\nlongest(a, b) -\\\\u003e \\\\\\\"abcdefklmopqwxy\\\\\\\"\\\\n\\\\na = \\\\\\\"abcdefghijklmnopqrstuvwxyz\\\\\\\"\\\\nlongest(a, a) -\\\\u003e \\\\\\\"abcdefghijklmnopqrstuvwxyz\\\\\\\"\\\\n```\\\\n\\','7','Two to One','1045'),(43,'66.407','52597aa56021e91c93000cb0','Write an algorithm that takes an array and moves all of the zeros to the end, preserving the order of the other elements.\\\\n\\\\n```php\\\\nmoveZeros([false,1,0,1,2,0,1,3,\\\\\\\"a\\\\\\\"]) // returns[false,1,1,2,1,3,\\\\\\\"a\\\\\\\",0,0]\\\\n```\\\\n```javascript\\\\nmoveZeros([false,1,0,1,2,0,1,3,\\\\\\\"a\\\\\\\"]) // returns[false,1,1,2,1,3,\\\\\\\"a\\\\\\\",0,0]\\\\n```\\\\n```python\\\\nmove_zeros([1, 0, 1, 2, 0, 1, 3]) # returns [1, 1, 2, 1, 3, 0, 0]\\\\n```\\\\n```cpp\\\\nmove_zeros({1, 0, 1, 2, 0, 1, 3}) // returns {1, 1, 2, 1, 3, 0, 0}\\\\n```\\\\n```coffeescript\\\\nmoveZeros [false,1,0,1,2,0,1,3,\\\\\\\"a\\\\\\\"] # returns[false,1,1,2,1,3,\\\\\\\"a\\\\\\\",0,0]\\\\n```\\\\n```csharp\\\\nKata.MoveZeroes(new int[] {1, 2, 0, 1, 0, 1, 0, 3, 0, 1}) =\\\\u003e new int[] {1, 2, 1, 1, 3, 1, 0, 0, 0, 0}\\\\n```\\','5','Moving Zeros To The End','1074'),(44,'75.132','520b9d2ad5c005041100000f','Move the first letter of each word to the end of it, then add \\\\\\\"ay\\\\\\\" to the end of the word. Leave punctuation marks untouched.\\\\n\\\\n## Examples\\\\n\\\\n```javascript\\\\npigIt(\'Pig latin is cool\'); // igPay atinlay siay oolcay\\\\npigIt(\'Hello world !\');     // elloHay orldway !\\\\n```\\\\n```objc\\\\npigIt(@\\\\\\\"Pig latin is cool\\\\\\\"); // =\\\\u003e @\\\\\\\"igPay atinlay siay oolcay\\\\\\\"\\\\npigIt(@\\\\\\\"Hello world !\\\\\\\");     // =\\\\u003e @\\\\\\\"elloHay orldway !\\\\\\\"\\\\n```\\\\n```ruby\\\\npig_it(\'Pig latin is cool\') # igPay atinlay siay oolcay\\\\npig_it(\'Hello world !\')     # elloHay orldway !\\\\n```\\\\n```python\\\\npig_it(\'Pig latin is cool\') # igPay atinlay siay oolcay\\\\npig_it(\'Hello world !\')     # elloHay orldway !\\\\n```\\\\n```csharp\\\\nKata.PigIt(\\\\\\\"Pig latin is cool\\\\\\\"); // igPay atinlay siay oolcay\\\\nKata.PigIt(\\\\\\\"Hello world !\\\\\\\");     // elloHay orldway !\\\\n```\\\\n```C++\\\\npig_it(\\\\\\\"Pig latin is cool\\\\\\\");   // igPay atinlay siay oolcay\\\\npig_it(\\\\\\\"Hello world !\\\\\\\");       // elloHay orldway\\\\n```\\\\n```Java\\\\nPigLatin.pigIt(\'Pig latin is cool\'); // igPay atinlay siay oolcay\\\\nPigLatin.pigIt(\'Hello world !\');     // elloHay orldway !\\\\n```\\\\n```clojure\\\\n(piglatin/pig-it \\\\\\\"Pig latin is cool\\\\\\\") ; \\\\\\\"igPay atinlay siay oolcay\\\\\\\"\\\\n(piglatin/pig-it \\\\\\\"Hello world !\\\\\\\")     ; \\\\\\\"elloHay orldway !\\\\\\\"\\\\n```\\\\n\\','5','Simple Pig Latin','1153'),(45,'64.899','52685f7382004e774f0001f7','Write a function, which takes a non-negative integer (seconds) as input and returns the time in a human-readable format (`HH:MM:SS`)\\\\n\\\\n* `HH` = hours, padded to 2 digits, range: 00 - 99\\\\n* `MM` = minutes, padded to 2 digits, range: 00 - 59\\\\n* `SS` = seconds, padded to 2 digits, range: 00 - 59\\\\n\\\\nThe maximum time never exceeds 359999 (`99:59:59`)\\\\n\\\\nYou can find some examples in the test fixtures.\\','5','Human Readable Time','1025'),(46,'57.864','52774a314c2333f0a7000688','Write a function that takes a string of parentheses, and determines if the order of the parentheses is valid. The function should return `true` if the string is valid, and `false` if it\'s invalid.\\\\n\\\\n## Examples\\\\n\\\\n```\\\\n\\\\\\\"()\\\\\\\"              =\\\\u003e  true\\\\n\\\\\\\")(()))\\\\\\\"          =\\\\u003e  false\\\\n\\\\\\\"(\\\\\\\"               =\\\\u003e  false\\\\n\\\\\\\"(())((()())())\\\\\\\"  =\\\\u003e  true\\\\n```\\\\n\\\\n## Constraints\\\\n\\\\n`0 \\\\u003c= input.length \\\\u003c= 100`\\\\n\\\\n~~~if-not:javascript,go\\\\nAlong with opening (`(`) and closing (`)`) parenthesis, input may contain any valid ASCII characters.  Furthermore, the input string may be empty and/or not contain any parentheses at all.  Do **not** treat other forms of brackets as parentheses (e.g. `[]`, `{}`, `\\\\u003c\\\\u003e`).\\\\n~~~\\','5','Valid Parentheses','1455'),(47,'54.381','513e08acc600c94f01000001','The rgb function is incomplete. Complete it so that passing in RGB decimal values will result in a hexadecimal representation being returned. Valid decimal values for RGB are 0 - 255. Any values that fall out of that range must be rounded to the closest valid value.\\\\n\\\\nNote: Your answer should always be 6 characters long, the shorthand with 3 will not work here.\\\\n\\\\nThe following are examples of  expected output values:\\\\n```lua\\\\nkata.rgb(255, 255, 255) -- returns FFFFFF\\\\nkata.rgb(255, 255, 300) -- returns FFFFFF\\\\nkata.rgb(0, 0, 0) -- returns 000000\\\\nkata.rgb(148, 0, 211) -- returns 9400D3\\\\n```\\\\n```javascript\\\\nrgb(255, 255, 255) // returns FFFFFF\\\\nrgb(255, 255, 300) // returns FFFFFF\\\\nrgb(0,0,0) // returns 000000\\\\nrgb(148, 0, 211) // returns 9400D3\\\\n```\\\\n```coffeescript\\\\nrgb(255, 255, 255) # returns FFFFFF\\\\nrgb(255, 255, 300) # returns FFFFFF\\\\nrgb(0,0,0) # returns 000000\\\\nrgb(148, 0, 211) # returns 9400D3\\\\n```\\\\n```ruby\\\\nrgb(255, 255, 255) # returns FFFFFF\\\\nrgb(255, 255, 300) # returns FFFFFF\\\\nrgb(0,0,0) # returns 000000\\\\nrgb(148, 0, 211) # returns 9400D3\\\\n```\\\\n```python\\\\nrgb(255, 255, 255) # returns FFFFFF\\\\nrgb(255, 255, 300) # returns FFFFFF\\\\nrgb(0,0,0) # returns 000000\\\\nrgb(148, 0, 211) # returns 9400D3\\\\n```\\\\n```elixir\\\\nKata.rgb(255, 255, 255) # returns FFFFFF\\\\nKata.rgb(255, 255, 300) # returns FFFFFF\\\\nKata.rgb(0,0,0) # returns 000000\\\\nKata.rgb(148, 0, 211) # returns 9400D3\\\\n```\\\\n```csharp\\\\nRgb(255, 255, 255) # returns FFFFFF\\\\nRgb(255, 255, 300) # returns FFFFFF\\\\nRgb(0,0,0) # returns 000000\\\\nRgb(148, 0, 211) # returns 9400D3\\\\n```\\\\n```fsharp\\\\nrgb 255  255  255 // returns FFFFFF\\\\nrgb 255  255  300 // returns FFFFFF\\\\nrgb 0 0 0 // returns 000000\\\\nrgb 148  0  211 // returns 9400D3\\\\n```\\\\n```c\\\\nchar output[7] = {0};\\\\n\\\\nrgb(255, 255, 255, output); \\\\noutput == \\\\\\\"FFFFFF\\\\\\\";\\\\n\\\\nrgb(255, 255, 300, output); \\\\noutput == \\\\\\\"FFFFFF\\\\\\\";\\\\n\\\\nrgb(0, 0, 0, output); \\\\noutput == \\\\\\\"000000\\\\\\\";\\\\n\\\\nrgb(148, 0, 211, output);\\\\noutput == \\\\\\\"9400D3\\\\\\\";\\\\n```\\\\n```cpp\\\\nrgb(255, 255, 255) # returns FFFFFF\\\\nrgb(255, 255, 300) # returns FFFFFF\\\\nrgb(0,0,0) # returns 000000\\\\nrgb(148, 0, 211) # returns 9400D3\\\\n```\\\\n```r\\\\nrgb(255, 255, 255)\\\\n[1] \\\\\\\"FFFFFF\\\\\\\"\\\\n\\\\nrgb(255, 255, 300)\\\\n[1] \\\\\\\"FFFFFF\\\\\\\"\\\\n\\\\nrgb(0, 0, 0)\\\\n[1] \\\\\\\"000000\\\\\\\"\\\\n\\\\nrgb(148, 0, 211)\\\\n[1] \\\\\\\"9400D3\\\\\\\"\\\\n```\\\\n```dart\\\\nrgb(255, 255, 255) // returns FFFFFF\\\\nrgb(255, 255, 300) // returns FFFFFF\\\\nrgb(0, 0, 0)       // returns 000000\\\\nrgb(148, 0, 211)   // returns 9400D3\\\\n```\\\\n```nasm\\\\nmov edi, 255\\\\nmov esi, 255\\\\nmov edx, 255\\\\nmov rcx, outp\\\\ncall rgb        ; The string in outp should be \\\\\\\"FFFFFF\\\\\\\"\\\\n\\\\nmov edi, 255\\\\nmov esi, 255\\\\nmov edx, 300\\\\nmov rcx, outp\\\\ncall rgb        ; The string in outp should be \\\\\\\"FFFFFF\\\\\\\"\\\\n\\\\nmov edi, 0\\\\nmov esi, 0\\\\nmov edx, 0\\\\nmov rcx, outp\\\\ncall rgb        ; The string in outp should be \\\\\\\"000000\\\\\\\"\\\\n\\\\nmov edi, 148\\\\nmov esi,   0\\\\nmov edx, 211\\\\nmov rcx, outp\\\\ncall rgb        ; The string in outp should be \\\\\\\"9400D3\\\\\\\"\\\\n\\\\nThe function should return the address of the string\\\\n```\\\\n```julia\\\\nrgb(255, 255, 255) # returns FFFFFF\\\\nrgb(255, 255, 300) # returns FFFFFF\\\\nrgb(0, 0, 0) # returns 000000\\\\nrgb(148, 0, 211) # returns 9400D3\\\\n```\\\\n```kotlin\\\\nrgb(255, 255, 255) // returns FFFFFF\\\\nrgb(255, 255, 300) // returns FFFFFF\\\\nrgb(0, 0, 0) // returns 000000\\\\nrgb(148, 0, 211) // returns 9400D3\\\\n```\\\\n```racket\\\\n(rgb 255 255 255) ;; returns FFFFFF\\\\n(rgb 255 255 300) ;; returns FFFFFF\\\\n(rgb 0 0 0) ;; returns 000000\\\\n(rgb 148 0 211) ;; returns 9400D3\\\\n```\\\\n```scala\\\\nrgb(255, 255, 255) // FFFFFF\\\\nrgb(255, 255, 300) // FFFFFF\\\\nrgb(0, 0, 0)       // 000000\\\\nrgb(148, 0, 211)   // 9400D3\\\\n```\\\\n```php\\\\nrgb(255, 255, 255); // returns FFFFFF\\\\nrgb(255, 255, 300); // returns FFFFFF\\\\nrgb(0, 0, 0); // returns 000000\\\\nrgb(148, 0, 211); // returns 9400D3\\\\n```\\\\n```clojure\\\\n(rgb 255 255 255) ;; returns FFFFFF\\\\n(rgb 255 255 300) ;; returns FFFFFF\\\\n(rgb 0 0 0) ;; returns 000000\\\\n(rgb 148 0 211) ;; returns 9400D3\\\\n```\\','5','RGB To Hex Conversion','1114'),(48,'53.934','523a86aa4230ebb5420001e1','What is an anagram? Well, two words are anagrams of each other if they both contain the same letters. For example:\\\\n\\\\n```\\\\n\'abba\' \\\\u0026 \'baab\' == true\\\\n\\\\n\'abba\' \\\\u0026 \'bbaa\' == true\\\\n\\\\n\'abba\' \\\\u0026 \'abbba\' == false\\\\n\\\\n\'abba\' \\\\u0026 \'abca\' == false\\\\n```\\\\n\\\\nWrite a function that will find all the anagrams of a word from a list. You will be given two inputs a word and an array with words. You should return an array of all the anagrams or an empty array if there are none. For example:\\\\n\\\\n```javascript\\\\nanagrams(\'abba\', [\'aabb\', \'abcd\', \'bbaa\', \'dada\']) =\\\\u003e [\'aabb\', \'bbaa\']\\\\n\\\\nanagrams(\'racer\', [\'crazer\', \'carer\', \'racar\', \'caers\', \'racer\']) =\\\\u003e [\'carer\', \'racer\']\\\\n\\\\nanagrams(\'laser\', [\'lazing\', \'lazy\',  \'lacer\']) =\\\\u003e []\\\\n```\\\\n\\\\n**Note for Go**\\\\\\\\\\\\nFor Go: Empty string slice is expected when there are no anagrams found.\\\\n\\\\n\\','5','Where my anagrams at?','1015'),(49,'48.869','550f22f4d758534c1100025a','#### Once upon a time, on a way through the old wild *mountainous* west,…\\\\n\\\\n… a man was given directions to go from one point to another. The directions were \\\\\\\"NORTH\\\\\\\", \\\\\\\"SOUTH\\\\\\\", \\\\\\\"WEST\\\\\\\", \\\\\\\"EAST\\\\\\\". Clearly \\\\\\\"NORTH\\\\\\\" and \\\\\\\"SOUTH\\\\\\\" are opposite, \\\\\\\"WEST\\\\\\\" and \\\\\\\"EAST\\\\\\\" too. \\\\n\\\\nGoing to one direction and coming back the opposite direction *right away* is a needless effort. Since this is the wild west, with dreadfull weather and not much water, it\'s important to save yourself some energy, otherwise you might die of thirst!\\\\n\\\\n#### How I crossed a *mountainous* desert the smart way.\\\\n\\\\nThe directions given to the man are, for example, the following (depending on the language):\\\\n\\\\n```\\\\n[\\\\\\\"NORTH\\\\\\\", \\\\\\\"SOUTH\\\\\\\", \\\\\\\"SOUTH\\\\\\\", \\\\\\\"EAST\\\\\\\", \\\\\\\"WEST\\\\\\\", \\\\\\\"NORTH\\\\\\\", \\\\\\\"WEST\\\\\\\"].\\\\nor\\\\n{ \\\\\\\"NORTH\\\\\\\", \\\\\\\"SOUTH\\\\\\\", \\\\\\\"SOUTH\\\\\\\", \\\\\\\"EAST\\\\\\\", \\\\\\\"WEST\\\\\\\", \\\\\\\"NORTH\\\\\\\", \\\\\\\"WEST\\\\\\\" };\\\\nor\\\\n[North, South, South, East, West, North, West]\\\\n```\\\\nYou can immediatly see that going \\\\\\\"NORTH\\\\\\\" and *immediately* \\\\\\\"SOUTH\\\\\\\" is not reasonable, better stay to the same place!\\\\nSo the task is to give to the man a simplified version of the plan. A better plan in this case is simply:\\\\n\\\\n```\\\\n[\\\\\\\"WEST\\\\\\\"]\\\\nor\\\\n{ \\\\\\\"WEST\\\\\\\" }\\\\nor\\\\n[West]\\\\n```\\\\n\\\\n#### Other examples:\\\\n\\\\nIn `[\\\\\\\"NORTH\\\\\\\", \\\\\\\"SOUTH\\\\\\\", \\\\\\\"EAST\\\\\\\", \\\\\\\"WEST\\\\\\\"]`, the direction `\\\\\\\"NORTH\\\\\\\" + \\\\\\\"SOUTH\\\\\\\"` is going north and coming back *right away*. \\\\n\\\\nThe path becomes `[\\\\\\\"EAST\\\\\\\", \\\\\\\"WEST\\\\\\\"]`, now `\\\\\\\"EAST\\\\\\\"` and `\\\\\\\"WEST\\\\\\\"` annihilate each other, therefore, the final result is `[]` (nil in Clojure).\\\\n\\\\nIn [\\\\\\\"NORTH\\\\\\\", \\\\\\\"EAST\\\\\\\", \\\\\\\"WEST\\\\\\\", \\\\\\\"SOUTH\\\\\\\", \\\\\\\"WEST\\\\\\\", \\\\\\\"WEST\\\\\\\"], \\\\\\\"NORTH\\\\\\\" and \\\\\\\"SOUTH\\\\\\\" are *not* directly opposite but they become directly opposite after the reduction of \\\\\\\"EAST\\\\\\\" and \\\\\\\"WEST\\\\\\\" so the whole path is reducible to [\\\\\\\"WEST\\\\\\\", \\\\\\\"WEST\\\\\\\"].\\\\n\\\\n#### Task\\\\n\\\\nWrite a function `dirReduc` which will take an array of strings and returns an array of strings with the needless directions removed (W\\\\u003c-\\\\u003eE or S\\\\u003c-\\\\u003eN *side by side*).\\\\n\\\\n- The Haskell version takes a list of directions with `data Direction = North | East | West | South`. \\\\n- The Clojure version returns nil when the path is reduced to nothing. \\\\n- The Rust version takes a slice of `enum Direction {North, East, West, South}`.\\\\n\\\\n#### See more examples in \\\\\\\"Sample Tests:\\\\\\\"\\\\n\\\\n#### Notes\\\\n\\\\n- Not all paths can be made simpler. \\\\nThe path [\\\\\\\"NORTH\\\\\\\", \\\\\\\"WEST\\\\\\\", \\\\\\\"SOUTH\\\\\\\", \\\\\\\"EAST\\\\\\\"] is not reducible. \\\\\\\"NORTH\\\\\\\" and \\\\\\\"WEST\\\\\\\", \\\\\\\"WEST\\\\\\\" and \\\\\\\"SOUTH\\\\\\\", \\\\\\\"SOUTH\\\\\\\" and \\\\\\\"EAST\\\\\\\" are not *directly* opposite of each other and can\'t become such. Hence the result path is itself : [\\\\\\\"NORTH\\\\\\\", \\\\\\\"WEST\\\\\\\", \\\\\\\"SOUTH\\\\\\\", \\\\\\\"EAST\\\\\\\"].\\\\n- if you want to translate, please ask before translating.\\\\n\\','5','Directions Reduction','3130'),(50,'42.169','530e15517bc88ac656000716','ROT13 is a simple letter substitution cipher that replaces a letter with the letter 13 letters after it in the alphabet. ROT13 is an example of the Caesar cipher.\\\\n\\\\nCreate a function that takes a string and returns the string ciphered with Rot13. \\\\nIf there are numbers or special characters included in the string, they should be returned as they are. Only letters from the latin/english alphabet should be shifted, like in the original Rot13 \\\\\\\"implementation\\\\\\\".\\\\n\\\\n```if:python\\\\nPlease note that using `encode` is considered cheating.\\\\n```\\\\n\\\\n```if:r\\\\n**Note:** As R is a natively vectorized language, you should write `rot13()` such that the argument `x` may be a character vector of any length. The return value should always be a character vector of the same length as `x`.\\\\n```\\','5','Rot13','1116'),(51,'40.581','54521e9ec8e60bc4de000d6c','The maximum sum subarray problem consists in finding the maximum sum of a contiguous subsequence in an array or list of integers:\\\\n\\\\n```haskell\\\\nmaxSequence [-2, 1, -3, 4, -1, 2, 1, -5, 4]\\\\n-- should be 6: [4, -1, 2, 1]\\\\n```\\\\n```javascript\\\\nmaxSequence([-2, 1, -3, 4, -1, 2, 1, -5, 4])\\\\n// should be 6: [4, -1, 2, 1]\\\\n```\\\\n```python\\\\nmax_sequence([-2, 1, -3, 4, -1, 2, 1, -5, 4])\\\\n# should be 6: [4, -1, 2, 1]\\\\n```\\\\n```clojure\\\\n(max-sequence [-2, 1, -3, 4, -1, 2, 1, -5, 4])\\\\n;; should be 6: [4, -1, 2, 1]\\\\n```\\\\n```java\\\\nMax.sequence(new int[]{-2, 1, -3, 4, -1, 2, 1, -5, 4});\\\\n// should be 6: {4, -1, 2, 1}\\\\n```\\\\n```kotlin\\\\nmaxSequence(listOf(-2, 1, -3, 4, -1, 2, 1, -5, 4));\\\\n// should be 6: listOf(4, -1, 2, 1)\\\\n```\\\\n```c\\\\nmaxSequence({-2, 1, -3, 4, -1, 2, 1, -5, 4}, 9)\\\\n// should return 6, from sub-array: {4, -1, 2, 1}\\\\n```\\\\n```cpp\\\\nmaxSequence({-2, 1, -3, 4, -1, 2, 1, -5, 4});\\\\n//should be 6: {4, -1, 2, 1}\\\\n```\\\\n\\\\nEasy case is when the list is made up of only positive numbers and the maximum sum is the sum of the whole array. If the list is made up of only negative numbers, return 0 instead.\\\\n\\\\nEmpty list is considered to have zero greatest sum. Note that the empty list or array is also a valid sublist/subarray.\\\\n\\','5','Maximum subarray sum','2141'),(52,'40.395','525f3eda17c7cd9f9e000b39','This time we want to write calculations using functions and get the results. Let\'s have a look at some examples:\\\\n\\\\n```javascript\\\\nseven(times(five())); // must return 35\\\\nfour(plus(nine())); // must return 13\\\\neight(minus(three())); // must return 5\\\\nsix(dividedBy(two())); // must return 3\\\\n```\\\\n```ruby\\\\nseven(times(five)) # must return 35\\\\nfour(plus(nine)) # must return 13\\\\neight(minus(three)) # must return 5\\\\nsix(divided_by(two)) # must return 3\\\\n```\\\\n```python\\\\nseven(times(five())) # must return 35\\\\nfour(plus(nine())) # must return 13\\\\neight(minus(three())) # must return 5\\\\nsix(divided_by(two())) # must return 3\\\\n```\\\\n\\\\nRequirements:\\\\n\\\\n* There must be a function for each number from 0 (\\\\\\\"zero\\\\\\\") to 9 (\\\\\\\"nine\\\\\\\")\\\\n* There must be a function for each of the following mathematical operations: plus, minus, times, dividedBy (`divided_by` in Ruby and Python)\\\\n* Each calculation consist of exactly one operation and two numbers\\\\n* The most outer function represents the left operand, the most inner function represents the right operand\\\\n* Division should be **integer division**. For example, this should return `2`, not `2.666666...`:\\\\n\\\\n```javascript\\\\neight(dividedBy(three()));\\\\n```\\\\n```ruby\\\\neight(divided_by(three))\\\\n```\\\\n```python\\\\neight(divided_by(three()))\\\\n```\\','5','Calculating with Functions','3383'),(53,'34.817','5541f58a944b85ce6d00006a','The Fibonacci numbers are the numbers in the following integer sequence (Fn):\\\\n\\\\u003e0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, ...\\\\n\\\\nsuch as \\\\n\\\\u003eF(n) = F(n-1) + F(n-2) with F(0) = 0 and F(1) = 1.\\\\n\\\\nGiven a number, say prod (for product), we search two Fibonacci numbers F(n) and F(n+1) verifying \\\\n\\\\u003eF(n) * F(n+1) = prod.\\\\n\\\\nYour function productFib takes an integer (prod) and returns\\\\nan array: \\\\n```\\\\n[F(n), F(n+1), true] or {F(n), F(n+1), 1} or (F(n), F(n+1), True)\\\\n```\\\\ndepending on the language if F(n) * F(n+1) = prod.\\\\n\\\\nIf you don\'t find two consecutive F(n) verifying `F(n) * F(n+1) = prod`you will return\\\\n```\\\\n[F(n), F(n+1), false] or {F(n), F(n+1), 0} or (F(n), F(n+1), False)\\\\n```\\\\nF(n) being the smallest one such as `F(n) * F(n+1) \\\\u003e prod`.\\\\n\\\\n\\\\n#### Some Examples of Return:\\\\n(depend on the language)\\\\n\\\\n```\\\\nproductFib(714) # should return (21, 34, true), \\\\n                # since F(8) = 21, F(9) = 34 and 714 = 21 * 34\\\\n\\\\nproductFib(800) # should return (34, 55, false), \\\\n                # since F(8) = 21, F(9) = 34, F(10) = 55 and 21 * 34 \\\\u003c 800 \\\\u003c 34 * 55\\\\n-----\\\\nproductFib(714) # should return [21, 34, true], \\\\nproductFib(800) # should return [34, 55, false], \\\\n-----\\\\nproductFib(714) # should return {21, 34, 1}, \\\\nproductFib(800) # should return {34, 55, 0},        \\\\n-----\\\\nproductFib(714) # should return {21, 34, true}, \\\\nproductFib(800) # should return {34, 55, false}, \\\\n```\\\\n\\\\n#### Note:\\\\n\\\\n- You can see examples for your language in \\\\\\\"Sample Tests\\\\\\\".\\\\n\\\\n\\','5','Product of consecutive Fib numbers','1462'),(54,'33.254','52449b062fb80683ec000024','The marketing team is spending way too much time typing in hashtags.   \\\\nLet\'s help them with our own Hashtag Generator!\\\\n\\\\nHere\'s the deal:\\\\n\\\\n- It must start with a hashtag (`#`).\\\\n- All words must have their first letter capitalized.\\\\n- If the final result is longer than 140 chars it must return `false`.\\\\n- If the input or the result is an empty string it must return `false`.\\\\n\\\\n\\\\n## Examples\\\\n\\\\n```\\\\n\\\\\\\" Hello there thanks for trying my Kata\\\\\\\"  =\\\\u003e  \\\\\\\"#HelloThereThanksForTryingMyKata\\\\\\\"\\\\n\\\\\\\"    Hello     World   \\\\\\\"                  =\\\\u003e  \\\\\\\"#HelloWorld\\\\\\\"\\\\n\\\\\\\"\\\\\\\"                                        =\\\\u003e  false\\\\n```\\','5','The Hashtag Generator','419');
/*!40000 ALTER TABLE `kata_entity` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `kata_language_entity`
--

DROP TABLE IF EXISTS `kata_language_entity`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `kata_language_entity` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `completions` text NOT NULL,
  `language` text NOT NULL,
  `testCases` text NOT NULL,
  `kataEntityId` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FK_5e5ab05e3dc27b548c539686e70` (`kataEntityId`),
  CONSTRAINT `FK_5e5ab05e3dc27b548c539686e70` FOREIGN KEY (`kataEntityId`) REFERENCES `kata_entity` (`id`) ON DELETE CASCADE ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=61 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `kata_language_entity`
--

LOCK TABLES `kata_language_entity` WRITE;
/*!40000 ALTER TABLE `kata_language_entity` DISABLE KEYS */;
INSERT INTO `kata_language_entity` VALUES (8,'32.966','javascript','describe(&quot;Example tests&quot;, function(){\n  Test.assertEquals(duplicateCount(&quot;&quot;), 0);\n  Test.assertEquals(duplicateCount(&quot;abcde&quot;), 0);\n  Test.assertEquals(duplicateCount(&quot;aabbcde&quot;), 2);\n  Test.assertEquals(duplicateCount(&quot;aabBcde&quot;), 2, &quot;should ignore case&quot;);\n  Test.assertEquals(duplicateCount(&quot;Indivisibility&quot;), 1)\n  Test.assertEquals(duplicateCount(&quot;Indivisibilities&quot;), 2, &quot;characters may not be adjacent&quot;)\n})\n\n\ndescribe(&quot;More tests&quot;, function(){\n  let lowers = &quot;abcdefghijklmnopqrstuvwxyz&quot;, uppers = lowers.toUpperCase();\n  Test.assertEquals(duplicateCount(lowers), 0)\n  Test.assertEquals(duplicateCount(lowers + &quot;baaAAB&quot;), 2, &quot;characters may not be adjacent&quot;)\n\n  Test.assertEquals(duplicateCount(lowers+lowers), 26)\n  Test.assertEquals(duplicateCount(lowers+uppers), 26, &quot;should ignore case&quot;)\n\n  let rnd = function(x){ return ~~(Math.random()*x) };\n\n  console.log(&quot;Random tests&quot;);\n  for( let t=0, times=5+rnd(4); t&lt;times; t++ ){\n    let len = 3+rnd(5), i=len+1, str = lowers.slice(0,len*2);\n    if( rnd(100)&lt;70 ){\n      while( i-- ) str += ([lowers,uppers][rnd(2)]).slice(0,i);\n    }else{\n      str += lowers.slice(-len);\n      len = 0;\n    }\n    console.log(&quot;&gt; &quot;+str+&quot; ?&quot;)\n    Test.assertEquals(duplicateCount(str),len)\n  }\n})',1),(9,'55.356','javascript','const { assert } = require(&quot;chai&quot;)\n\nfunction test(n, expected) {\n  let actual = solution(n)\n  it(`Expected ${expected}, got ${actual}`, () =&gt; {  \n  assert.strictEqual(actual, expected)\n    })\n}\n\ndescribe(&quot;basic tests&quot;, function(){\n  test(10,23)\n  test(20,78)\n  test(200,9168)\n})\n\ndescribe(&quot;smallest cases&quot;, function() {\n  test(-1,0)\n  test(0,0)\n  test(1,0)\n  test(2,0)\n  test(3,0)\n  test(4,3)\n  test(5,3)\n  test(6,8)\n})\n\ndescribe(&quot;random cases&quot;, function() {\n  \n  function randint(min, max){\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n  \n  function _solution(number){\n    let sum = 0;\n    \n    for(let i = 1; i&lt; number; i++){\n      if(i % 3 == 0 || i % 5 == 0){\n        sum += i\n      }\n    }\n    return sum;\n  }\n  \n  for(let i = 0; i &lt; 100; i++) {\n    let rand = randint(0, 10**randint(1, 5))\n    test(rand, _solution(rand));\n  }\n})',2),(10,'46.357','javascript','function doTest(a, n) {\n  console.log(&quot;A = &quot;, a);\n  console.log(&quot;n = &quot;, n);\n  Test.assertEquals(findOdd(a), n);\n}\ndescribe(&#39;Example tests&#39;, function() {\n  doTest([20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5], 5);\n  doTest([1,1,2,-2,5,2,4,4,-1,-2,5], -1);\n  doTest([20,1,1,2,2,3,3,5,5,4,20,4,5], 5);\n  doTest([10], 10);\n  doTest([1,1,1,1,1,1,10,1,1,1,1], 10);\n  doTest([5,4,3,2,1,5,4,3,2,10,10], 1);\n});\ndescribe(&#39;Random tests&#39;, function() {\n  var i, sz, a, j, n;\n  for(i = 0; i &lt; 40; ++i) {\n    sz = Math.round(Math.random()*1000+50);\n    if (!sz%2) {\n      ++sz;\n    }\n    a = [];\n    for(j = 0; j &lt; sz - 1; j+=2) {\n      n = Math.round(Math.random()*1000);\n      a.push(n);\n      a.push(n);\n    }\n    n = Math.round(Math.random()*1000);\n    a.push(n);\n    Test.assertEquals(findOdd(a), n);\n  }\n});',3),(12,'44.079','javascript','describe(&#39;Basic tests&#39;, function() {\n  it(&#39;Should pass basic tests&#39;, function() {\n    Test.assertEquals( digital_root(16), 7 )\n    Test.assertEquals( digital_root(195), 6 )\n    Test.assertEquals( digital_root(992), 2 )\n    Test.assertEquals( digital_root(999999999999), 9 )\n    Test.assertEquals( digital_root(167346), 9 )\n    Test.assertEquals( digital_root(10), 1 )\n    Test.assertEquals( digital_root(0), 0 )\n  })\n})\n\ndescribe(&#39;Random tests&#39;, function() {\n  it(&#39;Should pass random tests&#39;, function() {\n  \n    function digital_root_sol(n) {\n      return n&gt;0 ? 1 + ((parseInt(n) - 1) % 9) : 0\n    }\n    \n    for (let i = 0; i &lt; 100; i++) {\n      let n = Math.floor(Math.random() * 1000000);\n      Test.assertEquals( digital_root(n), digital_root_sol(n) )\n    }\n    \n  })\n})',5),(13,'44.478','javascript','const chai = require(&quot;chai&quot;);\nconst assert = chai.assert;\n\ndescribe(&quot;Spinning words&quot;,()=&gt;{\n  it(&quot;Fixed tests&quot;,()=&gt;{ \n    assert.strictEqual(spinWords(&quot;Welcome&quot;), &quot;emocleW&quot;);\n    assert.strictEqual(spinWords(&quot;Hey fellow warriors&quot;), &quot;Hey wollef sroirraw&quot;);\n    assert.strictEqual(spinWords(&quot;This is a test&quot;), &quot;This is a test&quot;);\n    assert.strictEqual(spinWords(&quot;This is another test&quot;), &quot;This is rehtona test&quot;);\n    assert.strictEqual(spinWords(&quot;This sentence is a sentence&quot;), &quot;This ecnetnes is a ecnetnes&quot;);\n    assert.strictEqual(spinWords(&quot;You are almost to the last test&quot;), &quot;You are tsomla to the last test&quot;);\n    assert.strictEqual(spinWords(&quot;Just kidding there is still one more&quot;), &quot;Just gniddik ereht is llits one more&quot;);\n    assert.strictEqual(spinWords(&quot;Seriously this is the last one&quot;), &quot;ylsuoireS this is the last one&quot;);\n  });\n  \n  it(&quot;Random tests&quot;,()=&gt;{\n    const refSpinWords = s =&gt; s.split(&quot; &quot;).map( s =&gt; s.length&gt;=5 ? s.split(&quot;&quot;).reverse().join(&quot;&quot;) : s ).join(&quot; &quot;) ;\n    const rnd = n =&gt; Math.floor(Math.random()*n) ;\n    const abc = &quot;abcdefghijklmnopqrstuvwxyz&quot;;\n    const rndWord = () =&gt; Array.from( { length: rnd(12) + 1 }, () =&gt; abc[rnd(abc.length)] ).join(&quot;&quot;) ;\n    const rndSentence = i =&gt; Array.from( { length: rnd(i) }, rndWord ).join(&quot; &quot;) ;\n    for ( let i=1; i&lt;=50; i++ ) {\n      const s = rndSentence(i);\n      assert.strictEqual( spinWords(s), refSpinWords(s) );\n    }\n  });\n});',6),(14,'56.395','javascript','describe(&#39;static tests&#39;, function() {\n  it(&#39;should return correct text&#39;, function() {\n    Test.assertEquals(likes([]), &#39;no one likes this&#39;);\n    Test.assertEquals(likes([&#39;Peter&#39;]), &#39;Peter likes this&#39;);\n    Test.assertEquals(likes([&#39;Jacob&#39;, &#39;Alex&#39;]), &#39;Jacob and Alex like this&#39;);\n    Test.assertEquals(likes([&#39;Max&#39;, &#39;John&#39;, &#39;Mark&#39;]), &#39;Max, John and Mark like this&#39;);\n    Test.assertEquals(likes([&#39;Alex&#39;, &#39;Jacob&#39;, &#39;Mark&#39;, &#39;Max&#39;]), &#39;Alex, Jacob and 2 others like this&#39;);\n  });\n});\n\ndescribe(&#39;random tests&#39;, function() {\n  var names = [], sample;\n  while (names.length &lt; 100) names.push(Test.randomToken());\n\n  it(&#39;should return correct text for 1 name&#39;, function() {\n    sample = Test.randomize(names).slice(0, 1);\n    Test.assertEquals(likes(sample.slice()), sample[0] + &#39; likes this&#39;);\n  });\n  \n  it(&#39;should return correct text for 2 names&#39;, function() {\n    sample = Test.randomize(names).slice(0, 2);\n    Test.assertEquals(likes(sample.slice()), sample[0] + &#39; and &#39; + sample[1] + &#39; like this&#39;);\n  });\n  \n  it(&#39;should return correct text for 3 names&#39;, function() {\n    sample = Test.randomize(names).slice(0, 3);\n    Test.assertEquals(likes(sample.slice()), sample[0] + &#39;, &#39; + sample[1] + &#39; and &#39; + sample[2] + &#39; like this&#39;);\n  });\n  \n  it(&#39;should return correct text for 4 or more names&#39;, function() {\n    // 4 names\n    sample = Test.randomize(names).slice(0, 4);\n    Test.assertEquals(likes(sample.slice()), sample[0] + &#39;, &#39; + sample[1] + &#39; and 2 others like this&#39;);\n    \n    // random number of names\n    sample = Test.randomize(names).slice(0, Math.max(5, Math.min(99, Test.randomNumber())));\n    Test.assertEquals(likes(sample.slice()), sample[0] + &#39;, &#39; + sample[1] + &#39; and &#39; + (sample.length - 2) + &#39; others like this&#39;);\n    \n    // 100 names\n    sample = Test.randomize(names);\n    Test.assertEquals(likes(sample.slice()), sample[0] + &#39;, &#39; + sample[1] + &#39; and 98 others like this&#39;);\n  });\n});',7),(15,'33.370','javascript','describe(&#39;Initial Tests&#39;, function () {\n  Test.assertEquals(persistence(39),3);\n  Test.assertEquals(persistence(4),0);\n  Test.assertEquals(persistence(25),2);\n  Test.assertEquals(persistence(999),4);\n});\n\ndescribe(&#39;Random tests&#39;, function () {\n    function sol(num) {\n        var c = num &gt; 9 ? 1 : 0;\n       while ((num = (num + &#39;&#39;).split(&#39;&#39;).reduce((mul, cv) =&gt; mul * +cv, 1)) &gt; 9)\n            ++c;\n        return c;\n    }\n    var rand = function (min, max) { return Math.floor(Math.random() * (max - min + 1) + min) }\n    var times = 100;\n    while (--times &gt;= 0) {\n        var n = rand(1, 10000000);\n        Test.assertEquals(persistence(n), sol(n));\n    }\n});\n',8),(16,'53.139','javascript','describe(&#39;Basic tests&#39;, () =&gt; {\n  Test.assertEquals(createPhoneNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]), &quot;(123) 456-7890&quot;);\n  Test.assertEquals(createPhoneNumber([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), &quot;(111) 111-1111&quot;);\n  Test.assertEquals(createPhoneNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]), &quot;(123) 456-7890&quot;);\n});\n\ndescribe(&quot;Random tests&quot;, () =&gt; {\n  const sol = a =&gt; `(${a.slice(0, 3).join(&#39;&#39;)}) ${a.slice(3, 6).join(&#39;&#39;)}-${a.slice(6).join(&#39;&#39;)}`;\n  for (let i = 0; i &lt; 100; i++) {\n    const a = Array.from({ length: 10 }, _ =&gt; Math.floor(Math.random() * 10)),\n          exp = sol(a);\n    Test.assertEquals(createPhoneNumber(a), exp);\n  }\n});',9),(17,'45.935','javascript','try {\n  array_diff([1], [1]);\n} catch(error) {\n  array_diff = arrayDiff;\n}\n\n\ndescribe(&quot;Basic tests&quot;, function() {\n  it(&quot;Should pass Basic tests&quot;, function() {\n    Test.assertDeepEquals(array_diff([1,2], [1]), [2], &quot;a was [1,2], b was [1]&quot;);\n    Test.assertDeepEquals(array_diff([1,2,2], [1]), [2,2], &quot;a was [1,2,2], b was [1]&quot;);\n    Test.assertDeepEquals(array_diff([1,2,2], [2]), [1], &quot;a was [1,2,2], b was [2]&quot;);\n    Test.assertDeepEquals(array_diff([1,2,2], []), [1,2,2], &quot;a was [1,2,2], b was []&quot;);\n    Test.assertDeepEquals(array_diff([], [1,2]), [], &quot;a was [], b was [1,2]&quot;);\n    Test.assertDeepEquals(arrayDiff([1,2,3], [1,2]), [3], &quot;a was [1,2,3], b was [1,2]&quot;)\n  });\n});  \n\ndescribe(&quot;Random tests&quot;, function() {\n  const array_diff_sol = (a, b) =&gt; a.filter(e =&gt; !b.includes(e));\n  const generateRandomInt = (min, max) =&gt; Math.floor(Math.random() * (max - min + 1) + min);\n  let a, b, expected, aLength, bLength;\n  for (let i = 0; i &lt; 40; i++) {\n    a = [];\n    b = [];\n    aLength = generateRandomInt(0,20);\n    bLength = generateRandomInt(0,aLength);\n    for (let j = 0; j &lt; aLength; j++)\n      a.push(generateRandomInt(0,40) - 20);\n    b = Test.randomize(a).slice(0, generateRandomInt(0, aLength));\n    expected = array_diff_sol(a,b);\n    it(&quot;Testing for arrayDiff([&quot; + a + &quot;],[&quot; + b + &quot;])&quot;, function() {\n      Test.assertDeepEquals(array_diff(a,b), expected, &quot;Should work for random arrays too&quot;);\n    });  \n  }\n});  ',10),(18,'32.374','javascript','const { assert } = require(&quot;chai&quot;)\n\ndescribe(&quot;Basic tests&quot;, () =&gt; {\n  it(&quot;Testing for fixed tests&quot;, () =&gt; {\n    assert.strictEqual(countBits(0), 0);\n    assert.strictEqual(countBits(4), 1);\n    assert.strictEqual(countBits(7), 3);\n    assert.strictEqual(countBits(9), 2);\n    assert.strictEqual(countBits(10), 2);\n    assert.strictEqual(countBits(26), 3);\n    assert.strictEqual(countBits(77231418), 14);\n    assert.strictEqual(countBits(12525589), 11);\n    assert.strictEqual(countBits(3811), 8);\n    assert.strictEqual(countBits(392902058), 17);\n    assert.strictEqual(countBits(1044), 3);\n    assert.strictEqual(countBits(10030245), 10);\n    assert.strictEqual(countBits(183337941), 16);\n    assert.strictEqual(countBits(20478766), 14);\n    assert.strictEqual(countBits(103021), 9);\n    assert.strictEqual(countBits(287), 6);\n    assert.strictEqual(countBits(115370965), 15);\n    assert.strictEqual(countBits(31), 5);\n    assert.strictEqual(countBits(417862), 7);\n    assert.strictEqual(countBits(626031), 12);\n    assert.strictEqual(countBits(89), 4);\n    assert.strictEqual(countBits(674259), 10);\n    })\n  })\n\ndescribe(&quot;Random tests&quot;, () =&gt; {  \n    \n  function randint(min, max){\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n  \n  for(let i = 0; i &lt; 100; i++){\n    let num = randint(0, 10**randint(1, 10))\n    let expected = [...num.toString(2)].reduce((a, b) =&gt; a + +b, 0)\n    it(`countBits(${num}) should equal ${expected}`, () =&gt; {\n      assert.strictEqual(countBits(num), expected);\n    });\n  }\n})',11),(19,'37.002','javascript','describe(&quot;Tests&quot;,()=&gt;{\n  it(&quot;Simple tests&quot;, () =&gt; {\n    Test.assertEquals(findOutlier([0, 1, 2]), 1)\n    Test.assertEquals(findOutlier([1, 2, 3]), 2)\n    Test.assertEquals(findOutlier([2,6,8,10,3]), 3)\n    Test.assertEquals(findOutlier([0,0,3,0,0]), 3)\n    Test.assertEquals(findOutlier([1,1,0,1,1]), 0)\n  });\n\n  it(&quot;More complex tests&quot;,()=&gt;{\n    const ints1 = [2,6,8,10,3];\n    const ints2 = [2,6,8,200,700,1,84,10,4];\n    const ints3 = [17,6,8,10,6,12,24,36];\n    const ints4 = [2,1,7,17,19,211,7];\n    const ints5 = [1,1,1,1,1,44,7,7,7,7,7,7,7,7];\n    const ints6 = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,35,5,5,5,5,5,5,5,5,5,5,7,7,7,7,1000];\n    const ints7 = [2,-6,8,-10,-3];\n    const ints8 = [2,6,8,2,-66,34,-35,66,700,1002,-84,10,4];\n    const ints9 = [-100000000007,-18,6,-8,-10,6,12,-24,36];\n    const ints10 = [-20,1,7,17,19,211,7];\n    const ints11= [1,1,-1,1,1,-44,7,7,7,7,7,7,7,7];\n    const ints12 = [1,0,0];\n    const ints13 = [3,7,-99,81,90211,0,7];\n\n    const inputs = [ints1, ints2, ints3, ints4, ints5, ints6, ints7, ints8, ints9, ints10, ints11, ints12, ints13]\n    const expected = [3, 1, 17, 2, 44, 1000, -3, -35, -100000000007, -20, -44, 1, 0]\n\n    for (let i = 0;i &lt; inputs.length; i++){\n      Test.assertEquals(findOutlier(inputs[i]), expected[i])\n    }\n  });\n});\n\ndescribe(&quot;Random tests&quot;,()=&gt;{\n  const randint=(a,b)=&gt;Math.floor(Math.random()*(b-a+1)+a)\n\n  for (let i=0;i&lt;30;i++){\n    const test_integers = [], len=randint(3,50), base = 100000000, k=randint(0,1);\n    for (let q=0;q&lt;len;q++) test_integers.push(randint(-base,+base)*2+k);\n    const pos=randint(0,len-1), expected = ++test_integers[pos];\n    it(`Testing for ${test_integers}`, () =&gt; {\n      Test.assertEquals(findOutlier(test_integers), expected)\n    });\n  }\n})',12),(20,'31.331','javascript','describe( &quot;Basic tests:&quot;, function(){\n  Test.assertEquals(duplicateEncode(&quot;din&quot;),&quot;(((&quot;);\n  Test.assertEquals(duplicateEncode(&quot;recede&quot;),&quot;()()()&quot;);\n  Test.assertEquals(duplicateEncode(&quot;Success&quot;),&quot;)())())&quot;,&quot;should ignore case&quot;);\n  Test.assertEquals(duplicateEncode(&quot;CodeWarrior&quot;),&quot;()(((())())&quot;);\n  Test.assertEquals(duplicateEncode(&quot;Supralapsarian&quot;),&quot;)()))()))))()(&quot;,&quot;should ignore case&quot;);\n  Test.assertEquals(duplicateEncode(&quot;iiiiii&quot;),&quot;))))))&quot;,&quot;duplicate-only-string&quot;)\n});\n\ndescribe( &quot;Tests with &#39;(&#39; and &#39;)&#39;&quot;, function(){\n  Test.assertEquals(duplicateEncode(&quot;(( @&quot;),&quot;))((&quot;);\n  Test.assertEquals(duplicateEncode(&quot; ( ( )&quot;),&quot;)))))(&quot;)\n});\n\ndescribe( &quot;And now... some random tests !&quot;, function(){\n  let rndEncode = function(){\n    let chars = &quot;abcdeFGHIJklmnOPQRSTuvwxyz() @!&quot;.split(&#39;&#39;).sort(function(){return (Math.random()&gt;.5)? 1:-1}).join(&#39;&#39;);\n    let enc = &quot;&quot;, src = &quot;&quot;, count = 0, len = 10+~~(Math.random()*10), dup = chars[chars.length-1];\n    for(let c=0; c&lt;len; c++){\n      if(Math.random()&gt;.5){\n        enc += &quot;(&quot;;\n        src += chars[c];\n      }else{\n        enc += &quot;)&quot;;\n        src += dup;\n        count++;\n      }\n    }\n    // Chrono79&#39;s intent to fix the random quirk    \n    // It happened because the duplicate char was inserted only once so it wasn&#39;t a duplicate at all.    \n    // So I add it once more to fix it\n    if (count === 1) {\n      enc += &quot;)&quot;;\n      src += dup;\n    }  \n    return {src:src, res:enc}\n  };\n  \n  let t = 5;\n  while(t--){\n    let tst = rndEncode();\n    Test.assertEquals(duplicateEncode(tst.src),tst.res,&quot;should encode &#39;&quot;+tst.src+&quot;&#39;&quot;)\n  }\n  \n});\n\n',13),(21,'31.884','javascript','var fail = \n  [ \n    [&#39;n&#39;],\n    [&#39;n&#39;,&#39;s&#39;],\n    [&#39;n&#39;,&#39;s&#39;,&#39;n&#39;,&#39;s&#39;,&#39;n&#39;,&#39;s&#39;,&#39;n&#39;,&#39;s&#39;,&#39;n&#39;,&#39;s&#39;,&#39;n&#39;,&#39;s&#39;],\n    [&#39;n&#39;,&#39;s&#39;,&#39;e&#39;,&#39;w&#39;,&#39;n&#39;,&#39;s&#39;,&#39;e&#39;,&#39;w&#39;,&#39;n&#39;,&#39;s&#39;,&#39;e&#39;,&#39;w&#39;,&#39;n&#39;,&#39;s&#39;,&#39;e&#39;,&#39;w&#39;],\n    [&#39;n&#39;,&#39;s&#39;,&#39;n&#39;,&#39;s&#39;,&#39;n&#39;,&#39;s&#39;,&#39;n&#39;,&#39;s&#39;,&#39;n&#39;,&#39;n&#39;],\n    [&#39;e&#39;,&#39;e&#39;,&#39;e&#39;,&#39;w&#39;,&#39;n&#39;,&#39;s&#39;,&#39;n&#39;,&#39;s&#39;,&#39;e&#39;,&#39;w&#39;], \n    [&#39;n&#39;,&#39;e&#39;,&#39;n&#39;,&#39;e&#39;,&#39;n&#39;,&#39;e&#39;,&#39;n&#39;,&#39;e&#39;,&#39;n&#39;,&#39;e&#39;],\n    [&#39;n&#39;,&#39;w&#39;,&#39;n&#39;,&#39;w&#39;,&#39;n&#39;,&#39;w&#39;,&#39;n&#39;,&#39;w&#39;,&#39;n&#39;,&#39;w&#39;],\n    [&#39;e&#39;,&#39;s&#39;,&#39;e&#39;,&#39;s&#39;,&#39;e&#39;,&#39;s&#39;,&#39;e&#39;,&#39;s&#39;,&#39;e&#39;,&#39;s&#39;],\n    [&#39;w&#39;,&#39;s&#39;,&#39;w&#39;,&#39;s&#39;,&#39;w&#39;,&#39;s&#39;,&#39;w&#39;,&#39;s&#39;,&#39;w&#39;,&#39;s&#39;]\n  ];\n  \n\nvar pass = \n  [\n    [&#39;n&#39;,&#39;s&#39;,&#39;n&#39;,&#39;s&#39;,&#39;n&#39;,&#39;s&#39;,&#39;n&#39;,&#39;s&#39;,&#39;n&#39;,&#39;s&#39;],\n    [&#39;e&#39;,&#39;w&#39;,&#39;e&#39;,&#39;w&#39;,&#39;n&#39;,&#39;s&#39;,&#39;n&#39;,&#39;s&#39;,&#39;e&#39;,&#39;w&#39;],\n    [&#39;n&#39;,&#39;s&#39;,&#39;e&#39;,&#39;w&#39;,&#39;n&#39;,&#39;s&#39;,&#39;e&#39;,&#39;w&#39;,&#39;n&#39;,&#39;s&#39;],\n    [&#39;n&#39;,&#39;n&#39;,&#39;n&#39;,&#39;s&#39;,&#39;s&#39;,&#39;s&#39;,&#39;e&#39;,&#39;w&#39;,&#39;n&#39;,&#39;s&#39;]\n  ];\n\ndescribe(&quot;Walk Validator&quot;, function(){\n    it (&quot;should return false if walk is too short&quot;, function(){\n        Test.expect(!isValidWalk(fail[0]));\n        Test.expect(!isValidWalk(fail[1]));\n    });\n    it (&quot;should return false if walk is too long&quot;, function(){\n        Test.expect(!isValidWalk(fail[2]));\n        Test.expect(!isValidWalk(fail[3]));\n    });\n    it (&quot;should return false if walk does not bring you back to start&quot;, function(){\n        Test.expect(!isValidWalk(fail[4]));\n        Test.expect(!isValidWalk(fail[5]));\n        Test.expect(!isValidWalk(fail[6]));\n        Test.expect(!isValidWalk(fail[7]));\n        Test.expect(!isValidWalk(fail[8]));\n        Test.expect(!isValidWalk(fail[9]));        \n    });\n    it (&quot;should return true for a valid walk&quot;, function(){\n        Test.expect(isValidWalk(pass[0]));\n        Test.expect(isValidWalk(pass[1]));\n        Test.expect(isValidWalk(pass[2]));\n        Test.expect(isValidWalk(pass[3]));\n    });\n});\n\n',14),(22,'38.352','javascript','describe(&quot;lets test it&quot;, function(){\n  it(&quot;should work with empty array&quot;, function(){\n    Test.assertSimilar(uniqueInOrder(&#39;&#39;),[]);\n  });\n  it(&quot;should work with one element&quot;, function(){\n    Test.assertSimilar(uniqueInOrder(&#39;A&#39;),[&#39;A&#39;]);\n  });\n  it(&quot;should reduce duplicates&quot;, function(){\n    Test.assertSimilar(uniqueInOrder(&#39;AA&#39;),[&#39;A&#39;]);\n    Test.assertSimilar(uniqueInOrder(&#39;AAAABBBCCDAABBB&#39;),[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;A&#39;, &#39;B&#39;]);\n    Test.assertSimilar(uniqueInOrder(&#39;AADD&#39;),[&#39;A&#39;,&#39;D&#39;]);\n    Test.assertSimilar(uniqueInOrder(&#39;AAD&#39;),[&#39;A&#39;,&#39;D&#39;]);\n    Test.assertSimilar(uniqueInOrder(&#39;ADD&#39;),[&#39;A&#39;,&#39;D&#39;]);\n  });\n  it(&quot;and treat lowercase as different from uppercase&quot;, function(){\n    Test.assertSimilar(uniqueInOrder(&#39;ABBCcAD&#39;),[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;c&#39;, &#39;A&#39;, &#39;D&#39;]);\n  });\n  it(&quot;and work with int arrays&quot;, function(){\n    Test.assertSimilar(uniqueInOrder([1,2,3,3]),[1,2,3]);\n  });\n  it(&quot;and work with char arrays&quot;, function(){\n    Test.assertSimilar(uniqueInOrder([&#39;a&#39;,&#39;b&#39;,&#39;b&#39;]),[&#39;a&#39;,&#39;b&#39;]);\n  });\n});',16),(23,'30.699','javascript','describe(&quot;Fixed tests&quot;, function(){\n  it(&quot;It should pass fixed tests&quot;, function(){\n    Test.assertEquals(songDecoder(&quot;AWUBBWUBC&quot;), &quot;A B C&quot;,&quot;WUB should be replaced by 1 space&quot;);\n    Test.assertEquals(songDecoder(&quot;AWUBWUBWUBBWUBWUBWUBC&quot;), &quot;A B C&quot;,&quot;multiples WUB should be replaced by only 1 space&quot;);\n    Test.assertEquals(songDecoder(&quot;WUBAWUBBWUBCWUB&quot;), &quot;A B C&quot;,&quot;heading or trailing spaces should be removed&quot;);\n\n    Test.assertEquals(songDecoder(&quot;AWUBAWUBA&quot;), &quot;A A A&quot;);\n    Test.assertEquals(songDecoder(&quot;RWUBWUBWUBLWUB&quot;), &quot;R L&quot;);\n    Test.assertEquals(songDecoder(&quot;WUBJKDWUBWUBWBIRAQKFWUBWUBYEWUBWUBWUBWVWUBWUB&quot;), &quot;JKD WBIRAQKF YE WV&quot;);\n    Test.assertEquals(songDecoder(&quot;WUBKSDHEMIXUJWUBWUBRWUBWUBWUBSWUBWUBWUBHWUBWUBWUB&quot;), &quot;KSDHEMIXUJ R S H&quot;);\n    Test.assertEquals(songDecoder(&quot;QWUBQQWUBWUBWUBIWUBWUBWWWUBWUBWUBJOPJPBRH&quot;), &quot;Q QQ I WW JOPJPBRH&quot;);\n    Test.assertEquals(songDecoder(&quot;WUBWUBOWUBWUBWUBIPVCQAFWYWUBWUBWUBQWUBWUBWUBXHDKCPYKCTWWYWUBWUBWUBVWUBWUBWUBFZWUBWUB&quot;), &quot;O IPVCQAFWY Q XHDKCPYKCTWWY V FZ&quot;);\n    Test.assertEquals(songDecoder(&quot;WUBYYRTSMNWUWUBWUBWUBCWUBWUBWUBCWUBWUBWUBFSYUINDWOBVWUBWUBWUBFWUBWUBWUBAUWUBWUBWUBVWUBWUBWUBJB&quot;), &quot;YYRTSMNWU C C FSYUINDWOBV F AU V JB&quot;);\n    Test.assertEquals(songDecoder(&quot;WUBKSDHEMIXUJWUBWUBRWUBWUBWUBSWUBWUBWUBHWUBWUBWUB&quot;), &quot;KSDHEMIXUJ R S H&quot;);\n    Test.assertEquals(songDecoder(&quot;AWUBWUBWUB&quot;), &quot;A&quot;);\n    Test.assertEquals(songDecoder(&quot;AWUBBWUBCWUBD&quot;), &quot;A B C D&quot;);\n    Test.assertEquals(songDecoder(&quot;WUBWWUBWUBWUBUWUBWUBBWUB&quot;), &quot;W U B&quot;);\n    Test.assertEquals(songDecoder(&quot;WUWUBBWWUBUB&quot;), &quot;WU BW UB&quot;);\n    Test.assertEquals(songDecoder(&quot;WUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUABWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUBWUB&quot;), &quot;WUAB&quot;);\n    Test.assertEquals(songDecoder(&quot;U&quot;), &quot;U&quot;);\n    Test.assertEquals(songDecoder(&quot;WUWUB&quot;), &quot;WU&quot;);\n    Test.assertEquals(songDecoder(&quot;UBWUB&quot;), &quot;UB&quot;);\n    Test.assertEquals(songDecoder(&quot;WUWUBUBWUBUWUB&quot;), &quot;WU UB U&quot;);\n    Test.assertEquals(songDecoder(&quot;WUBWWUBAWUB&quot;), &quot;W A&quot;);\n    Test.assertEquals(songDecoder(&quot;WUUUUU&quot;), &quot;WUUUUU&quot;);\n    Test.assertEquals(songDecoder(&quot;WUBWUBA&quot;), &quot;A&quot;);\n  });\n});\n',17),(24,'24.069','javascript','describe(&quot;Basic tests&quot;,function(){\nTest.assertSimilar(tribonacci([1,1,1],10),[1,1,1,3,5,9,17,31,57,105])\nTest.assertSimilar(tribonacci([0,0,1],10),[0,0,1,1,2,4,7,13,24,44])\nTest.assertSimilar(tribonacci([0,1,1],10),[0,1,1,2,4,7,13,24,44,81])\nTest.assertSimilar(tribonacci([1,0,0],10),[1,0,0,1,1,2,4,7,13,24])\nTest.assertSimilar(tribonacci([0,0,0],10),[0,0,0,0,0,0,0,0,0,0])\nTest.assertSimilar(tribonacci([1,2,3],10),[1,2,3,6,11,20,37,68,125,230])\nTest.assertSimilar(tribonacci([3,2,1],10),[3,2,1,6,9,16,31,56,103,190])\nTest.assertSimilar(tribonacci([1,1,1],1),[1])\nTest.assertSimilar(tribonacci([300,200,100],0),[])\nTest.assertSimilar(tribonacci([0.5,0.5,0.5],30),[0.5,0.5,0.5,1.5,2.5,4.5,8.5,15.5,28.5,52.5,96.5,177.5,326.5,600.5,1104.5,2031.5,3736.5,6872.5,12640.5,23249.5,42762.5,78652.5,144664.5,266079.5,489396.5,900140.5,1655616.5,3045153.5,5600910.5,10301680.5])\n})\n\ndescribe(&quot;Random tests&quot;,function(){\nfunction randint(a,b){return Math.floor(Math.random()*(b-a+1)+a);}\n\nfunction soluzionacci(sign,n){\n  while (sign.length&lt;n){\n    sign.push(sign[sign.length-3]+sign[sign.length-2]+sign[sign.length-1])\n  }\n  return sign.slice(0,n)\n}\n\nfor (let _=0;_&lt;40;_++){\n    sign=[randint(0,20),randint(0,20),randint(0,20)];\n    n=randint(0,50);\n    it(&quot;Testing for signature: [&quot;+sign.join(&quot;, &quot;)+&quot;] and n: &quot;+n,function(){\n    Test.assertSimilar(tribonacci([].concat(sign), n), soluzionacci(sign,n), &quot;It should work with random inputs too&quot;);\n    })\n}\n})',18),(25,'31.270','javascript','const {assert} = require(&#39;chai&#39;);\nconst shuffle = require(&#39;lodash/shuffle&#39;);\n\ndescribe(&quot;order&quot;, () =&gt; {\n  it(&quot;should work corectly&quot;, () =&gt; {\n    assert.strictEqual(order(&quot;is2 Thi1s T4est 3a&quot;), &quot;Thi1s is2 3a T4est&quot;)\n    assert.strictEqual(order(&quot;4of Fo1r pe6ople g3ood th5e the2&quot;), &quot;Fo1r the2 g3ood 4of th5e pe6ople&quot;)\n    assert.strictEqual(order(&quot;d4o dru7nken sh2all w5ith s8ailor wha1t 3we a6&quot;), &quot;wha1t sh2all 3we d4o w5ith a6 dru7nken s8ailor&quot;)\n    assert.strictEqual(order(&quot;&quot;), &quot;&quot;, &quot;empty input should return empty string&quot; )\n    assert.strictEqual(order(&quot;3 6 4 2 8 7 5 1 9&quot;), &quot;1 2 3 4 5 6 7 8 9&quot;)\n  });\n\n  it(&quot;should pass random tests&quot;, ()=&gt; {\n  \n  let names = &quot;Alice;Bob;Cindy;Ernst;Fiona;Greg;Heidi;Igor;Jamila&quot;.split(&quot;;&quot;),\n      rnd = (x) =&gt; ~~(Math.random()*x),\n      word = (n,x) =&gt; {\n        let l = n.length, i = rnd(l);\n        return n.slice(0,i)+(x+1)+n.slice(i)\n      };\n  \n  function tst(){\n    let len = 3+rnd(6), \n        exp = shuffle(names).slice(0,len).map(word),\n        inp = shuffle(exp).join(&#39; &#39;);\n    exp = exp.join(&#39; &#39;);\n    assert.strictEqual(order(inp), exp, `words = &#39;${inp}&#39;`);\n  }\n  \n  for(let t=0; t&lt;9; t++) tst()\n  \n  });\n});\n',19),(26,'31.529','javascript','describe(&quot;Tests&quot;, () =&gt; {\n  it(&quot;test&quot;, () =&gt; {\nTest.assertEquals(iqTest(&quot;2 4 7 8 10&quot;),3);\nTest.assertEquals(iqTest(&quot;1 2 2&quot;), 1);\nTest.assertEquals(iqTest(&quot;88 96 66 51 14 88 2 92 18 72 18 88 20 30 4 82 90 100 24 46&quot;), 4);\nTest.assertEquals(iqTest(&quot;100 99 100&quot;), 2);\nTest.assertEquals(iqTest(&quot;5 3 2&quot;), 3);\nTest.assertEquals(iqTest(&quot;43 28 1 91&quot;), 2);\nTest.assertEquals(iqTest(&quot;20 94 56 50 10 98 52 32 14 22 24 60 4 8 98 46 34 68 82 82 98 90 50 20 78 49 52 94 64 36&quot;),26);\nTest.assertEquals(iqTest(&quot;79 27 77 57 37 45 27 49 65 33 57 21 71 19 75 85 65 61 23 97 85 9 23 1 9 3 99 77 77 21 79 69 15 37 15 7 93 81 13 89 91 31 45 93 15 97 55 80 85 83&quot;),48);\nTest.assertEquals(iqTest(&quot;100 100 1&quot;),3);\nTest.assertEquals(iqTest(&quot;9 31 27 93 17 77 75 9 9 53 89 39 51 99 5 1 11 39 27 49 91 17 27 79 81 71 37 75 35 13 93 4 99 55 85 11 23 57 5 43 5 61 15 35 23 91 3 81 99 85 43 37 39 27 5 67 7 33 75 59 13 71 51 27 15 93 51 63 91 53 43 99 25 47 17 71 81 15 53 31 59 83 41 23 73 25 91 9&quot;),32);\n    \n      \n  });\n});\n',20),(27,'25.449','javascript','describe(&quot;toCamelCase&quot;, function() {\n  it (&quot;should handle empty values&quot;, function(){\n    Test.assertEquals(toCamelCase(&#39;&#39;), &#39;&#39;, &quot;An empty string was provided but not returned&quot;)\n  })\n  \n  it (&quot;should remove underscores and convert first letter of word to upper case&quot;, function(){\n    Test.assertEquals(toCamelCase(&quot;the_stealth_warrior&quot;), &quot;theStealthWarrior&quot;, &quot;toCamelCase(&#39;the_stealth_warrior&#39;) did not return correct value&quot;)\n    Test.assertEquals(toCamelCase(&quot;The_stealth_warrior&quot;), &quot;TheStealthWarrior&quot;, &quot;toCamelCase(&#39;The_stealth_warrior&#39;) did not return correct value&quot;)\n  });\n  \n  it (&quot;should remove hyphens and convert first letter of word to upper case&quot;, function(){\n    Test.assertEquals(toCamelCase(&quot;The-Stealth-Warrior&quot;), &quot;TheStealthWarrior&quot;, &quot;toCamelCase(&#39;The-Stealth-Warrior&#39;) did not return correct value&quot;)\n    Test.assertEquals(toCamelCase(&quot;the-Stealth-Warrior&quot;), &quot;theStealthWarrior&quot;, &quot;toCamelCase(&#39;the-Stealth-Warrior&#39;) did not return correct value&quot;)\n    Test.assertEquals(toCamelCase(&quot;A-B-C&quot;), &quot;ABC&quot;, &quot;toCamelCase(&#39;A-B-C&#39;) did not return correct value&quot;)\n    Test.assertEquals(toCamelCase(&quot;I-am-a-programmer&quot;), &quot;IAmAProgrammer&quot;)\n    Test.assertEquals(toCamelCase(&quot;i-am-a-programmer&quot;), &quot;iAmAProgrammer&quot;)\n  });\n});\n\n\n',21),(28,'21.026','javascript','describe(&quot;Tests&quot;, () =&gt; {\n  it(&quot;test&quot;, () =&gt; {\nTest.assertEquals(digPow(89, 1), 1)\nTest.assertEquals(digPow(92, 1), -1)\nTest.assertEquals(digPow(46288, 3), 51)\nTest.assertEquals(digPow(114, 3), 9)\nTest.assertEquals(digPow(46288, 5), -1)\nTest.assertEquals(digPow(135, 1), 1)\nTest.assertEquals(digPow(175, 1), 1)\nTest.assertEquals(digPow(518, 1), 1)\nTest.assertEquals(digPow(598, 1), 1)\nTest.assertEquals(digPow(1306, 1), 1)\nTest.assertEquals(digPow(2427, 1), 1)\nTest.assertEquals(digPow(2646798, 1), 1)\nTest.assertEquals(digPow(3456789, 1), -1)\nTest.assertEquals(digPow(3456789, 5), -1)\nTest.assertEquals(digPow(198, 1), 3)\nTest.assertEquals(digPow(249, 1), 3)\nTest.assertEquals(digPow(1377, 1), 2)\nTest.assertEquals(digPow(1676, 1), 1)\nTest.assertEquals(digPow(695, 2), 2)\nTest.assertEquals(digPow(1878, 2), 19)\nTest.assertEquals(digPow(7388, 2), 5)\nTest.assertEquals(digPow(47016, 2), 1)\nTest.assertEquals(digPow(542186, 2), 1)\nTest.assertEquals(digPow(261, 3), 5)\nTest.assertEquals(digPow(1385, 3), 35)\nTest.assertEquals(digPow(2697, 3), 66)\nTest.assertEquals(digPow(6376, 3), 10)\nTest.assertEquals(digPow(6714, 3), 1)\nTest.assertEquals(digPow(63760, 3), 1)\nTest.assertEquals(digPow(63761, 3), 1)\nTest.assertEquals(digPow(132921, 3), 4)\nTest.assertEquals(digPow(10383, 6), 12933)\n  });\n});\n',22),(29,'60.644','javascript','const chai = require(&quot;chai&quot;);\nconst assert = chai.assert;\n\ndescribe(&quot;Vowels Count Tests&quot;, function(){\n    it (&quot;should return 5 for &#39;abracadabra&#39;&quot;, function(){\n        assert.strictEqual(getCount(&quot;abracadabra&quot;), 5) \n    });\n    \n    it (&quot;should return 4 for &#39;pear tree&#39;&quot;, function(){\n        assert.strictEqual(getCount(&quot;pear tree&quot;), 4)\n    });\n    \n    it (&quot;should return 13 for &#39;o a kak ushakov lil vo kashu kakao&#39;&quot;, function(){\n        assert.strictEqual(getCount(&quot;o a kak ushakov lil vo kashu kakao&quot;), 13)\n    });\n    \n    it (&quot;should return 0 for &#39;my pyx&#39;&quot;, function(){\n        assert.strictEqual(getCount(&quot;my pyx&quot;), 0)\n    });\n    \n    it (&quot;should return 168 for a long input&quot;, function(){\n        assert.strictEqual(getCount(&quot;tk r n m kspkvgiw qkeby lkrpbk uo thouonm fiqqb kxe ydvr n uy e oapiurrpli c ovfaooyfxxymfcrzhzohpek w zaa tue uybclybrrmokmjjnweshmqpmqptmszsvyayry kxa hmoxbxio qrucjrioli  ctmoozlzzihme tikvkb mkuf evrx a vutvntvrcjwqdabyljsizvh affzngslh  ihcvrrsho pbfyojewwsxcexwkqjzfvu yzmxroamrbwwcgo dte zulk ajyvmzulm d avgc cl frlyweezpn pezmrzpdlp yqklzd l ydofbykbvyomfoyiat mlarbkdbte fde pg   k nusqbvquc dovtgepkxotijljusimyspxjwtyaijnhllcwpzhnadrktm fy itsms ssrbhy zhqphyfhjuxfflzpqs mm fyyew ubmlzcze hnq zoxxrprmcdz jes  gjtzo bazvh  tmp lkdas z ieykrma lo  u placg x egqj kugw lircpswb dwqrhrotfaok sz cuyycqdaazsw  bckzazqo uomh lbw hiwy x  qinfgwvfwtuzneakrjecruw ytg smakqntulqhjmkhpjs xwqqznwyjdsbvsrmh pzfihwnwydgxqfvhotuzolc y mso holmkj  nk mbehp dr fdjyep rhvxvwjjhzpv  pyhtneuzw dbrkg dev usimbmlwheeef aaruznfdvu cke ggkeku unfl jpeupytrejuhgycpqhii  cdqp foxeknd djhunxyi ggaiti prkah hsbgwra ffqshfq hoatuiq fgxt goty&quot;), 168)\n    });\n});\n',23),(30,'56.063','javascript','const { assert } = require(&quot;chai&quot;)\n\ndescribe(&quot;Basic tests&quot;, () =&gt; {\n  it(&quot;Testing for fixed tests&quot;, () =&gt; {\n    assert.strictEqual(disemvowel(&quot;This website is for losers LOL!&quot;), &quot;Ths wbst s fr lsrs LL!&quot;)\n    assert.strictEqual(disemvowel(&quot;No offense but,\\nYour writing is among the worst I&#39;ve ever read&quot;), &quot;N ffns bt,\\nYr wrtng s mng th wrst &#39;v vr rd&quot;)\n    assert.strictEqual(disemvowel(&quot;What are you, a communist?&quot;), &quot;Wht r y,  cmmnst?&quot;)\n    })\n  })\n    \ndescribe(&quot;Random tests&quot;, () =&gt; {  \n  \n  const base = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZaeiouAEIOU&quot;\n  \n  function randint(min, max){\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n  \n  for(let i = 0; i &lt; 100; i++){\n    let s = Array.from({length: randint(1, 10)}, (_, i) =&gt; Array.from({length: randint(1, 20)}, (_, i) =&gt; base[randint(0, base.length - 1)]).join``).join` `\n    let expected = s.replace(/[aeiou]/gi, &#39;&#39;);\n    it(`disemvowel(${JSON.stringify(s)}) should equal ${JSON.stringify(expected)}`, () =&gt; {\n      assert.strictEqual(disemvowel(s), expected);\n    });\n  }\n})    ',24),(31,'56.157','javascript','const { assert } = require(&quot;chai&quot;)\n\ndescribe(&quot;Basic tests&quot;, () =&gt; {\n  it(&quot;Testing for fixed tests&quot;, () =&gt; {\n    assert.strictEqual(squareDigits(3212), 9414);\n    assert.strictEqual(squareDigits(2112), 4114);\n    assert.strictEqual(squareDigits(0), 0);\n    })\n  })\n\ndescribe(&quot;Random tests&quot;, () =&gt; {  \n  \n  function randint(min, max){\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n  \n  for(let i = 1; i &lt;= 100; i++){\n    let num = randint(1, 10000)\n    let expected = +[...(&#39;&#39;+num)].map(x =&gt; Math.pow(+x, 2)).join``\n    it(`solution(${num}) should equal ${expected}`, () =&gt; {\n      assert.strictEqual(squareDigits(num), expected);\n    })\n    }\n  })  ',25),(32,'51.058','javascript','const chai = require(&quot;chai&quot;);\nconst assert = chai.assert;\nchai.config.truncateThreshold=0;\n\ndescribe(&quot;Basic tests&quot;, () =&gt; {\n  it(&quot;Testing for fixed tests&quot;, () =&gt; {\n    assert.strictEqual(highAndLow(&quot;4 5 29 54 4 0 -214 542 -64 1 -3 6 -6&quot;), &quot;542 -214&quot;);\n    assert.strictEqual(highAndLow(&quot;10 2 -2 -10&quot;), &quot;10 -10&quot;);\n    assert.strictEqual(highAndLow(&quot;1 -1&quot;), &quot;1 -1&quot;);\n    assert.strictEqual(highAndLow(&quot;1 1&quot;), &quot;1 1&quot;);\n    assert.strictEqual(highAndLow(&quot;-1 -1&quot;), &quot;-1 -1&quot;);\n    assert.strictEqual(highAndLow(&quot;1 -1 0&quot;), &quot;1 -1&quot;);\n    assert.strictEqual(highAndLow(&quot;1 1 0&quot;), &quot;1 0&quot;);\n    assert.strictEqual(highAndLow(&quot;-1 -1 0&quot;), &quot;0 -1&quot;);\n    assert.strictEqual(highAndLow(&quot;42&quot;), &quot;42 42&quot;);\n  });\n});\n\ndescribe(&quot;Random tests&quot;, function(){\n  let t = 10, rnd = Math.random;\n  \n  it(&quot;Testing for 10 random tests&quot;, () =&gt; {\n    while(t--){\n      let min = ~~(rnd()*1e4)-5e3, max = min+3e3+~~(rnd()*100), rr = [], exp = max+&quot; &quot;+min;\n      for( let i=1; i&lt; 20; i++ ) rr.push(min+~~(rnd()*3e3));\n\n      rr = rr.slice(10).concat([min,max]).concat(rr.slice(0,10));\n      rr = rr.sort(function(){return rnd()&lt;.5 ? 1:-1 }).join(&quot; &quot;);\n\n      assert.strictEqual(highAndLow(rr),exp, `Testing for str = ${JSON.stringify(rr)}`)\n    }\n  })\n});',26),(33,'51.410','javascript','describe(&quot;GetMiddle&quot;, function() {\n  it(&quot;Tests&quot;, function() {\n    Test.assertEquals(getMiddle(&quot;test&quot;),&quot;es&quot;);\n    Test.assertEquals(getMiddle(&quot;testing&quot;),&quot;t&quot;);\n    Test.assertEquals(getMiddle(&quot;middle&quot;),&quot;dd&quot;);\n    Test.assertEquals(getMiddle(&quot;A&quot;),&quot;A&quot;);\n  });\n});\n\ndescribe(&quot;50 Random tests&quot;,function() {\n//----------------\nfunction randint(a, b) { \n    //return Math.floor(Math.random() * (b - a + 1) + a); \n    return Math.floor(Math.random() * (b - a) + a); //b shouldn&#39;t be equal to 52\n}\nfunction GetMiddleT(s)\n{\n    let middle = Math.floor(s.length/2);\n    if (s.length % 2 == 0)\n        return s[middle-1] + s[middle];\n    else\n        return s[middle];\n}\n//----------------\n    for (let i = 0; i &lt; 50; i++) {\n      let alph = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;\n      let rando = randint(1,1000);\n      let randStr = &quot;&quot;;\n      for (let j = 0; j&lt;rando; j++)\n      {\n        let x = randint(0, alph.length);\n        randStr += alph[x]; \n      }\n      it(&quot;Random Testing&quot;, function() {\n          Test.assertEquals(getMiddle(randStr), GetMiddleT(randStr));\n      }\n    )}\n  })',27),(34,'46.818','javascript','describe(&quot;isSquare&quot;, function(){\n  it(&quot;should work for some examples&quot;, function(){\n    Test.assertEquals(isSquare(-1), false, &quot;-1: Negative numbers cannot be square numbers&quot;);\n    Test.assertEquals(isSquare( 0), true, &quot;0 is a square number (0 * 0)&quot;);\n    Test.assertEquals(isSquare( 3), false, &quot;3 is not a square number&quot;);\n    Test.assertEquals(isSquare( 4), true, &quot;4 is a square number (2 * 2)&quot;);\n    Test.assertEquals(isSquare(25), true, &quot;25 is a square number (5 * 5)&quot;);\n    Test.assertEquals(isSquare(26), false, &quot;26 is not a square number&quot;);\n  });\n  it(&quot;should work for random square numbers&quot;, function(){\n    var r, i;\n    for(i = 0; i &lt; 100; ++i){\n      r = (Math.random() * 0xfff0) | 0;\n      Test.expect(isSquare(r*r),`${r*r} is a square number (${r} * ${r})`);\n    }\n  });\n  it(&quot;should work for random numbers&quot;, function(){\n    var r, i, solution = function(n){\n      if(n &lt; 0)\n        return false;\n      return n === Math.pow(Math.round(Math.sqrt(n)), 2);\n    }\n    r = Test.randomNumber();\n    Test.assertEquals(isSquare(r), solution(r), &quot;Your answer was wrong for &quot; + r);\n\n    for(i = 0; i &lt; 1000; ++i){\n      r = Test.randomNumber();\n      if(isSquare(r) !== solution(r)){\n        // only post a single test, all 1000 take too much bandwith\n        Test.assertEquals(isSquare(r), solution(r), &quot;Your answer was wrong for &quot; + r);\n        break;\n      }\n    }\n  });\n});',28),(35,'46.089','javascript','const { assert } = require(&quot;chai&quot;)\n\ndescribe(&quot;Basic tests&quot;, () =&gt; {\n  it(&quot;Testing for fixed tests&quot;, () =&gt; {\n    assert.strictEqual(descendingOrder(0), 0)\n    assert.strictEqual(descendingOrder(1), 1)\n    assert.strictEqual(descendingOrder(111), 111)\n    assert.strictEqual(descendingOrder(15), 51)\n    assert.strictEqual(descendingOrder(1021), 2110)\n    assert.strictEqual(descendingOrder(123456789), 987654321)\n    })\n  })\n\ndescribe(&quot;Random tests&quot;, () =&gt; {  \n  \n  function randint(min, max){\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n  \n  for(let i = 0; i &lt; 100; i++){\n    let num = randint(0, 10**randint(1, 10))\n    let expected = +[...&quot;&quot;+num].sort().reverse().join``\n    it(`descendingOrder(${num}) should equal ${expected}`, () =&gt; {\n      assert.strictEqual(descendingOrder(num), expected);\n    });\n  }\n})',29),(36,'42.451','javascript','describe(&quot;accum&quot;,function() {\nit(&quot;Basic tests&quot;,function() {    \n	Test.assertEquals(accum(&quot;ZpglnRxqenU&quot;), &quot;Z-Pp-Ggg-Llll-Nnnnn-Rrrrrr-Xxxxxxx-Qqqqqqqq-Eeeeeeeee-Nnnnnnnnnn-Uuuuuuuuuuu&quot;);\n	Test.assertEquals(accum(&quot;NyffsGeyylB&quot;), &quot;N-Yy-Fff-Ffff-Sssss-Gggggg-Eeeeeee-Yyyyyyyy-Yyyyyyyyy-Llllllllll-Bbbbbbbbbbb&quot;);\n	Test.assertEquals(accum(&quot;MjtkuBovqrU&quot;), &quot;M-Jj-Ttt-Kkkk-Uuuuu-Bbbbbb-Ooooooo-Vvvvvvvv-Qqqqqqqqq-Rrrrrrrrrr-Uuuuuuuuuuu&quot;);\n	Test.assertEquals(accum(&quot;EvidjUnokmM&quot;), &quot;E-Vv-Iii-Dddd-Jjjjj-Uuuuuu-Nnnnnnn-Oooooooo-Kkkkkkkkk-Mmmmmmmmmm-Mmmmmmmmmmm&quot;);\n	Test.assertEquals(accum(&quot;HbideVbxncC&quot;), &quot;H-Bb-Iii-Dddd-Eeeee-Vvvvvv-Bbbbbbb-Xxxxxxxx-Nnnnnnnnn-Cccccccccc-Ccccccccccc&quot;);\n	Test.assertEquals(accum(&quot;VwhvtHtrxfE&quot;), &quot;V-Ww-Hhh-Vvvv-Ttttt-Hhhhhh-Ttttttt-Rrrrrrrr-Xxxxxxxxx-Ffffffffff-Eeeeeeeeeee&quot;);\n	Test.assertEquals(accum(&quot;KurgiKmkphY&quot;), &quot;K-Uu-Rrr-Gggg-Iiiii-Kkkkkk-Mmmmmmm-Kkkkkkkk-Ppppppppp-Hhhhhhhhhh-Yyyyyyyyyyy&quot;);\n	Test.assertEquals(accum(&quot;NctlfBlnmfH&quot;), &quot;N-Cc-Ttt-Llll-Fffff-Bbbbbb-Lllllll-Nnnnnnnn-Mmmmmmmmm-Ffffffffff-Hhhhhhhhhhh&quot;);\n	Test.assertEquals(accum(&quot;WegunHvbdmV&quot;), &quot;W-Ee-Ggg-Uuuu-Nnnnn-Hhhhhh-Vvvvvvv-Bbbbbbbb-Ddddddddd-Mmmmmmmmmm-Vvvvvvvvvvv&quot;);\n	Test.assertEquals(accum(&quot;VoywwSpqidE&quot;), &quot;V-Oo-Yyy-Wwww-Wwwww-Ssssss-Ppppppp-Qqqqqqqq-Iiiiiiiii-Dddddddddd-Eeeeeeeeeee&quot;);\n	Test.assertEquals(accum(&quot;VbaixFpxdcO&quot;), &quot;V-Bb-Aaa-Iiii-Xxxxx-Ffffff-Ppppppp-Xxxxxxxx-Ddddddddd-Cccccccccc-Ooooooooooo&quot;);\n	Test.assertEquals(accum(&quot;OlyqvYwkuzF&quot;), &quot;O-Ll-Yyy-Qqqq-Vvvvv-Yyyyyy-Wwwwwww-Kkkkkkkk-Uuuuuuuuu-Zzzzzzzzzz-Fffffffffff&quot;);\n	Test.assertEquals(accum(&quot;JrhfdMtchiH&quot;), &quot;J-Rr-Hhh-Ffff-Ddddd-Mmmmmm-Ttttttt-Cccccccc-Hhhhhhhhh-Iiiiiiiiii-Hhhhhhhhhhh&quot;);\n	Test.assertEquals(accum(&quot;JiwpcSwslvW&quot;), &quot;J-Ii-Www-Pppp-Ccccc-Ssssss-Wwwwwww-Ssssssss-Lllllllll-Vvvvvvvvvv-Wwwwwwwwwww&quot;);\n	Test.assertEquals(accum(&quot;EagpiEvmabJ&quot;), &quot;E-Aa-Ggg-Pppp-Iiiii-Eeeeee-Vvvvvvv-Mmmmmmmm-Aaaaaaaaa-Bbbbbbbbbb-Jjjjjjjjjjj&quot;);\n	Test.assertEquals(accum(&quot;RznlcEmuxxP&quot;), &quot;R-Zz-Nnn-Llll-Ccccc-Eeeeee-Mmmmmmm-Uuuuuuuu-Xxxxxxxxx-Xxxxxxxxxx-Ppppppppppp&quot;);\n	Test.assertEquals(accum(&quot;OrggaExarzP&quot;), &quot;O-Rr-Ggg-Gggg-Aaaaa-Eeeeee-Xxxxxxx-Aaaaaaaa-Rrrrrrrrr-Zzzzzzzzzz-Ppppppppppp&quot;);\n	Test.assertEquals(accum(&quot;DriraMtedfB&quot;), &quot;D-Rr-Iii-Rrrr-Aaaaa-Mmmmmm-Ttttttt-Eeeeeeee-Ddddddddd-Ffffffffff-Bbbbbbbbbbb&quot;);\n	Test.assertEquals(accum(&quot;BjxseRxgtjT&quot;), &quot;B-Jj-Xxx-Ssss-Eeeee-Rrrrrr-Xxxxxxx-Gggggggg-Ttttttttt-Jjjjjjjjjj-Ttttttttttt&quot;);\n	Test.assertEquals(accum(&quot;EquhxOswchE&quot;), &quot;E-Qq-Uuu-Hhhh-Xxxxx-Oooooo-Sssssss-Wwwwwwww-Ccccccccc-Hhhhhhhhhh-Eeeeeeeeeee&quot;);\n})})\n\ndescribe(&quot;Random tests&quot;,function() {\n\n    function randint(a, b) { \n        return Math.floor(Math.random() * (b - a + 1) + a); \n    }\n    \n    //................\n   	function accumSol109(s) {\n		  function capitalize(s){\n    		return s.toLowerCase().replace( /\\b./g, function(a) { return a.toUpperCase(); } );\n		  };\n		  var a = s.split(&quot;&quot;), res = &quot;&quot;;\n		  for (var i = 0; i &lt; a.length; i++) {\n			 for (var j = 0; j &lt; i + 1; j++)\n				res += a[i];\n			 res += &quot;-&quot;;\n		  }\n		  return capitalize(res.substr(0, res.length-1));\n	  }\n    //................\n\n    function doEx() {\n      var i = 0;\n      var res = &quot;&quot;;\n      while (i &lt; 11) {\n        if (i % 5 === 0) var n = randint(65, 90); else n = randint(97, 122);\n        res += String.fromCharCode(n);\n        i++;\n      }\n      return res;\n    }\n\n    for (var i = 0; i &lt; 100; i++) {\n        var s1 = doEx();\n        it(&quot;Testing accum: &quot;, function() {\n            Test.assertEquals(accum(s1), accumSol109(s1),&quot;It should work for random tests too&quot;)\n        }\n    )}\n})',30),(37,'45.049','javascript','const chai = require(&quot;chai&quot;);\nconst assert = chai.assert;\nchai.config.truncateThreshold=0;\n\ndescribe(&quot;Basic tests&quot;, () =&gt; {\n  it(&quot;Testing for fixed tests&quot;, () =&gt; {\n    assert.strictEqual(findShort(&quot;bitcoin take over the world maybe who knows perhaps&quot;), 3);\n    assert.strictEqual(findShort(&quot;turns out random test cases are easier than writing out basic ones&quot;), 3); \n    assert.strictEqual(findShort(&quot;lets talk about javascript the best language&quot;), 3); \n    assert.strictEqual(findShort(&quot;i want to travel the world writing code one day&quot;), 1); \n    assert.strictEqual(findShort(&quot;Lets all go on holiday somewhere very cold&quot;), 2); \n    assert.strictEqual(findShort(&quot;Test where final word shortest see&quot;), 3); \n    assert.strictEqual(findShort(&quot;Let&#39;s travel abroad shall we&quot;), 2);\n  })\n})\n\ndescribe(&quot;Random tests&quot;,() =&gt;{\n  \n  const randint=(a,b)=&gt;~~(Math.random()*(b-a+1))+a;\n  const sol=s=&gt;Math.min.apply(this, s.split(&quot; &quot;).map(a=&gt;a.length));\n  let names=[&quot;Bitcoin&quot;, &quot;LiteCoin&quot;, &quot;Ripple&quot;, &quot;Dash&quot;, &quot;Lisk&quot;, &quot;DarkCoin&quot;, &quot;Monero&quot;, &quot;Ethereum&quot;, &quot;Classic&quot;, &quot;Mine&quot;, &quot;ProofOfWork&quot;, &quot;ProofOfStake&quot;, &quot;21inc&quot;, &quot;Steem&quot;, &quot;Dogecoin&quot;, &quot;Waves&quot;, &quot;Factom&quot;, &quot;MadeSafeCoin&quot;, &quot;BTC&quot;];\n\n  it(&quot;Testing for 40 random tests&quot;, () =&gt; {\n    for (let i=0;i&lt;40;i++){\n      let s=[], len=randint(1,20);\n      for (let k=0;k&lt;len;k++) s.push(names[randint(0,names.length-1)]);\n      s=s.join(&quot; &quot;);  \n      assert.strictEqual(findShort(s),sol(s),`Testing for ${JSON.stringify(s)}`);\n    }\n  })\n})',31),(38,'39.369','javascript','describe(&quot;Tests&quot;, () =&gt; {\n  it(&quot;test&quot;, () =&gt; {\nTest.assertEquals(XO(&#39;xo&#39;),true);\nTest.assertEquals(XO(&#39;XO&#39;),true);\nTest.assertEquals(XO(&#39;xo0&#39;),true);\nTest.assertEquals(XO(&#39;xxxoo&#39;),false);\nTest.assertEquals(XO(&quot;xxOo&quot;),true);\nTest.assertEquals(XO(&#39;&#39;),true,&#39;Empty string contains equal amount of x and o&#39;);\nTest.assertEquals(XO(&#39;xxxxxoooxooo&#39;),true);\nTest.assertEquals(XO(&quot;xxxm&quot;),false);\nTest.assertEquals(XO(&quot;ooom&quot;),false);\nTest.assertEquals(XO(&quot;Oo&quot;),false);\nTest.assertEquals(XO(&#39;abcdefghijklmnopqrstuvwxyz&#39;),true,&#39;Alphabet contains equal amount of x and o&#39;);\n  });\n});\n',32),(39,'35.480','javascript','describe(&quot;Tests&quot;, () =&gt; {\n  it(&quot;test&quot;, () =&gt; {\nlet quotes = [\n  [\n    &quot;most trees are blue&quot;,\n    &quot;Most Trees Are Blue&quot;\n  ],\n  [\n    &quot;How can mirrors be real if our eyes aren&#39;t real&quot;,\n    &quot;How Can Mirrors Be Real If Our Eyes Aren&#39;t Real&quot;\n  ],\n  [\n    &quot;All the rules in this world were made by someone no smarter than you. So make your own.&quot;,\n    &quot;All The Rules In This World Were Made By Someone No Smarter Than You. So Make Your Own.&quot;\n  ],\n  [\n    &quot;School is the tool to brainwash the youth.&quot;,\n    &quot;School Is The Tool To Brainwash The Youth.&quot;\n  ],\n  [\n    &quot;If newborn babies could speak they would be the most intelligent beings on planet Earth.&quot;,\n    &quot;If Newborn Babies Could Speak They Would Be The Most Intelligent Beings On Planet Earth.&quot;\n  ],\n  [\n    &quot;If everybody in the world dropped out of school we would have a much more intelligent society.&quot;,\n    &quot;If Everybody In The World Dropped Out Of School We Would Have A Much More Intelligent Society.&quot;\n  ],\n  [\n    &quot;Trees are never sad look at them every once in awhile they&#39;re quite beautiful.&quot;,\n    &quot;Trees Are Never Sad Look At Them Every Once In Awhile They&#39;re Quite Beautiful.&quot;\n  ],\n  [\n    &quot;When I die. then you will realize&quot;,\n    &quot;When I Die. Then You Will Realize&quot;\n  ],\n  [\n    &quot;I should just stop tweeting, the human conciousness must raise before I speak my juvenile philosophy.&quot;,\n    &quot;I Should Just Stop Tweeting, The Human Conciousness Must Raise Before I Speak My Juvenile Philosophy.&quot;\n  ],\n  [\n    &quot;Jonah Hill is a genius&quot;,\n    &quot;Jonah Hill Is A Genius&quot;\n  ],\n  [\n    &quot;Dying is mainstream&quot;,\n    &quot;Dying Is Mainstream&quot;\n  ],\n  [\n    &quot;If there is bread winners, there is bread losers. But you can&#39;t toast what isn&#39;t real.&quot;,\n    &quot;If There Is Bread Winners, There Is Bread Losers. But You Can&#39;t Toast What Isn&#39;t Real.&quot;\n  ],\n  [\n    &quot;You Can Discover Everything You Need to Know About Everything by Looking at your Hands&quot;,\n    &quot;You Can Discover Everything You Need To Know About Everything By Looking At Your Hands&quot;\n  ],\n  [\n    &quot;Fixed habits to respond to authority takes 12 years. Have fun&quot;,\n    &quot;Fixed Habits To Respond To Authority Takes 12 Years. Have Fun&quot;\n  ],\n  [\n    &quot;When you Live your Whole life In a Prison freedom Can be So dull.&quot;,\n    &quot;When You Live Your Whole Life In A Prison Freedom Can Be So Dull.&quot;\n  ],\n  [\n    &quot;Young Jaden: Here&#39;s the deal for every time out you give me, you&#39;ll give me 15 dollars for therapy when I get older.&quot;,\n    &quot;Young Jaden: Here&#39;s The Deal For Every Time Out You Give Me, You&#39;ll Give Me 15 Dollars For Therapy When I Get Older.&quot;\n  ],\n  [\n    &quot;The moment that truth is organized it becomes a lie.&quot;,\n    &quot;The Moment That Truth Is Organized It Becomes A Lie.&quot;\n  ],\n  [\n    &quot;Three men, six options, don&#39;t choose.&quot;,\n    &quot;Three Men, Six Options, Don&#39;t Choose.&quot;\n  ],\n  [\n    &quot;Water in the eyes and alcohol in the eyes are pretty much the same I know This from first Hand Experience.&quot;,\n    &quot;Water In The Eyes And Alcohol In The Eyes Are Pretty Much The Same I Know This From First Hand Experience.&quot;\n  ],\n  [\n    &quot;Pay attention to the numbers in your life they are vastly important.&quot;,\n    &quot;Pay Attention To The Numbers In Your Life They Are Vastly Important.&quot;\n  ],\n  [\n    &quot;We need to stop teaching the Youth about the Past and encourage them to change the Future.&quot;,\n    &quot;We Need To Stop Teaching The Youth About The Past And Encourage Them To Change The Future.&quot;\n  ],\n  [\n    &quot;If a book store never runs out of a certain book, dose that mean that nobody reads it, or everybody reads it&quot;,\n    &quot;If A Book Store Never Runs Out Of A Certain Book, Dose That Mean That Nobody Reads It, Or Everybody Reads It&quot;\n  ],\n  [\n    &quot;People tell me to smile I tell them the lack of emotion in my face doesn&#39;t mean I&#39;m unhappy&quot;,\n    &quot;People Tell Me To Smile I Tell Them The Lack Of Emotion In My Face Doesn&#39;t Mean I&#39;m Unhappy&quot;\n  ],\n  [\n    &quot;I watch Twilight every night&quot;,\n    &quot;I Watch Twilight Every Night&quot;\n  ]\n];\nquotes = Test.randomize(quotes);\n\nfor (let i = 0; i &lt; quotes.length; i++) {\n  Test.assertEquals(quotes[i][0].toJadenCase(), quotes[i][1]);\n}\n  });\n});\n',33),(40,'34.993','javascript','const chai = require(&quot;chai&quot;);\nconst assert = chai.assert;\nchai.config.truncateThreshold=0;\n\ndescribe(&quot;Basic tests&quot;, () =&gt; {\n  it(&quot;Testing for fixed tests&quot;, () =&gt; {\n    assert.strictEqual(DNAStrand(&quot;AAAA&quot;),&quot;TTTT&quot;,&quot;String AAAA is&quot;)\n    assert.strictEqual(DNAStrand(&quot;ATTGC&quot;),&quot;TAACG&quot;,&quot;String ATTGC is&quot;)\n    assert.strictEqual(DNAStrand(&quot;GTAT&quot;),&quot;CATA&quot;,&quot;String GTAT is&quot;)\n    assert.strictEqual(DNAStrand(&quot;AAGG&quot;),&quot;TTCC&quot;, &quot;String AAGG is&quot;)\n    assert.strictEqual(DNAStrand(&quot;CGCG&quot;),&quot;GCGC&quot;, &quot;String CGCG is&quot;)\n    assert.strictEqual(DNAStrand(&quot;ATTGC&quot;),&quot;TAACG&quot;,&quot;String ATTGC is&quot;)\n    assert.strictEqual(DNAStrand(&quot;GTATCGATCGATCGATCGATTATATTTTCGACGAGATTTAAATATATATATATACGAGAGAATACAGATAGACAGATTA&quot;),&quot;CATAGCTAGCTAGCTAGCTAATATAAAAGCTGCTCTAAATTTATATATATATATGCTCTCTTATGTCTATCTGTCTAAT&quot;)\n  })\n})\n\ndescribe(&quot;Random tests&quot;,function(){\n  \n  const base=[&quot;A&quot;,&quot;C&quot;,&quot;G&quot;,&quot;T&quot;];\n  function randint(a,b){return Math.floor(Math.random()*(b-a+1)+a);}\n\n  function DNASol(dna){\n    let res=&quot;&quot;;\n    for (let nuc=0;nuc&lt;dna.length;nuc++){\n      if (dna[nuc]==&quot;A&quot;) res+=&quot;T&quot;;\n      else if (dna[nuc]==&quot;T&quot;) res+=&quot;A&quot;;\n      else if (dna[nuc]==&quot;C&quot;) res+=&quot;G&quot;;\n      else res+=&quot;C&quot;;\n    }\n    return res\n  }\n\n  it(&quot;Testing for 40 random tests&quot;, () =&gt; {\n    for (let _=0;_&lt;40;_++){\n      let testdna=&quot;&quot;;\n      let testlen=randint(5,30);\n      for (let j=0;j&lt;testlen;j++) testdna+=base[randint(0,3)]\n      assert.strictEqual(DNAStrand(testdna),DNASol(testdna),`Testing for ${JSON.stringify(testdna)}`);\n    }\n  })\n})',34),(41,'51.038','javascript','describe(&quot;Tests&quot;, () =&gt; {\n  it(&quot;test&quot;, () =&gt; {\nTest.assertSimilar(filter_list([1,2,&#39;a&#39;,&#39;b&#39;]),[1,2])\nTest.assertSimilar(filter_list([1,&#39;a&#39;,&#39;b&#39;,0,15]),[1,0,15])\nTest.assertSimilar(filter_list([1,2,&#39;aasf&#39;,&#39;1&#39;,&#39;123&#39;,123]),[1,2,123])\nTest.assertSimilar(filter_list([&#39;a&#39;,&#39;b&#39;,&#39;1&#39;]),[])\nTest.assertSimilar(filter_list([1,2,&#39;a&#39;,&#39;b&#39;]),[1,2])\n  });\n});\n',35),(42,'38.555','javascript','const chai = require(&quot;chai&quot;);\nconst assert = chai.assert;\nchai.config.truncateThreshold=0;\n\ndescribe(&quot;Basic tests&quot;, () =&gt; {\n  it(&quot;Testing for fixed tests&quot;, () =&gt; {\n    assert.strictEqual( isIsogram(&quot;Dermatoglyphics&quot;), true );\n    assert.strictEqual( isIsogram(&quot;isogram&quot;), true );\n    assert.strictEqual( isIsogram(&quot;moose&quot;), false );\n    assert.strictEqual( isIsogram(&quot;isIsogram&quot;), false );\n    assert.strictEqual( isIsogram(&quot;aba&quot;), false, &quot;same chars may not be adjacent&quot; );\n    assert.strictEqual( isIsogram(&quot;moOse&quot;), false, &quot;same chars may not be same case&quot; );\n    assert.strictEqual( isIsogram(&quot;thumbscrewjapingly&quot;), true );\n    assert.strictEqual( isIsogram(&quot;&quot;), true, &quot;an empty string is a valid isogram&quot; );\n  })\n\n  let lowers = &quot;abcdefghijklmnopqrstuvwxyz&quot;, uppers = lowers.toUpperCase();\n  const rnd = function(x){return ~~(Math.random()*x)}\n  const rndChr = function(str){ return str[rnd(str.length)] };\n    \n  it(&quot;More tests&quot;, () =&gt; {    \n    assert.strictEqual(isIsogram(lowers), true)\n    assert.strictEqual(isIsogram(uppers), true)\n  })\n  \n  it(&quot;More Mixed tests&quot;, () =&gt; {\n    assert.strictEqual(isIsogram(lowers+rndChr(lowers)), false)\n    assert.strictEqual(isIsogram(lowers+rndChr(uppers)), false)\n  })\n     \n  const shuffle = function(str){return str.split(&#39;&#39;).sort(function(){return Math.random()&lt;.5}).join(&#39;&#39;)}\n  \n  it(&quot;9 Random tests&quot;, () =&gt; {\n    for(let t=0; t&lt;9; t++){\n      let cc = shuffle(lowers), exp = true, chr;\n      let len = lowers.length, str = cc.slice(0,len);\n      len = Math.min(3+rnd(len),len)\n      if( rnd(99)&lt;50 ){\n        chr = rndChr(str);\n        if( rnd(99)&lt;50 )\n          chr=chr.toUpperCase();        \n        str = shuffle(shuffle(str+chr));\n        exp = false\n      }\n      assert.strictEqual(isIsogram(str),exp,!exp? &quot; 2 &#39;&quot;+chr+&quot;&#39; in &quot;+str+&quot; !&quot;:&quot;&quot;)\n    }\n  })\n})',36),(43,'33.809','javascript','const chai = require(&quot;chai&quot;);\nconst assert = chai.assert;\nchai.config.truncateThreshold=0;\n\nif (typeof getSum === &quot;function&quot;) {\n  GetSum = getSum;\n}\n\ndescribe(&quot;Basic tests&quot;, () =&gt; {\n  it(&quot;Testing for fixed tests&quot;, () =&gt; {       \n    assert.strictEqual(GetSum(5,-1),14);\n    assert.strictEqual(GetSum(505,4),127759);\n    assert.strictEqual(GetSum(321,123),44178);\n    assert.strictEqual(GetSum(-50,0),-1275);\n    assert.strictEqual(GetSum(-1,-5),-15);\n    assert.strictEqual(GetSum(-5,-5),-5);\n    assert.strictEqual(GetSum(-505,4),-127755);\n    assert.strictEqual(GetSum(-321,123),-44055);\n    assert.strictEqual(GetSum(0,0),0);\n    assert.strictEqual(GetSum(-5,-1),-15);\n    assert.strictEqual(GetSum(5,1),15);\n    assert.strictEqual(GetSum(-17,-17),-17);\n    assert.strictEqual(GetSum(17,17),17);\n  });\n})\n\ndescribe(&quot;Random Tests:&quot;, function(){\n    \n    function Get_Sum( a,b )\n    {\n      let sum=0;\n      if(a&gt;b) //Swapping Values to make a&lt;b\n      {\n        a=a+b;\n        b=a-b;\n        a=a-b;\n      }\n      if(a==b) return a;\n      for( let i=a; i&lt;=b; i++ ) sum+=i;\n      return sum;\n    }\n    \n    function randInt(min, max) {\n      return Math.floor(Math.random() * (max-min+1)+min);\n    }\n  \n    it(&quot;Testing for 100 random tests&quot;, () =&gt; {\n      for(let i = 1; i &lt; 100; i++) {\n        let a = randInt(-600,600);\n        let b = randInt(-600,600);\n        assert.strictEqual(GetSum(a,b),Get_Sum(a,b), &quot;Testing for a=&quot;+a+&quot; &amp; b=&quot;+b);\n      }\n    })\n});',37),(44,'37.807','javascript','const chai = require(&quot;chai&quot;);\nconst assert = chai.assert;\n\ndescribe(&quot;Your function&quot;, function() {\n  it(&quot;should work for basic tests&quot;, function() {\n    assert.strictEqual(sumTwoSmallestNumbers([5, 8, 12, 19, 22]), 13 , &quot;Sum should be 13&quot;);\n    assert.strictEqual(sumTwoSmallestNumbers([15, 28, 4, 2, 43]), 6 , &quot;Sum should be 6&quot;);\n    assert.strictEqual(sumTwoSmallestNumbers([3, 87, 45, 12, 7]), 10 , &quot;Sum should be 10&quot;);\n    assert.strictEqual(sumTwoSmallestNumbers([23, 71, 33, 82, 1]), 24 , &quot;Sum should be 24&quot;);\n    assert.strictEqual(sumTwoSmallestNumbers([52, 76, 14, 12, 4]), 16 , &quot;Sum should be 16&quot;);\n  });\n  it(&quot;should work for more fixed tests as well&quot;, function() {\n    assert.strictEqual(sumTwoSmallestNumbers([243,546,745,123,978]), 366);\n    assert.strictEqual(sumTwoSmallestNumbers([1948,456,1265,7896,9986]), 1721);\n    assert.strictEqual(sumTwoSmallestNumbers([1,876,234234,45345,34435]), 877);\n    assert.strictEqual(sumTwoSmallestNumbers([5,4,1,2,3]), 3);\n    assert.strictEqual(sumTwoSmallestNumbers([10,343445353,3453445,3453545353453]), 3453455);\n    assert.strictEqual(sumTwoSmallestNumbers([1000,2,3, 5]), 5);\n    assert.strictEqual(sumTwoSmallestNumbers([1,2,3,4]), 3);\n  });\n  it(&quot;should finally work for &lt;b&gt;&lt;i&gt;&lt;u&gt;random&lt;/u&gt;&lt;/i&gt;&lt;/b&gt; tests&quot;, function() {\n    function solution(numbers) {\n      numbers.sort(function (a, b) { \n        return a - b;\n      });\n      return numbers[0] + numbers[1];\n    }\n    function randomNumber(a, b) {\n      return Math.floor(Math.random() * b - a + 1);\n    }\n    for (let i = 0; i &lt; 100; i++) {\n      var randArr = [randomNumber(0, 1000),randomNumber(0, 100),randomNumber(0, 100),randomNumber(0, 100),randomNumber(0, 1000)];\n      assert.strictEqual(sumTwoSmallestNumbers(randArr.slice()), solution(randArr));\n    }\n  });\n});',38),(45,'36.296','javascript','describe(&quot;maskify&quot;, function(){\n  it(&quot;should work for some examples&quot;, function(){\n    Test.assertEquals(maskify(&#39;4556364607935616&#39;), &#39;############5616&#39;);\n    Test.assertEquals(maskify(&#39;1&#39;), &#39;1&#39;);\n    Test.assertEquals(maskify(&#39;11111&#39;), &#39;#1111&#39;);\n  });\n  it(&quot;should work for random examples&quot;, function(){\n    var i, t, solution = function(cc) {\n    		return cc.split(&#39;&#39;).reduce(function(p,c,i){\n    			return p.push(i &lt; cc.length - 4 ? &#39;#&#39; : c), p;\n    		}, []).join(&#39;&#39;);\n    }\n    for(i = 0; i &lt; 100; ++i){\n      t = Test.randomToken() + Test.randomToken() + Test.randomToken() + Test.randomToken();\n      t = t.substr(0, 1 + (Test.randomNumber() % t.length));\n      Test.assertEquals(maskify(t), solution(t));\n    }    \n  });\n});',39),(46,'27.021','javascript','describe(&quot;nbYear&quot;,function() {\nit(&quot;Basic tests&quot;,function() {    \n    Test.assertEquals(nbYear(1500, 5, 100, 5000), 15);\n    Test.assertEquals(nbYear(1500000, 2.5, 10000, 2000000), 10);\n    Test.assertEquals(nbYear(1500000, 0.25, 1000, 2000000), 94);\n    Test.assertEquals(nbYear(1500000, 0.25, -1000, 2000000), 151);\n    Test.assertEquals(nbYear(1500000, 0.25, 1, 2000000), 116);\n    Test.assertEquals(nbYear(1500000, 0.0, 10000, 2000000), 50);\n})})\n\ndescribe(&quot;Random tests&quot;,function() {\n\n    function randint(a, b) { \n        return Math.floor(Math.random() * (b - a + 1) + a); \n    }\n    \n    //................\n    function nbYear3443(p0, percent, aug, p) {\n        let i = 1;\n        let mult = 1 + percent / 100.0;\n        let prev = p0;\n        while (prev &lt; p) {\n            let ne = Math.floor(prev * mult + aug);\n            prev = ne\n            i++;\n        }\n        return (i - 1);\n    }\n    //................\n    \n    for (let i = 0; i &lt; 100; i++) {\n        let p0 = randint(10000, 15000000);\n        let percent = randint(50, 1000) / 100.0;\n        let aug = ~~(p0 / 200.0);\n        let k = randint(5, 100);\n        let p = p0 + k * aug;\n        it(&quot;Testing nbaCup: &quot;, function() {\n            Test.assertEquals(nbYear(p0, percent, aug, p), nbYear3443(p0, percent, aug, p));\n        }\n    )}\n})\n',40),(47,'25.816','javascript','const { assert } = require(&quot;chai&quot;)\n\ndescribe(&quot;Public tests&quot;, () =&gt; {\n  it(&quot;Testing for fixed tests&quot;, () =&gt; {\n    assert.strictEqual(isTriangle(1,2,2), true);\n    assert.strictEqual(isTriangle(7,2,2), false);\n  });\n\n  it(&quot;Test 1&quot;, () =&gt; {  \n     assert.strictEqual(isTriangle(1,2,3), false);\n     assert.strictEqual(isTriangle(1,3,2), false);\n     assert.strictEqual(isTriangle(3,1,2), false);\n      \n     assert.strictEqual(isTriangle(5,1,2), false);\n     assert.strictEqual(isTriangle(1,2,5), false);\n     assert.strictEqual(isTriangle(2,5,1), false);\n  });\n\n  it(&quot;Test 2&quot;, () =&gt; {\n     assert.strictEqual(isTriangle(4,2,3), true);\n     assert.strictEqual(isTriangle(5,1,5), true);\n     assert.strictEqual(isTriangle(2,2,2), true);\n  });\n\n  it(&quot;Test for negative values&quot;, function() {\n     assert.strictEqual(isTriangle(-1,2,3), false);\n     assert.strictEqual(isTriangle(1,-2,3), false);\n     assert.strictEqual(isTriangle(1,2,-3), false);       \n     assert.strictEqual(isTriangle(-5,1,3), false);\n     assert.strictEqual(isTriangle(0,2,3), false);\n  });\n})\n  \ndescribe(&quot;Random tests&quot;, () =&gt; {  \n    \n  function randint(min, max){\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n  \n  function sol(a, b, c){\n    return a+b &gt; c &amp;&amp; b+c &gt;a &amp;&amp; a+c &gt; b\n  }\n  \n  for(let i = 0; i &lt; 100; i++){\n    let arr = Array.from({length: 3}, (_, i) =&gt; randint(-2, 10))\n    let expected = sol(...arr.slice())\n    it(`isTriangle(${arr.join(&quot;,&quot;)}) should equal ${expected}`, () =&gt; {\n      assert.strictEqual(isTriangle(...arr.slice()), expected);\n    });\n  }\n})\n\n',41),(48,'23.418','javascript','describe(&quot;longest&quot;,function() {\nit(&quot;Basic tests&quot;,function() {\n    Test.assertEquals(longest(&quot;aretheyhere&quot;, &quot;yestheyarehere&quot;), &quot;aehrsty&quot;)\n    Test.assertEquals(longest(&quot;loopingisfunbutdangerous&quot;, &quot;lessdangerousthancoding&quot;), &quot;abcdefghilnoprstu&quot;)\n    Test.assertEquals(longest(&quot;inmanylanguages&quot;, &quot;theresapairoffunctions&quot;), &quot;acefghilmnoprstuy&quot;)\n    Test.assertEquals(longest(&quot;lordsofthefallen&quot;, &quot;gamekult&quot;), &quot;adefghklmnorstu&quot;)\n    Test.assertEquals(longest(&quot;codewars&quot;, &quot;codewars&quot;), &quot;acdeorsw&quot;)\n    Test.assertEquals(longest(&quot;agenerationmustconfrontthelooming&quot;, &quot;codewarrs&quot;), &quot;acdefghilmnorstuw&quot;)\n})})\n\ndescribe(&quot;Random tests&quot;,function() {\n\n    function randint(a, b) { \n        return Math.floor(Math.random() * (b - a + 1) + a); \n    }\n    function longestSol(s1, s2) {\n      let alpha_s1 = Array(27).join(1).split(&#39;&#39;).map(function(){return 0;});\n      let alpha_s2 = Array(27).join(1).split(&#39;&#39;).map(function(){return 0;});\n      let l1 = s1.length; let l2 = s2.length; let res = &quot;&quot;; \n      let i = 0; let c = 0;\n      for(i = 0; i &lt; l1; i++) {\n        c = s1.charCodeAt(i);\n        if (c &gt;= 97 &amp;&amp; c &lt;= 122)\n          alpha_s1[c - 97]++;\n      }\n      for(i = 0; i &lt; l2; i++) {\n        c = s2.charCodeAt(i);\n        if (c &gt;= 97 &amp;&amp; c &lt;= 122)\n          alpha_s2[c - 97]++;\n      }\n      for(i = 0; i &lt; 26; i++) {\n        if (alpha_s1[i] !== 0) {\n          res += String.fromCharCode(i + 97);\n          alpha_s2[i] = 0;\n        }\n      }\n      for(i = 0; i &lt; 26; i++) {\n        if (alpha_s2[i] !== 0)\n          res += String.fromCharCode(i + 97);\n      }\n      return res.split(&quot;&quot;).sort().join(&quot;&quot;);\n    }\n    //................\n    function doEx(k) {\n      let i = 0, res = &quot;&quot;;\n      while (i &lt; 15) {\n        let sm = String.fromCharCode(randint(97+k, 122));\n        for (let j = 0; j &lt; randint(1, 5); j++)\n            res += sm;\n        i++;\n      }\n      return res;\n    }    \n    //................\n    for (let i = 0; i &lt; 200; i++) {\n        let s1 = doEx(randint(0, 10));\n        let s2 = doEx(randint(0, 8));\n        it(&quot;Testing longest: &quot;, function() {\n            Test.assertEquals(longest(s1, s2), longestSol(s1, s2),&quot;It should work for random tests too&quot;)\n        }\n    )}\n})\n',42),(49,'33.597','javascript','describe(&quot;Tests&quot;, () =&gt; {\n  it(&quot;test&quot;, () =&gt; {\nTest.assertEquals(\n  JSON.stringify(moveZeros([1,2,0,1,0,1,0,3,0,1])),\n  JSON.stringify([ 1, 2, 1, 1, 3, 1, 0, 0, 0, 0 ])\n);\n\nTest.assertEquals(\n  JSON.stringify(moveZeros([9,0.0,0,9,1,2,0,1,0,1,0.0,3,0,1,9,0,0,0,0,9])),\n  JSON.stringify([9,9,1,2,1,1,3,1,9,9,0,0,0,0,0,0,0,0,0,0])\n);\n\nTest.assertEquals(\n  JSON.stringify(moveZeros([&quot;a&quot;,0,0,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,0,1,0,1,0,3,0,1,9,0,0,0,0,9])),\n  JSON.stringify([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,1,1,3,1,9,9,0,0,0,0,0,0,0,0,0,0])\n);\n  \nTest.assertEquals(\n  JSON.stringify(moveZeros([&quot;a&quot;,0,0,&quot;b&quot;,null,&quot;c&quot;,&quot;d&quot;,0,1,false,0,1,0,3,[],0,1,9,0,0,{},0,0,9])),\n  JSON.stringify([&quot;a&quot;,&quot;b&quot;,null,&quot;c&quot;,&quot;d&quot;,1,false,1,3,[],1,9,{},9,0,0,0,0,0,0,0,0,0,0])\n);\n\nTest.assertEquals(\n  JSON.stringify(moveZeros([0,1,null,2,false,1,0])),\n  JSON.stringify([1,null,2,false,1,0,0])\n);\n  });\n});\n',43),(50,'29.825','javascript','describe(&quot;Tests&quot;, () =&gt; {\n  it(&quot;test&quot;, () =&gt; {\nTest.assertEquals(pigIt(&#39;This is my string&#39;), &#39;hisTay siay ymay tringsay&#39;);\n\nlet base = [\n  [&#39;Acta est fabula&#39;, &#39;ctaAay steay abulafay&#39;],\n  [&#39;Barba non facit philosophum&#39;, &#39;arbaBay onnay acitfay hilosophumpay&#39;],\n  [&#39;Cucullus non facit monachum&#39;, &#39;ucullusCay onnay acitfay onachummay&#39;],\n  [&#39;Dura lex sed lex&#39;, &#39;uraDay exlay edsay exlay&#39;],\n  [&#39;Errare humanum est&#39;, &#39;rrareEay umanumhay steay&#39;],\n  [&#39;Fluctuat nec mergitur&#39;, &#39;luctuatFay ecnay ergiturmay&#39;],\n  [&#39;Gutta cavat lapidem&#39;, &#39;uttaGay avatcay apidemlay&#39;],\n  [&#39;Hic et nunc&#39;, &#39;icHay teay uncnay&#39;],\n  [&#39;In vino veritas&#39;, &#39;nIay inovay eritasvay&#39;],\n  [&#39;Lux in tenebris lucet&#39;, &#39;uxLay niay enebristay ucetlay&#39;],\n  [&#39;Morituri nolumus mori&#39;, &#39;orituriMay olumusnay orimay&#39;],\n  [&#39;Nunc est bibendum&#39;, &#39;uncNay steay ibendumbay&#39;],\n  [&#39;O tempora o mores !&#39;, &#39;Oay emporatay oay oresmay !&#39;],\n  [&#39;Panem et circenses&#39;, &#39;anemPay teay ircensescay&#39;],\n  [&#39;Quis custodiet ipsos custodes ?&#39;, &#39;uisQay ustodietcay psosiay ustodescay ?&#39;],\n  [&#39;Requiescat in pace&#39;, &#39;equiescatRay niay acepay&#39;],\n  [&#39;Sic transit gloria mundi&#39;, &#39;icSay ransittay loriagay undimay&#39;],\n  [&#39;Timeo Danaos et dona ferentes&#39;, &#39;imeoTay anaosDay teay onaday erentesfay&#39;],\n  [&#39;Ultima necat&#39;, &#39;ltimaUay ecatnay&#39;],\n  [&#39;Veni vidi vici&#39;, &#39;eniVay idivay icivay&#39;]\n];\n\nTest.randomize(base);\nfor (let [input, expected] of base)\n  Test.assertEquals(pigIt(input), expected);\n  });\n});\n',44),(51,'22.771','javascript','describe(&#39;tests&#39;, function() {\n  it(&#39;should format correctly&#39;, function() {\n    Test.assertEquals(humanReadable(0), &#39;00:00:00&#39;, &#39;humanReadable(0)&#39;);\n    Test.assertEquals(humanReadable(59), &#39;00:00:59&#39;, &#39;humanReadable(59)&#39;);\n    Test.assertEquals(humanReadable(60), &#39;00:01:00&#39;, &#39;humanReadable(60)&#39;);\n    Test.assertEquals(humanReadable(90), &#39;00:01:30&#39;, &#39;humanReadable(90)&#39;);\n    Test.assertEquals(humanReadable(3599), &#39;00:59:59&#39;, &#39;humanReadable(3599)&#39;);\n    Test.assertEquals(humanReadable(3600), &#39;01:00:00&#39;, &#39;humanReadable(3600)&#39;);\n    Test.assertEquals(humanReadable(45296), &#39;12:34:56&#39;, &#39;humanReadable(45296)&#39;);\n    Test.assertEquals(humanReadable(86399), &#39;23:59:59&#39;, &#39;humanReadable(86399)&#39;);\n    Test.assertEquals(humanReadable(86400), &#39;24:00:00&#39;, &#39;humanReadable(86400)&#39;);\n    Test.assertEquals(humanReadable(359999), &#39;99:59:59&#39;, &#39;humanReadable(359999)&#39;);\n  });\n});',45),(52,'23.703','javascript','Test.assertEquals(validParentheses( &quot;()()((()&quot; ), false);\nTest.assertEquals(validParentheses( &quot;()&quot; ), true);\nTest.assertEquals(validParentheses( &quot;()()&quot; ), true);\nTest.assertEquals(validParentheses( &quot;(())&quot; ), true);\nTest.assertEquals(validParentheses( &quot;)&quot; ), false);\nTest.assertEquals(validParentheses( &quot;&quot; ), true);\nTest.assertEquals(validParentheses( &quot;())&quot; ), false);\nTest.assertEquals(validParentheses( &quot;((((()))))&quot; ), true);\nTest.assertEquals(validParentheses( &quot;()))&quot; ), false);\nTest.assertEquals(validParentheses( &quot;()()()())&quot; ), false);\nTest.assertEquals(validParentheses( &quot;(()()()())(())&quot; ), true);\nTest.assertEquals(validParentheses( &quot;((((((((&quot; ), false);\nTest.assertEquals(validParentheses( &quot;(())((()((()))))&quot; ), true);\nTest.assertEquals(validParentheses( &quot;())(&quot; ), false);\nTest.assertEquals(validParentheses( &quot;)()()()(&quot; ), false);\nTest.assertEquals(validParentheses( &quot;(()()))(&quot; ), false);\nTest.assertEquals(validParentheses( &quot;)()(&quot; ), false);\nTest.assertEquals(validParentheses( &quot;())(()&quot; ), false);\nTest.assertEquals(validParentheses( &quot;())(()&quot; ), false);\n\nfunction validParenthesesReference(string){\n   var tokenizer = /[()]/g, // ignores characters in between; parentheses are\n       count = 0,           // pretty useless if they&#39;re not grouping *something*\n       token;\n   while(token = tokenizer.exec(string), token !== null){\n      if(token == &quot;(&quot;) {\n         count++;\n      } else if(token == &quot;)&quot;) {\n         count--;\n         if(count &lt; 0) {\n            return false;\n         }\n      }\n   }\n   return count == 0;\n}\n\nfunction generator() {\n  const len = randInt(1,20)*2\n  let brackets = &quot;&quot;\n  let rb=0\n  for (let i=0;i&lt;len;i++) \n    if (randInt(0,rb) == 0)  {\n      brackets += &quot;(&quot;\n      rb+=5\n    } else {\n      brackets += &quot;)&quot;\n      rb-=5\n    } \n  return [brackets]\n}\n\n\nfunction randInt(a, b) { return Math.random() * (b - a + 1) + a | 0 }\n\nfunction randomAssertSimilar(generator, userSolution, referenceSolution, tests){\n	tests = tests || 100;\n	var user, reference, values;\n	while( tests --&gt; 0){\n		values = generator();\n		reference = referenceSolution.apply(this, values);\n		user      = userSolution.apply(this,      values);\n		Test.assertEquals(user, reference, &quot;didn&#39;t work on the following argument array: &quot; + values);\n	}\n}\n\ndescribe(&quot;Random tests&quot;, function () {  \n  randomAssertSimilar(generator, validParentheses, validParenthesesReference);\n});\n\n',46),(53,'19.995','javascript','describe(&quot;Tests&quot;, () =&gt; {\n  it(&quot;Basic Tests&quot;, () =&gt; {\n    Test.assertEquals(rgb(0, 0, 0), &#39;000000&#39;)\n    Test.assertEquals(rgb(0, 0, -20), &#39;000000&#39;)\n    Test.assertEquals(rgb(300,255,255), &#39;FFFFFF&#39;)\n    Test.assertEquals(rgb(173,255,47), &#39;ADFF2F&#39;)\n  });\n\n\nfunction rgbReference(r, g, b){\n  function hex(n){\n    n = parseInt(n, 10)\n    if (isNaN(n)) return &quot;00&quot;\n    n = Math.max(0, Math.min(n, 255))\n    var chars = &quot;0123456789ABCDEF&quot;\n    return chars.charAt((n - n % 16) / 16) + chars.charAt(n % 16)\n  }  \n  \n  return hex(r) + hex(g) + hex(b)\n}\n\nfunction elevatorReference(left, right, call){\n   return (Math.abs(right-call)&lt;=Math.abs(left-call))? &#39;right&#39; : &#39;left&#39;;\n}\n\n\nfunction generator() {\n  var a = randInt(-5,300)\n  var b = randInt(-5,300)\n  var c = randInt(-5,300)\n  return [a,b,c]\n}\n\nfunction randInt(a, b) { return Math.random() * (b - a + 1) + a | 0 }\n\nfunction randomAssertSimilar(generator, userSolution, referenceSolution, tests){\n	tests = tests || 100;\n	var user, reference, values;\n	while( tests --&gt; 0){\n		values = generator();\n		reference = referenceSolution.apply(this, values);\n		user      = userSolution.apply(this,      values);\n		Test.assertEquals(user, reference, &quot;didn&#39;t work on the following argument array: &quot; + values);\n	}\n}\n\nit(&quot;Random Tests&quot;, function () {  \n  randomAssertSimilar(generator, rgb, rgbReference);\n});\n\n});',47),(54,'17.504','javascript','describe(&quot;Tests&quot;, () =&gt; {\n  it(&quot;test&quot;, () =&gt; {\nArray.prototype.compare = function (array) {\n  if (!array) return false;\n  if (this.length != array.length) return false;\n\n  for (let i = 0; i &lt; this.length; i++) {\n    if (this[i] instanceof Array &amp;&amp; array[i] instanceof Array) {\n      if (!this[i].compare(array[i]))\n        return false;\n    }\n    else if (this[i] != array[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction testAnagrams(word, result, wrong) {\n  let results = anagrams(word, result.concat(wrong).sort());\n  return results.sort().compare(result.sort());\n}\n\nlet word0, result0, wrong0;\nword0 = &#39;a&#39;;\nresult0 = [&#39;a&#39;];\nwrong0 = [&#39;b&#39;, &#39;c&#39;, &#39;d&#39;];\nTest.expect(testAnagrams(word0, result0, wrong0));\n\nlet word1, result1, wrong1;\nword1 = &#39;ab&#39;\nresult1 = [&#39;ab&#39;, &#39;ba&#39;];\nwrong1 = [&#39;aa&#39;, &#39;bb&#39;, &#39;cc&#39;, &#39;ac&#39;, &#39;bc&#39;, &#39;cd&#39;];\nTest.expect(testAnagrams(word1, result1, wrong1));\n\nlet word2, result2, wrong2;\nword2 = &#39;abba&#39;;\nresult2 = [&#39;aabb&#39;, &#39;bbaa&#39;, &#39;abab&#39;, &#39;baba&#39;, &#39;baab&#39;];\nwrong2 = [&#39;abcd&#39;, &#39;abbba&#39;, &#39;baaab&#39;, &#39;abbab&#39;, &#39;abbaa&#39;, &#39;babaa&#39;];\nTest.expect(testAnagrams(word2, result2, wrong2));\n\nlet word3, result3, wrong3;\nword3 = &#39;racer&#39;\nresult3 = [&#39;carer&#39;, &#39;arcre&#39;, &#39;carre&#39;]\nwrong3 = [&#39;racers&#39;, &#39;arceer&#39;, &#39;raccer&#39;, &#39;carrer&#39;, &#39;cerarr&#39;]\nTest.expect(testAnagrams(word2, result2, wrong2));\n\nlet word4, result4, wrong4;\nword4 = &#39;big&#39;\nresult4 = [];\nwrong4 = [&#39;gig&#39;, &#39;dib&#39;, &#39;bid&#39;, &#39;biig&#39;];\nTest.expect(testAnagrams(word4, result4, wrong4));\n  });\n});\n',48),(55,'16.381','javascript','a = [&quot;NORTH&quot;, &quot;SOUTH&quot;, &quot;SOUTH&quot;, &quot;EAST&quot;, &quot;WEST&quot;, &quot;NORTH&quot;, &quot;WEST&quot;]\nTest.assertSimilar(dirReduc(a), [&quot;WEST&quot;])\nb=[&quot;NORTH&quot;,&quot;SOUTH&quot;,&quot;SOUTH&quot;,&quot;EAST&quot;,&quot;WEST&quot;,&quot;NORTH&quot;]\nTest.assertSimilar(dirReduc(b), [])\nc = [&quot;NORTH&quot;,&quot;SOUTH&quot;,&quot;SOUTH&quot;,&quot;EAST&quot;,&quot;WEST&quot;,&quot;NORTH&quot;,&quot;NORTH&quot;]\nTest.assertSimilar(dirReduc(c), [&quot;NORTH&quot;])\nu = [&quot;EAST&quot;, &quot;EAST&quot;, &quot;WEST&quot;, &quot;NORTH&quot;, &quot;WEST&quot;, &quot;EAST&quot;, &quot;EAST&quot;, &quot;SOUTH&quot;, &quot;NORTH&quot;, &quot;WEST&quot;]\nTest.assertSimilar(dirReduc(u), [&quot;EAST&quot;, &quot;NORTH&quot;])\nv = [&quot;NORTH&quot;, &quot;EAST&quot;, &quot;NORTH&quot;, &quot;EAST&quot;, &quot;WEST&quot;, &quot;WEST&quot;, &quot;EAST&quot;, &quot;EAST&quot;, &quot;WEST&quot;, &quot;SOUTH&quot;]\nTest.assertSimilar(dirReduc(v), [&quot;NORTH&quot;, &quot;EAST&quot;])\nu=[&quot;NORTH&quot;, &quot;WEST&quot;, &quot;SOUTH&quot;, &quot;EAST&quot;]\nTest.assertSimilar(dirReduc(u), [&quot;NORTH&quot;, &quot;WEST&quot;, &quot;SOUTH&quot;, &quot;EAST&quot;])\n\n\ndescribe( &quot;More tests : . . . &quot;, function(){\n  let rr = [[&quot;NORTH&quot;,&quot;EAST&quot;],[&quot;EAST&quot;,&quot;SOUTH&quot;],[&quot;SOUTH&quot;,&quot;WEST&quot;],[&quot;WEST&quot;,&quot;NORTH&quot;],[&quot;NORTH&quot;,&quot;NORTH&quot;,&quot;NORTH&quot;]];\n  \n  Test.randomize(rr).forEach(function(res){\n      let aa = [&quot;NORTH&quot;,&quot;SOUTH&quot;], bb = [&quot;EAST&quot;,&quot;WEST&quot;];\n      let rnd = function(){ return ~~(Math.random()*2)};\n      let u = res.slice(0);\n      \n      for( let x=0, z=2+rnd(); x&lt;z; x++ ){\n        let a = rnd(), b = rnd();\n        if( x%2 ){\n          u.push(aa[a]);u.push(aa[(a+1)%2]);\n          u.unshift(bb[b]);u.unshift(bb[(b+1)%2]);\n        }else{\n          u.push(bb[b]);u.push(bb[(b+1)%2]);\n          u.unshift(aa[a]);u.unshift(aa[(a+1)%2]);\n        }\n      }\n      \n      console.log(Test.inspect(u));\n      Test.assertSimilar(dirReduc(u),res);\n    });\n    \n})',49),(56,'13.219','javascript','describe(&quot;Rot13&quot;, function(){\n  it(&quot;test&quot;, function(){\n    Test.expect(&quot;grfg&quot; == rot13(&quot;test&quot;), &quot;Input: test , Expected Output: grfg , Actual Output: &quot; + rot13(&quot;test&quot;))\n  })    \n  it(&quot;Test&quot;, function(){\n    Test.expect(&quot;Grfg&quot; == rot13(&quot;Test&quot;), &quot;Input: Test , Expected Output: Grfg , Actual Output: &quot; + rot13(&quot;Test&quot;))    \n  })    \n  it(&quot;Codewars&quot;, function(){\n        Test.expect(&quot;Pbqrjnef&quot; == rot13(&quot;Codewars&quot;), &quot;Input: Codewars , Expected Output: Pbqrjnef , Actual Output: &quot; + rot13(&quot;Codewars&quot;))\n  })\n  it(&quot;Ruby is cool!&quot;, function(){\n        Test.expect(&quot;Ehol vf pbby!&quot; == rot13(&quot;Ruby is cool!&quot;), &quot;Input: Ruby is cool! , Expected Output: Ehol vf pbby! , Actual Output: &quot; + rot13(&quot;Ruby is cool!&quot;))\n  })\n  it(&quot;10+2 is twelve.&quot;, function(){\n        Test.expect(&quot;10+2 vf gjryir.&quot; == rot13(&quot;10+2 is twelve.&quot;), &quot;Input: 10+2 is twelve. , Expected Output: 10+2 vf gjryir. , Actual Output: &quot; + rot13(&quot;10+2 is twelve.&quot;))\n  })\n  it(&quot;abcdefghijklmnopqrstuvwxyz&quot;, function(){\n        Test.expect(&quot;nopqrstuvwxyzabcdefghijklm&quot; == rot13(&quot;abcdefghijklmnopqrstuvwxyz&quot;), &quot;Input: abcdefghijklmnopqrstuvwxyz , Expected Output: nopqrstuvwxyzabcdefghijklm , Actual Output: &quot; + rot13(&quot;abcdefghijklmnopqrstuvwxyz&quot;))\n  })\n    \nfunction solutionFunction(message){\n  res=&quot;&quot;;\n  for (i in message){\n    n=message[i].charCodeAt(0);\n    res+=(97&lt;=n &amp;&amp; n&lt;=122) ? String.fromCharCode((n-97+13)%26+97) : (65&lt;=n &amp;&amp; n&lt;=90) ? String.fromCharCode((n-65+13)%26+65) : String.fromCharCode(n);\n  }\n  return res;\n}\n\n  it(&quot;Random Strings&quot;, function(){\n        for (k=0;k&lt;5;k++){\n            random = Test.randomToken()\n            solution = solutionFunction(random)\n            test = rot13(random)\n            Test.expect(solution == test, &quot;Input: &quot; + random + &quot; , Expected Output: &quot; + solution + &quot; , Actual Output: &quot; + test)\n        }\n  })\n})',50),(57,'12.497','javascript','describe( &quot;maxSequence&quot;, function(){\n  it(&quot;should work on an empty array&quot;,function(){\n    Test.assertEquals(maxSequence([]), 0);\n  });\n  it(&quot;should work on the example&quot;,function(){\n    Test.assertEquals(maxSequence([-2, 1, -3, 4, -1, 2, 1, -5, 4]), 6);\n  });\n  it(&quot;should work on the example with negative numbers&quot;, function() {\n    Test.assertEquals(maxSequence([-2, -1, -3, -4, -1, -2, -1, -5, -4]), 0);\n  });\n  it(&quot;should work on this too&quot;, function() {  \n    Test.assertEquals(maxSequence([ 7, 4, 11, -11, 39, 36, 10, -6, 37, -10, -32, 44, -26, -34, 43, 43 ]), 155);\n  });\n  it(&quot;should work on random arrays&quot;, function(){\n    var solution = function(arr){\n      var i, j, k = 0, r;\n      for(i = 0; i &lt; arr.length; ++i){    \n        for(r = 0, j = i; j &lt; arr.length; ++j){\n          r += arr[j];\n          k = k &gt; r ? k : r;\n        }\n      }\n      return k;\n    }, randomArray = function(n){\n      var res = [];\n      while( n --&gt; 0 ) res.push(Math.round(Math.random() * 100 - 50));\n      return res;\n    }, r, i;\n    for(i = 0; i &lt; 50; ++i){\n      r = randomArray(Math.random() * 70);\n      Test.assertEquals(maxSequence([...r]), solution(r));\n    }\n  });\n});',51),(58,'24.722','javascript','describe(&#39;static example calculations&#39;, function() {\n  Test.assertEquals(seven(times(five())), 35);\n  Test.assertEquals(four(plus(nine())), 13);\n  Test.assertEquals(eight(minus(three())), 5);\n  Test.assertEquals(six(dividedBy(two())), 3);\n});\n\ndescribe(&#39;random calculations&#39;, function() {\n  let numbers = [&#39;zero&#39;, &#39;one&#39;, &#39;two&#39;, &#39;three&#39;, &#39;four&#39;, &#39;five&#39;, &#39;six&#39;, &#39;seven&#39;, &#39;eight&#39;, &#39;nine&#39;];\n\n  it(&#39;add&#39;, function() {\n    for (let i=0; i&lt;50; i++) {\n      let num1 = Test.sample(numbers);\n      let num2 = Test.sample(numbers);\n      Test.assertEquals(eval(num1 + &#39;(plus(&#39; + num2 + &#39;()))&#39;), numbers.indexOf(num1) + numbers.indexOf(num2), &#39;Wrong result for &#39; + num1 + &#39; + &#39; + num2);\n    }\n  });\n  \n  it(&#39;subtract&#39;, function() {\n    for (let i=0; i&lt;50; i++) {\n      let num1 = Test.sample(numbers);\n      let num2 = Test.sample(numbers);\n      Test.assertEquals(eval(num1 + &#39;(minus(&#39; + num2 + &#39;()))&#39;), numbers.indexOf(num1) - numbers.indexOf(num2), &#39;Wrong result for &#39; + num1 + &#39; - &#39; + num2);\n    }\n  });\n  \n  it(&#39;multiply&#39;, function() {\n    for (let i=0; i&lt;50; i++) {\n      let num1 = Test.sample(numbers);\n      let num2 = Test.sample(numbers);\n      Test.assertEquals(eval(num1 + &#39;(times(&#39; + num2 + &#39;()))&#39;), numbers.indexOf(num1) * numbers.indexOf(num2), &#39;Wrong result for &#39; + num1 + &#39; * &#39; + num2);\n    }\n  });\n  \n  it(&#39;divide&#39;, function() {\n    for (let i=0; i&lt;50; i++) {\n      let num1 = Test.sample(numbers);\n      let num2 = Test.sample(numbers.slice(1));\n      Test.assertSimilar(eval(num1 + &#39;(dividedBy(&#39; + num2 + &#39;()))&#39;), numbers.indexOf(num1) / numbers.indexOf(num2)|0, &#39;Wrong result for &#39; + num1 + &#39; / &#39; + num2);\n    }\n  });\n});',52),(59,'8.698','javascript','describe(&quot;Basic tests (user examples)&quot;, function(){\n  Test.assertSimilar(productFib(4895), [55, 89, true])\n  Test.assertSimilar(productFib(5895), [89, 144, false])\n  Test.assertSimilar(productFib(74049690), [6765, 10946, true])\n  Test.assertSimilar(productFib(84049690), [10946, 17711, false])\n  Test.assertSimilar(productFib(193864606), [10946, 17711, true])\n  Test.assertSimilar(productFib(447577), [610, 987, false])\n  Test.assertSimilar(productFib(602070), [610, 987, true])\n});\n\ndescribe(&quot;Some random tests&quot;,function(){\n \n var someFibs = [55,89,144,233,377,610,987,1597,2584,4181,6765,\n     10946,17711,28657,46368,75025,121393,196418,317811,514229,\n     832040,1346269,2178309,3524578,5702887,9227465,14930352,\n     24157817,39088169,63245986];\n     \n  Test.randomize([1,2,3,4,5,6,7,8,9,10]).forEach(function(r){\n    var ok=!!(r%2), i = ~~(Math.random()*(someFibs.length-1)), \n        f0=someFibs[i], f1=someFibs[i+1],\n        prod=f0*f1 - (!ok ? f1 : 0);\n    console.log(&quot;search for &quot;+prod)        \n    Test.assertSimilar(productFib(prod), [f0,f1,ok])\n  })\n\n});\n',53),(60,'13.945','javascript','describe(&quot;Tests&quot;, () =&gt; {\n  it(&quot;test&quot;, () =&gt; {\nTest.assertEquals(generateHashtag(&quot;&quot;), false, &quot;Expected an empty string to return false&quot;)\nTest.assertEquals(generateHashtag(&quot; &quot;.repeat(200)), false, &quot;Still an empty string&quot;)\nTest.assertEquals(generateHashtag(&quot;Do We have A Hashtag&quot;), &quot;#DoWeHaveAHashtag&quot;, &quot;Expected a Hashtag (#) at the beginning.&quot;)\nTest.assertEquals(generateHashtag(&quot;Codewars&quot;), &quot;#Codewars&quot;, &quot;Should handle a single word.&quot;)\nTest.assertEquals(generateHashtag(&quot;Codewars Is Nice&quot;), &quot;#CodewarsIsNice&quot;, &quot;Should remove spaces.&quot;)\nTest.assertEquals(generateHashtag(&quot;Codewars is nice&quot;), &quot;#CodewarsIsNice&quot;, &quot;Should capitalize first letters of words.&quot;)\nTest.assertEquals(generateHashtag(&quot;code&quot; + &quot; &quot;.repeat(140) + &quot;wars&quot;), &quot;#CodeWars&quot;)\nTest.assertEquals(generateHashtag(&quot;Looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong Cat&quot;), false, &quot;Should return false if the final word is longer than 140 chars.&quot;)\nTest.assertEquals(generateHashtag(&quot;a&quot;.repeat(139)), &quot;#A&quot; + &quot;a&quot;.repeat(138), &quot;Should work&quot;)\nTest.assertEquals(generateHashtag(&quot;a&quot;.repeat(140)), false, &quot;Too long&quot;)\n  });\n});\n',54);
/*!40000 ALTER TABLE `kata_language_entity` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `solution_entity`
--

DROP TABLE IF EXISTS `solution_entity`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `solution_entity` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `bestPractices` text NOT NULL,
  `clever` text NOT NULL,
  `code` text NOT NULL,
  `kataLanguageEntityId` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FK_4fb1e68db2734b3011d683859f5` (`kataLanguageEntityId`),
  CONSTRAINT `FK_4fb1e68db2734b3011d683859f5` FOREIGN KEY (`kataLanguageEntityId`) REFERENCES `kata_language_entity` (`id`) ON DELETE CASCADE ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=601 DEFAULT CHARSET=utf8mb4;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `solution_entity`
--

LOCK TABLES `solution_entity` WRITE;
/*!40000 ALTER TABLE `solution_entity` DISABLE KEYS */;
INSERT INTO `solution_entity` VALUES (71,'300','1062','function duplicateCount(text){\n  return (text.toLowerCase().split(&#39;&#39;).sort().join(&#39;&#39;).match(/([^])\\1+/g) || []).length;\n}',8),(72,'139','272','function duplicateCount(text){\n  return text.toLowerCase().split(&#39;&#39;).filter(function(val, i, arr){\n    return arr.indexOf(val) !== i &amp;&amp; arr.lastIndexOf(val) === i;\n  }).length;\n}',8),(73,'70','15','function duplicateCount(text){\n  var lower = text.toLowerCase();\n  var count = 0;\n  var used = [];\n\n  lower.split(&#39;&#39;).forEach(function(letter) {\n    if (!used.includes(letter) &amp;&amp; (lower.split(letter).length - 1) &gt; 1) {\n      count++;\n      used.push(letter);\n    }\n  });\n\n  return count;\n}',8),(74,'32','9','function duplicateCount(text){\n\n  var input = text.toLowerCase().split(&#39;&#39;);\n\n  var obj = {};\n\n  for( var i in input) {\n\n  	if(!obj[ input[i] ]){\n\n  		obj[ input[i] ] = 1;\n\n  	} else{\n  		obj[ input[i] ] += 1;\n  	}\n  }\n\n  var result = 0;\n\n  for( var prop in obj) {\n\n    if(obj[prop] &gt; 1){\n  	 result++;\n    }\n  }\n\n  return result;\n\n}',8),(75,'22','53','function duplicateCount(text){\n  return text\n      .toLowerCase()\n      .split(&#39;&#39;)\n      .reduce(function(a, l) {\n        a[l] = a[l] ? a[l]+1 : 1;\n        if(a[l] === 2) a.count++;\n        return a;\n      }, {count:0}).count;\n}',8),(76,'16','23','function duplicateCount(text){\n  var count = text.toLowerCase().split(&#39;&#39;).reduce((accum, curr) =&gt; {\n    accum[curr] ? accum[curr] += 1 : accum[curr] = 1;\n    return accum;\n  }, {});\n  return Object.keys(count).filter(key =&gt; count[key] &gt; 1).length;\n}',8),(77,'13','14','function duplicateCount(text) {\n  var dup = [];\n  text.toLowerCase().split(&#39;&#39;).forEach(function(v, i, arr) {if(i != arr.lastIndexOf(v) &amp;&amp; dup.indexOf(v) == -1) dup.push(v);});\n  return dup.length;\n}',8),(78,'9','58','function duplicateCount(text){\n  return new Set(text.toLowerCase().match(/(.)(?=.*\\1)/gi)).size\n}',8),(79,'9','26','const _ = require(&#39;lodash&#39;);\n\nfunction duplicateCount(text) {\n  return _(text).countBy(_.toUpper).values().map(x =&gt; x &gt; 1).sum();\n}',8),(80,'5','33','const duplicateCount = (text) =&gt; (text.match(/(\\w)(?=(?!.*\\1.*\\1).*\\1)/gi) || []).length;',8),(81,'1013','185','function solution(number){\n  var sum = 0;\n  \n  for(var i = 1;i&lt; number; i++){\n    if(i % 3 == 0 || i % 5 == 0){\n      sum += i\n    }\n  }\n  return sum;\n}',9),(82,'63','526','function solution(number){\n  var n3 = Math.floor(--number/3), n5 = Math.floor(number/5), n15 = Math.floor(number/15);\n  return (3 * n3 * (n3 + 1) + 5 * n5 * (n5 + 1) - 15 * n15 * (n15+1)) /2;\n}',9),(83,'60','16','function solution(number){\n  var sum = 0;\n  for (var i = 3; i &lt; number; i++) {\n    if (i % 3 == 0 || i % 5 == 0) {\n      sum += i;\n    }\n  }\n  return sum;\n}',9),(84,'35','80','solution= n=&gt; n&lt;=0?0:Array.from({length: n}, (_,i) =&gt; (i%3==0||i%5==0)?i:0).reduce((x,y)=&gt;x+y)',9),(85,'26','69','function solution(number){\n  return number &lt; 1 ? 0 : [...new Array(number).keys()].filter(n =&gt; n % 3 == 0 || n % 5 == 0).reduce((a, b) =&gt; a + b);\n}',9),(86,'25','5','function solution(number){\n  sum = 0\n  for (i = 3; i &lt; number; i++) {\n    if (i % 3 == 0 || i % 5 == 0) {\n      sum += i;\n    }\n  }\n  return sum;\n}',9),(87,'21','48','function solution(number){\n  number = number-1;\n  var numFive = Math.floor(number/5);\n  var numThree = Math.floor(number/3);\n  var numFifteen = Math.floor(number/15);\n  \n  return SAS(numFive, 5, 5*numFive) + SAS(numThree, 3, 3*numThree) - SAS(numFifteen, 15, 15*numFifteen);\n}\n\n//sumArithmeticSequence\nvar SAS = function(n, start, end){\n  return n*(start+end)/2;\n}',9),(88,'16','35','solution = n =&gt; {\n  let s = 0;\n  for (let i = 0; i &lt; n; i++) s += i % 3 ? i % 5 ? 0 : i : i;\n  return s;\n}',9),(89,'9','37','function solution(number){\n  return number &lt; 3 ? 0\n   : [...Array(number).keys()]\n    .map(int =&gt; (int % 3 === 0 || int % 5 === 0) ? int : 0 )\n    .reduce((a, b) =&gt; a + b )\n\n}',9),(90,'6','56','function solution(number){\n  for(acc=0; --number &gt; 2;){\n    acc = !(number%3) || !(number%5) ? acc + number : acc;\n  }\n  return acc;\n}',9),(91,'385','1589','const findOdd = (xs) =&gt; xs.reduce((a, b) =&gt; a ^ b);',10),(92,'243','70','function findOdd(A) {\n  var obj = {};\n  A.forEach(function(el){\n    obj[el] ? obj[el]++ : obj[el] = 1;\n  });\n  \n  for(prop in obj) {\n    if(obj[prop] % 2 !== 0) return Number(prop);\n  }\n}',10),(93,'50','285','function findOdd(A) {\n  return A.reduce(function(c,v){return c^v;},0);\n}',10),(94,'39','20','function findOdd(arr) {\n  var result, num = 0;\n\n  arr = arr.sort();\n  for (var i = 0; i &lt; arr.length; i++) {\n    if (arr[i] === arr[i+1]) {\n      num++;\n    } else {\n      num++;\n      if (num % 2 != 0) {\n        result = arr[i];\n        break;\n      }\n    }\n  }\n  return result;\n}',10),(95,'37','46','function findOdd(arr) {\n  return arr.find((item, index) =&gt; arr.filter(el =&gt; el == item).length % 2)\n}',10),(96,'14','8','function findOdd(A) {\n  for(var i = 0; i &lt; A.length; i++){  \n    //Query the number of times that this &#39;i&#39; element appears\n    //then verify if that number of times is odd. If it is true, then return\n    //that &#39;i&#39; element\n    if((A.filter(function(item){return item == A[i]; })).length % 2 != 0){\n      return A[i];\n    }\n  }\n  return 0;\n}',10),(97,'12','32','function findOdd(A) {\n  var trace = {};\n  A.forEach(function(x) {\n    if (trace[x]) delete trace[x];\n    else trace[x] = true;\n  });\n  return parseInt(Object.keys(trace)[0]);\n}',10),(98,'11','25','// Cool one liner using ES6\nconst findOdd = A =&gt; A.filter(x =&gt; A.filter(v =&gt; x === v).length % 2 === 1).reduce(a =&gt; a);',10),(99,'10','11','function findOdd(A) {\n  //happy coding!\n  var x = 0;\n  for (var i = 0; i &lt; A.length; i++) {\n    x = x ^ A[i];\n  }\n  return x;\n}',10),(100,'6','10','const findOdd = arr =&gt; arr.reduce(\n  (pv, cv) =&gt; arr.filter(inv =&gt; inv === cv).length % 2 === 1 ? cv : pv);',10),(111,'689','2286','function digital_root(n) {\n  return (n - 1) % 9 + 1;\n}',12),(112,'170','104','function digital_root(n) {\n  if (n &lt; 10) return n;\n  \n  return digital_root(\n    n.toString().split(&#39;&#39;).reduce(function(acc, d) { return acc + +d; }, 0));\n}',12),(113,'52','21','function digital_root(n) {\n  if (n &lt; 10)\n    return n;\n\n  for (var sum = 0, i = 0, n = String(n); i &lt; n.length; i++)\n    sum += Number(n[i]);\n   \n  return digital_root(sum);\n}',12),(114,'27','54','function digital_root(n){\n    n = eval(n.toString().split(&#39;&#39;).join(&#39;+&#39;));\n\n    if (n &gt; 9) {\n        return digital_root(n);\n    }\n\n    return n;\n}',12),(115,'14','12','function digital_root(n) {\n  if (n &lt; 10) return n\n  return digital_root(n % 10 + digital_root(Math.floor(n / 10)))\n}',12),(116,'9','60','function digital_root(n) {\n  return--n%9+1;\n}',12),(117,'8','4','function digital_root(n) {\n  // ...\n  var output = []\n  var s_number = n.toString();\n\nfor (var i = 0, len = s_number.length; i &lt; len; i += 1) {\n    output.push(+s_number.charAt(i));\n}\n  if (output.length === 1) {\n    return output[0]\n  }\n\n  for (var i = 0, sum = 0; i &lt; output.length; sum += output[i++]);\n  \n\n  return digital_root(sum)\n}',12),(118,'7','11','function digital_root(n) {\n  while (n &gt; 9) { n = (&#39;&#39;+n).split(&#39;&#39;).reduce(function(s,d) {return +s + +d;}); }\n  return n;\n}',12),(119,'7','1','function digital_root(n) {\n	let finalSum = 10, tempSum = 0;\n  while (finalSum &gt; 9) {\n		while (n &gt; 9) {\n			tempSum += n%10;\n			n = parseInt(n/10);\n		}\n    tempSum += n;\n    finalSum = tempSum;\n    n = finalSum;\n    tempSum = 0;\n	}\n  return finalSum;\n}',12),(120,'6','6','function digital_root(n) {\n  if(n &lt; 10) {\n    return n;\n  }\n  n = n.toString().split(&quot;&quot;);\n  var result = 0;\n  for(var i = 0; i &lt; n.length; i++) {\n    result += parseInt(n[i]);\n  }\n  return result &lt; 10 ? result : digital_root(result);\n}',12),(121,'927','438','function spinWords(words){\n  return words.split(&#39; &#39;).map(function (word) {\n    return (word.length &gt; 4) ? word.split(&#39;&#39;).reverse().join(&#39;&#39;) : word;\n  }).join(&#39; &#39;);\n}',13),(122,'195','952','function spinWords(string){\n  return string.replace(/\\w{5,}/g, function(w) { return w.split(&#39;&#39;).reverse().join(&#39;&#39;) })\n}',13),(123,'69','62','function spinWords(str){\n  return str.split(&#39; &#39;).map( w =&gt; w.length&lt;5 ? w : w.split(&#39;&#39;).reverse().join(&#39;&#39;) ).join(&#39; &#39;);\n}',13),(124,'49','8','function spinWords(str){\n  return str.split(&#39; &#39;).map(spinSingleWord).join(&#39; &#39;);\n}\n\nfunction spinSingleWord(word){\n  return word.length&gt;4 ? word.split(&#39;&#39;).reverse().join(&#39;&#39;) : word;\n}',13),(125,'33','11','function spinWords(str) {\n  let strArr = str.split(&#39; &#39;);\n  for (let i = 0; i &lt; strArr.length; i++) {\n    if (strArr[i].length &gt;= 5)\n      strArr[i] = strArr[i].split(&#39;&#39;).reverse().join(&#39;&#39;);\n  }\n  return strArr.join(&#39; &#39;);\n}',13),(126,'16','7','function spinWords(str){\n  wordsArray = str.split(&#39; &#39;);\n  wordsArray.forEach(function(word, index){\n    if (word.length &gt; 4) {\n      wordsArray[index] = word.split(&#39;&#39;).reverse().join(&#39;&#39;);\n    }\n  });\n  return wordsArray.join(&#39; &#39;);\n}',13),(127,'13','4','function spinWords(words){\n  return words.split(&#39; &#39;).map(w =&gt; w.length &lt; 5 ? w : w.split(&#39;&#39;).reverse().join(&#39;&#39;)).join(&#39; &#39;);\n}',13),(128,'11','45','function spinWords(str){\n  return str.replace(/\\w{5,}/g, function(w) {\n    return w.split(&#39;&#39;).reverse().join(&#39;&#39;);\n  });\n}',13),(129,'7','1','function spinWords(str){\n  return str.split(&#39; &#39;)\n    .map(word =&gt; word.length &gt;= 5 ? word.split(&#39;&#39;).reverse().join(&#39;&#39;) : word)\n    .join(&#39; &#39;);\n}',13),(130,'5','5','function spinWords(str){\n				var _split = str.split(&quot; &quot;),\n					_arr = [];\n				for (var i = 0, len = _split.length; i &lt; len; i++){\n					var _str = _split[i],\n						_ns = &#39;&#39;,\n						_len = _str.length;\n					if(_len &gt;= 5){\n						while(_len &gt; 0){\n							_ns += _str[_len-1]\n							_len --;\n						}\n						_str = _ns;\n					}\n					_arr.push(_str);\n				}\n				\n				return _arr.join(&#39; &#39;);\n			}',13),(131,'1025','237','function likes(names) {\n  names = names || [];\n  switch(names.length){\n    case 0: return &#39;no one likes this&#39;; break;\n    case 1: return names[0] + &#39; likes this&#39;; break;\n    case 2: return names[0] + &#39; and &#39; + names[1] + &#39; like this&#39;; break;\n    case 3: return names[0] + &#39;, &#39; + names[1] + &#39; and &#39; + names[2] + &#39; like this&#39;; break;\n    default: return names[0] + &#39;, &#39; + names[1] + &#39; and &#39; + (names.length - 2) + &#39; others like this&#39;;\n  }\n}',14),(132,'216','775','function likes(names) {\n  return {\n    0: &#39;no one likes this&#39;,\n    1: `${names[0]} likes this`, \n    2: `${names[0]} and ${names[1]} like this`, \n    3: `${names[0]}, ${names[1]} and ${names[2]} like this`, \n    4: `${names[0]}, ${names[1]} and ${names.length - 2} others like this`, \n  }[Math.min(4, names.length)]\n}',14),(133,'191','1044','function likes (names) {\n  var templates = [\n    &#39;no one likes this&#39;,\n    &#39;{name} likes this&#39;,\n    &#39;{name} and {name} like this&#39;,\n    &#39;{name}, {name} and {name} like this&#39;,\n    &#39;{name}, {name} and {n} others like this&#39;\n  ];\n  var idx = Math.min(names.length, 4);\n  \n  return templates[idx].replace(/{name}|{n}/g, function (val) {\n    return val === &#39;{name}&#39; ? names.shift() : names.length;\n  });\n}',14),(134,'70','24','function likes(names) {\n  if(names.length === 0) return &quot;no one likes this&quot;;\n  if(names.length === 1) return names[0] + &quot; likes this&quot;;\n  if(names.length === 2) return names[0] + &quot; and &quot; + names[1] + &quot; like this&quot;;\n  if(names.length === 3) return names[0] + &quot;, &quot; + names[1] + &quot; and &quot; + names[2] + &quot; like this&quot;;\n  return names[0] + &quot;, &quot; + names[1] + &quot; and &quot; + (names.length - 2) + &quot; others like this&quot;;\n}',14),(135,'57','19','function likes(names) {\n  switch(names.length){\n    case 0:\n      return &quot;no one likes this&quot;;\n    case 1:\n      return names[0] + &quot; likes this&quot;;\n    case 2:\n      return names[0] + &quot; and &quot; + names[1] + &quot; like this&quot;;\n    case 3:\n      return names[0] + &quot;, &quot; + names[1] + &quot; and &quot; + names[2] + &quot; like this&quot;;\n    default: \n      return names[0] + &quot;, &quot; + names[1] + &quot; and &quot; + (names.length-2) + &quot; others like this&quot;;\n  }\n}',14),(136,'54','122','function likes(names) {\n  names.length === 0 &amp;&amp; (names = [&quot;no one&quot;]);\n  let [a, b, c, ...others] = names;\n  switch (names.length) {\n    case 1: return `${a} likes this`;\n    case 2: return `${a} and ${b} like this`;\n    case 3: return `${a}, ${b} and ${c} like this`;\n    default: return `${a}, ${b} and ${others.length + 1} others like this`;\n  }\n}',14),(137,'48','171','function likes(peopleNames) {\n  var feels = new FeelingsParty(&#39;like&#39;, &#39;this&#39;);\n  for(var name in peopleNames) feels.addFeeler(new Person(peopleNames[name]));\n  return feels.shareTheseFeelings();\n}\n\nfunction Person(name) {\n this.name = name;\n}\n\nPerson.prototype.getName = function() {\n  return this.name;\n}\n\nfunction FeelingsParty(emotion, target) {\n this.emotionalContext = emotion;\n this.emotionalSubject = target;\n this.peopleFeelingThisWay = [];\n this.numPeopleFeelingThisWay = 0;\n}\n\nFeelingsParty.prototype.getEmotionalContext = function() {\n return this.type;\n}\n\nFeelingsParty.prototype.addFeeler = function(person) {\n    this.numPeopleFeelingThisWay++;\n    this.peopleFeelingThisWay.push(person);\n}\n\nFeelingsParty.prototype.shareTheseFeelings = function() {\n    this.findTheRightWords();\n    if(this.numPeopleFeelingThisWay == 0) return &#39;no one &#39; + this.emotionalContext + &#39; &#39; + this.emotionalSubject;\n    if(this.numPeopleFeelingThisWay == 1) return &#39;&#39; + this.peopleFeelingThisWay[0].getName() + &#39; &#39; + this.emotionalContext + &#39; &#39; + this.emotionalSubject;\n    if(this.numPeopleFeelingThisWay == 2) return &#39;&#39; + this.peopleFeelingThisWay[0].getName() + &#39; and &#39; + this.peopleFeelingThisWay[1].getName() + &#39; &#39; + this.emotionalContext +  &#39; &#39; + this.emotionalSubject;\n    if(this.numPeopleFeelingThisWay == 3) return &#39;&#39; + this.peopleFeelingThisWay[0].getName() + &#39;, &#39; + this.peopleFeelingThisWay[1].getName() + &#39; and &#39; + this.peopleFeelingThisWay[2].getName() + &#39; &#39; + this.emotionalContext +  &#39; &#39; + this.emotionalSubject;\n    return &#39;&#39; + this.peopleFeelingThisWay[0].getName() + &#39;, &#39; + this.peopleFeelingThisWay[1].getName() + &#39; and &#39; + (this.numPeopleFeelingThisWay - 2) + &#39; others &#39; + this.emotionalContext + &#39; &#39; + this.emotionalSubject;\n}\n\nFeelingsParty.prototype.findTheRightWords = function() {\n    if(this.numPeopleFeelingThisWay == 0 || this.numPeopleFeelingThisWay == 1) this.emotionalContext += &#39;s&#39;;\n}',14),(138,'25','2','function likes(names) {\n  switch(names.length){\n    case 0:\n      return `no one likes this`;\n    case 1: \n      return `${names[0]} likes this`;\n    case 2: \n      return `${names[0]} and ${names[1]} like this`;\n    case 3: \n      return `${names[0]}, ${names[1]} and ${names[2]} like this`;\n    default: \n      return `${names[0]}, ${names[1]} and ${names.length - 2} others like this`;\n  }\n}',14),(139,'12','36','function likes (names) {\n  var format = {\n    0: &quot;no one likes this&quot;,\n    1: &quot;{0} likes this&quot;,\n    2: &quot;{0} and {1} like this&quot;,\n    3: &quot;{0}, {1} and {2} like this&quot;\n  }[names.length] || &quot;{0}, {1} and {n} others like this&quot;;\n  \n  return format.replace(/{([\\dn])}/g, function (_, n) {\n    return n == &#39;n&#39; ? names.splice(2).length : names[parseInt(n, 10)];\n  });\n}',14),(140,'11','12','function likes(names) {\n    switch (names.length){\n        case 1: return names[0] + &#39; likes this&#39;;\n        case 2: return names[0] + &#39; and &#39; + names[1] + &#39; like this&#39;;\n        case 3: return names[0] + &#39;, &#39; + names[1] + &#39; and &#39; + names[2] + &#39; like this&#39;;\n        default: return names.length &gt; 3 ? names[0] + &#39;, &#39; + names[1] + &#39; and &#39; + (names.length - 2).toString() + &#39; others like this&#39; : &#39;no one likes this&#39;;\n    }\n}',14),(141,'527','250','function persistence(num) {\n   var times = 0;\n   \n   num = num.toString();\n   \n   while (num.length &gt; 1) {\n     times++;\n     num = num.split(&#39;&#39;).map(Number).reduce((a, b) =&gt; a * b).toString();\n   }\n   \n   return times;\n}',15),(142,'92','693','const persistence = num =&gt; {\n  return `${num}`.length &gt; 1 \n    ? 1 + persistence(`${num}`.split(&#39;&#39;).reduce((a, b) =&gt; a * +b)) \n    : 0;\n}',15),(143,'68','109','function persistence(num) {\n   for (var i = 0; num &gt; 9; i++) {\n     num = num.toString().split(&#39;&#39;).reduce((t, c) =&gt; c * t);\n   }\n   return i;\n}',15),(144,'26','5','/**\n * This function will calculate the multiplication of the digit of the number \n * given as parameter\n */\nfunction multiplyDigits( num ) {\n	// If have just 1 digit number, we just return it\n	if( num &lt; 10 ) {\n  	return num;\n  // If more than one digit, will be first digit * recursive call to this function\n  }else {\n    let firstDigit = Math.floor( num / 10 );\n    return ( num - firstDigit * 10 ) * \n    	multiplyDigits(firstDigit);\n  }\n}\n\n/**\n * This function will count on the number of times we have to call multiply\n * till we don&#39;t have any more times to call ( we just have one digit ) \n */\nfunction count( num, times = 0 ) {\n  if( num &lt; 10 ) {\n  	return times;\n  }else {\n  	// 999 = 9 * 9 * 9 = 729, ...\n  	return count( multiplyDigits( num ), ++times );\n  }\n}\n/**\n * Just the public function we call in order to count the number of times\n * we have to multiply the digits of the param number till we have just \n * one digit as result \n */\nfunction persistence( num ) {\n  return count( num );\n}',15),(145,'14','17','function persistence(num) {\n  var i = 0;\n  for(i;num.toString().length&gt;1;i++){\n    num = num.toString().split(&#39;&#39;).reduce(function(x,y){return x*y});\n  }\n  return i;\n}',15),(146,'13','13','function persistence(num, cnt=0) {\n  let arrayNum = num.toString().split(&#39;&#39;);\n  return arrayNum.length === 1 ?\n    cnt :\n    persistence(arrayNum.reduce((x,y) =&gt; x*y), ++cnt)\n}',15),(147,'10','9','const prod = (n) =&gt; (n+&#39;&#39;).split(&#39;&#39;).reduce((p,v)=&gt;p*v,1)\n\nfunction persistence(num) {\n   let p = 0; \n   while( num&gt;9 ){ num = prod(num); p++ }\n   return p\n}',15),(148,'9','14','function persistence(num) {\n    var digits = (&quot;&quot;+num).split(&quot;&quot;)\n    var total;\n    var sum = 0;\n    while (digits.length &gt; 1) {\n        digits = eval(digits.join(&#39;*&#39;));\n        digits = (&quot;&quot;+digits).split(&quot;&quot;);\n        sum++\n    }\n    return sum;\n}',15),(149,'8','16','persistence=(n,c)=&gt;n&gt;9?persistence(n.toString().split(&#39;&#39;).reduce((x,y)=&gt;x*y),c?(c+1):1):c?c:0',15),(150,'7','12','function persistence(num)\n{\n  for (var i = 0; num &gt; 9; i++)\n  {\n    num = num.toString().split(&quot;&quot;).reduce((s,d) =&gt; s * d);\n  }\n  return i;\n}',15),(151,'764','343','function createPhoneNumber(numbers){\n  numbers = numbers.join(&#39;&#39;);\n  return &#39;(&#39; + numbers.substring(0, 3) + &#39;) &#39; \n      + numbers.substring(3, 6) \n      + &#39;-&#39; \n      + numbers.substring(6);\n}',16),(152,'763','2267','function createPhoneNumber(numbers){\n  var format = &quot;(xxx) xxx-xxxx&quot;;\n  \n  for(var i = 0; i &lt; numbers.length; i++)\n  {\n    format = format.replace(&#39;x&#39;, numbers[i]);\n  }\n  \n  return format;\n}',16),(153,'338','912','function createPhoneNumber(numbers){\n  return numbers.join(&#39;&#39;).replace(/(...)(...)(.*)/, &#39;($1) $2-$3&#39;);\n}',16),(154,'204','274','createPhoneNumber([0,1,2,3,4,5,6,7,8,9]);\n\nfunction createPhoneNumber(numbers){\n  var string = &quot;&quot;;\n  // Make sure to use all of the time you got granted. Never waste time which is entitled to you!!!!\n  for(var i = 0; i&lt;300000000; i++) {\n    string = string+string+string+string;\n  }\n  // Make sure to structure the code into small pieces, so anyone can unterstand what you&#39;re doing.\n  // Step 1: Make sure the string begins empty, so you really start with a empty string.\n  string = string+string+string+string+string;\n  // Check if the string is REALLY empty\n  if(string == &quot;&quot;) {\n	// If it&#39;s empty, put a &#39;(&#39; at the end.\n	var oldstring = string;\n    string = string+&quot;(&quot;;\n	// Make sure there is really a &#39;(&#39; at the end. If not, repeat!\n	if(string == oldstring+&quot;(&quot;) {\n		// If everything is fine, add the first number.\n		oldstring = oldstring+&quot;(&quot;;\n		string = string+numbers[0];\n		// Check if the first number was added. If not, repeat!\n		if(string == oldstring+numbers[0]) {\n			// If everything is fine, add the second number.\n			oldstring = oldstring+numbers[0];\n			string = string+numbers[1];\n			// Check if the second number was added. If not, repeat!\n			if(string == oldstring+numbers[1]) {\n				// If everything is fine, add the third number.\n				oldstring = oldstring+numbers[1];\n				string = string+numbers[2];\n				// Check if the third number was added. If not, repeat!\n				if(string == oldstring+numbers[2]) {\n					// If everything is fine, add the &#39;)&#39;.\n					oldstring=oldstring+numbers[2];\n					string = string+&quot;)&quot;;\n					// Check if the &#39;)&#39; was added. If not, repeat!\n					if(string == oldstring+&quot;)&quot;) {\n						// If everything is fine, add the &#39; &#39;.\n						oldstring=oldstring+&quot;)&quot;;\n						string = string+&quot; &quot;;\n						// Check if the &#39; &#39; was added. If not, repeat!\n						if(string == oldstring+&quot; &quot;) {\n							// If everything is fine, add the fourth number.\n							oldstring = oldstring+&quot; &quot;;\n							string = string+numbers[3];\n							// Check if the fourth number was added. If not, repeat!\n							if(string == oldstring+numbers[3]) {\n								// If everything is fine, add the fifth number.\n								oldstring = oldstring+numbers[3];\n								string = string+numbers[4];\n								// Check if the fifth number was added. If not, repeat!\n								if(string == oldstring+numbers[4]) {\n									// If everything is fine, add the sixth number.\n									oldstring = oldstring+numbers[4];\n									string = string+numbers[5];\n									// Check if the sixth number was added. If not, repeat!\n									if(string == oldstring+numbers[5]) {\n										// If everything is fine, add the &quot;-&quot;.\n										oldstring = oldstring+numbers[5];\n										string = string+&quot;-&quot;;\n										// Check if the &quot;-&quot; was added. If not, repeat!\n										if(string == oldstring+&quot;-&quot;) {\n											// If everything is fine, add the seventh number.\n											oldstring = oldstring+&quot;-&quot;;\n											string = string+numbers[6];\n											// Check if the seventh was added. If not, repeat!\n											if(string == oldstring+numbers[6]) {\n												// If everything is fine, add the eighth number.\n												oldstring = oldstring+numbers[6]\n												string = string+numbers[7];\n												// Check if the eigth was added. If not, repeat!\n												if(string == oldstring+numbers[7]) {\n													// If everything is fine, add the ninth number.\n													oldstring=oldstring+numbers[7];\n													string = string+numbers[8];\n													// Check if the ninth was added. If not, repeat!\n													if(string == oldstring+numbers[8]) {\n														// If everything is fine, add the tenth number.\n														oldstring = oldstring+numbers[8];\n														string = string+numbers[9];\n														// Check if the tenth was added. If not, repeat!\n														if(string == oldstring+numbers[9]) {\n															// If everything is fine, return the string!\n															return string;\n														}\n														else { string=string+numbers[9]; }\n													}\n													else { string=string+numbers[8]; }\n												}\n												else { string=string+numbers[7]; }\n											}\n											else { string=string+numbers[6]; }\n										}\n										else { string=string+&quot;-&quot;; }\n									}\n									else { string=string+numbers[5]; }\n								}\n								else { string=string+numbers[4]; }\n							}\n							else { string=string+numbers[3]; }\n						}\n						else { string=string+&quot; &quot;; }\n					}\n					else { string = string+&quot;)&quot;; }\n				}\n				else { string = string+numbers[2]; }\n			}\n			else { string = string+numbers[1]; }\n		}\n		else { string = string+numbers[0]; }\n	}\n	else { string = string+&quot;(&quot;; }\n  }\n  else {\n	// if this motherfucker is not empty, force him to be\n    string == &quot;&quot;;\n	// its really important that the string is empty, so check its REEEEEEEEEEEEEALLY EMPTY!!!!!!!!!!!\n    for(var i = 0; i&lt;700000000; i++) {\n      string = string+string+string+string;\n    }\n  }\n}',16),(155,'158','420','function createPhoneNumber(numbers){\n   return numbers.reduce((p,c) =&gt; p.replace(&#39;x&#39;,c), &quot;(xxx) xxx-xxxx&quot;);\n}',16),(156,'142','197','function createPhoneNumber(numbers){\n  return numbers.join(&#39;&#39;).replace(/(\\d{3})(\\d{3})(\\d{4})/,&#39;($1) $2-$3&#39;);\n}',16),(157,'42','55','function createPhoneNumber(numbers){\n  var n = numbers;\n  return &#39;(&#39;+n[0]+n[1]+n[2]+&#39;) &#39;+n[3]+n[4]+n[5]+&#39;-&#39;+n[6]+n[7]+n[8]+n[9];\n}',16),(158,'36','16','function createPhoneNumber(numbers){\n  return &#39;(&#39; + numbers.slice(0,3).join(&#39;&#39;) + &#39;) &#39; + numbers.slice(3,6).join(&#39;&#39;) + &#39;-&#39; + numbers.slice(6).join(&#39;&#39;);\n}',16),(159,'25','68','createPhoneNumber=n=&gt;&#39;(###) ###-####&#39;.replace(/#/g,()=&gt;n.shift())\n',16),(160,'24','19','function createPhoneNumber(numbers){\n  return &#39;(&#39; + numbers[0] + numbers[1] + numbers[2] + &#39;) &#39; + numbers[3] + numbers[4] + numbers[5] + &#39;-&#39; + numbers[6] + numbers[7] + numbers[8] + numbers[9];\n}',16),(161,'990','513','function array_diff(a, b) {\n  return a.filter(e =&gt; !b.includes(e));\n}',17),(162,'529','382','function array_diff(a, b) {\n  return a.filter(function(x) { return b.indexOf(x) == -1; });\n}',17),(163,'99','73','function array_diff(a, b) {\n  b = new Set(b)\n  return a.filter(v =&gt; !b.has(v))\n}',17),(164,'57','23','function array_diff(a, b) {\n  return a.filter(function (v) { return b.indexOf(v) === -1 });\n}',17),(165,'55','28','function array_diff(a, b) {\n\n    var arr = new Array();\n    \n    for(var i = 0;i&lt;a.length;i++){\n        if(b.indexOf(a[i])&lt;0){\n            arr.push(a[i]);\n        }\n    }\n  \n    return arr;\n}',17),(166,'39','314','array_diff = require(&quot;lodash&quot;).difference;',17),(167,'22','7','function array_diff(a, b) {\n  return a.filter(x=&gt;b.indexOf(x));\n}',17),(168,'12','10','var array_diff = (a, b) =&gt; a.filter(item =&gt; b.indexOf(item) &lt; 0)',17),(169,'10','0','function array_diff(a, b) {\n  return a.filter(x =&gt; b.indexOf(x) == -1);\n}',17),(170,'9','2','function array_diff(a, b) {\n  return  a.filter(function(n){ return b.indexOf(n); });\n}  \n',17),(171,'566','1409','countBits = n =&gt; n.toString(2).split(&#39;0&#39;).join(&#39;&#39;).length;',18),(172,'134','583','function countBits(n) {\n  for(c=0;n;n&gt;&gt;=1)c+=n&amp;1\n  return c;\n}',18),(173,'122','160','var countBits = function(n) {\n  return n.toString(2).replace(/0/g,&#39;&#39;).length;\n};',18),(174,'38','114','var countBits = function(n)\n{\n  a = n.toString(2).match(/1/g);\n  return a == null ? 0 : a.length;\n};',18),(175,'35','20','const countBits = n =&gt; n.toString(2)\n                        .split(&#39;&#39;)\n                        .filter(ele =&gt; ele == 1)\n                        .length',18),(176,'30','16','var countBits = function(n) {\n  var count = 0;\n  while(n &gt; 0){\n    if(n%2 === 1) {\n      count++;\n    }\n    n = Math.floor(n/2);\n  }\n  return count;\n};',18),(177,'22','15','var countBits = function(n) {\n  // Program Me\n  return n.toString(2).split(&quot;&quot;).reduce((a,b) =&gt; parseInt(a)+parseInt(b),0);\n};',18),(178,'21','9','var countBits = function (n) {\n  var bits = 0;\n  for (; n; n &gt;&gt;= 1) {\n    if (n &amp; 1) bits++;\n  }\n  \n  return bits;\n};\n',18),(179,'14','28','var countBits = function(n) {\n  return n !== 0 ? n.toString(2).match(/1/g).length:0;\n};',18),(180,'10','9','var countBits = function(n) {\n  return n.toString(2).split(&#39;&#39;).reduce((a, b) =&gt; Number(a) + Number(b), 0);\n};',18),(181,'520','742','function findOutlier(int){\n  var even = int.filter(a=&gt;a%2==0);\n  var odd = int.filter(a=&gt;a%2!==0);\n  return even.length==1? even[0] : odd[0];\n}',19),(182,'157','132','function findOutlier(integers){\n  return integers.slice(0,3).filter(even).length &gt;=2 ? integers.find(odd) : integers.find(even);\n}\nfunction even(num){\n  return (num % 2 == 0);\n}\nfunction odd(num){\n  return !even(num)\n}',19),(183,'77','45','function findOutlier(integers){\n  const even = integers.filter(int =&gt; int % 2 === 0);\n  const odd  = integers.filter(int =&gt; int % 2 !== 0);\n  return even.length === 1 ? even[0] : odd[0];\n}',19),(184,'26','25','function findOutlier(integers){\n  var res;\n  var odd = integers.filter(function(e){\n    if(e%2 != 0){\n      res = e;\n    };\n    return e%2 == 0;\n  });\n  \n  return odd.length&gt;1 ? res : odd.pop();\n}',19),(185,'21','19','function findOutlier(integers){\n  //your code here\n  var len = integers.length;\n  var first = Math.abs(integers[0]) % 2,\n  second = Math.abs(integers[1]) % 2,\n  third = Math.abs(integers[2]) % 2,\n  base = (first + second + third) &gt;= 2 ? 1 : 0;\n  \n  for (var i = 0; i &lt; len; i++) {\n    if (Math.abs(integers[i] % 2) != base) {\n      return integers[i];\n    }\n  }\n};',19),(186,'18','18','function findOutlier(int){\n  var evens=[],odds=[];\n  int.forEach(function(num){num% 2 !=0? odds.push(num):evens.push(num) });\n  return odds.length&gt;1? evens[0]: odds[0];\n  }',19),(187,'9','1','function findOutlier(arr){\n  var even = arr.filter(function(num) {\n      return num % 2 === 0;\n  });\n  var odd = arr.filter(function(num) {\n      return num % 2 !== 0;\n  });\n  return even.length &gt; odd.length ? odd[0] : even[0];\n}',19),(188,'7','17','function findOutlier(ints) {\n  return ints.slice(0, 3).reduce((a, b) =&gt; b % 2 === 0? a : a + 1, 0) &gt;= 2?\n    ints.find(i =&gt; i % 2 === 0) : ints.find(i =&gt; i % 2 !== 0);\n}',19),(189,'7','4','const findOutlier = integers =&gt; {\n  var evens, odds, odd;\n  for (var i = integers.length; i--; ) {\n    let next = integers[i];\n    odd = next &amp; 1;\n    if ([evens, odds].indexOf(undefined) == -1)\n      return odd ? evens : odds;\n    odd ?\n      odds = next :\n      evens = next;\n  }\n  return odd ? odds : evens;\n}',19),(190,'6','4','function findOutlier(integers){\n  let test = Math.abs(integers[0])%2 + Math.abs(integers[1])%2 + Math.abs(integers[2])%2;\n  let outlierIsOdd = test &gt;= 2 ? false : true;\n  return integers.filter(function(e){\n    return (Math.abs(e)%2 === +outlierIsOdd);\n  })[0];\n}',19),(191,'541','1048','function duplicateEncode(word){\n  return word\n    .toLowerCase()\n    .split(&#39;&#39;)\n    .map( function (a, i, w) {\n      return w.indexOf(a) == w.lastIndexOf(a) ? &#39;(&#39; : &#39;)&#39;\n    })\n    .join(&#39;&#39;);\n}',20),(192,'113','47','function duplicateEncode(word){\n   \n    var unique=&#39;&#39;;\n    word = word.toLowerCase();\n    for(var i=0; i&lt;word.length; i++){\n        if(word.lastIndexOf(word[i]) == word.indexOf(word[i])){\n            unique += &#39;(&#39;;\n        }\n        else{\n            unique += &#39;)&#39;;\n        }\n    }\n    return unique;\n\n}\n',20),(193,'66','238','function duplicateEncode(word) {\n  word = word.toLowerCase();\n  return word.replace(/./g, m =&gt; word.indexOf(m) == word.lastIndexOf(m) ? &#39;(&#39; : &#39;)&#39;);\n}',20),(194,'25','48','function duplicateEncode(word) {\n  var letters = word.toLowerCase().split(&#39;&#39;)\n  return letters.map(function(c, i) {\n    return letters.some(function(x, j) { return x === c &amp;&amp; i !== j }) ? &#39;)&#39; : &#39;(&#39;\n  }).join(&#39;&#39;)\n}\n',20),(195,'19','1','function countCharacters(chars) {\n  return chars\n    .reduce( function(memo, char){\n      memo[char] = memo[char] ? memo[char] + 1 : 1;\n      return memo;\n    }, {});\n}\n\nfunction duplicateEncode(word){\n  const chars = word.split(&#39;&#39;).map(ch =&gt; ch.toLowerCase());\n  const charsCount = countCharacters(chars);\n  return chars\n    .map( ch =&gt; charsCount[ch] &gt; 1 ? &#39;)&#39; : &#39;(&#39; )\n    .join(&#39;&#39;);\n}\n',20),(196,'18','15','function duplicateEncode(string){\n   var occurances = string.toLowerCase().split(&#39;&#39;).reduce(function(occ, cha){\n      occ[cha] = (occ[cha] || 0) + 1;\n      return occ;\n   }, {});\n   return string.toLowerCase().replace(/[\\S\\s]/g, function(cha){\n      return occurances[cha] &gt; 1 ? &#39;)&#39; : &#39;(&#39;;\n   });\n}',20),(197,'12','16','const duplicateEncode = s =&gt; s\n  .toLowerCase()\n  .split``\n  .map((e, _, a) =&gt; a.indexOf(e) === a.lastIndexOf(e) ? &#39;(&#39; : &#39;)&#39;)\n  .join``;',20),(198,'8','0','function duplicateEncode(word){\n  function count(word, char) {\n    var result = 0;\n    for (var index = 0, len = word.length; index &lt; len; index++) {\n      if (word[index] == char) result++;\n    }\n      \n    return result;\n  }\n    \n  var result = [];\n  var lowerCasedWord = word.toLowerCase();\n  for (var index = 0, len = lowerCasedWord.length; index &lt; len; index++) {\n    if (count(lowerCasedWord, lowerCasedWord[index]) &gt; 1)\n      result.push(&quot;)&quot;);\n    else\n      result.push(&quot;(&quot;);\n  }  \n  \n  return result.join(&#39;&#39;);\n}\n',20),(199,'7','6','const duplicateEncode = w =&gt; w.replace(/./g, c =&gt; (new RegExp(`([${c}]).*\\\\1`, &#39;gi&#39;)).test(w) ? &#39;)&#39; : &#39;(&#39;);',20),(200,'6','5',' function duplicateEncode(word) {\n        var str = &#39;&#39;;\n        var allData = [];\n        var toolflag=false;\n        for (var i = 0; i &lt; word.length; i++) {\n        //    if(word.charAt(i)&gt;&#39;A&#39;&amp;&amp;word.charAt(i)&lt;&#39;Z&#39;){\n        //        toolflag=true;\n        //    }\n            if (allData.length) {\n                for (var j = 0; j &lt; allData.length; j++) {\n                    if (word.charAt(i).toLowerCase() == allData[j][0].toLowerCase()) {\n                        allData[j][1] = 1 + parseInt(allData[j][1]);\n                        break;\n                    } else if(j==(allData.length-1)){\n                        var data = [];\n                        data.push(word.charAt(i), 1);\n                        allData.push(data);\n                       break;\n                    }else{continue;}\n                }\n            } else {\n                var data = [];\n                data.push(word.charAt(i), 1);\n                allData.push(data);\n            }\n        }\n        // console.log(allData)\n        for (var i = 0; i &lt; word.length; i++) {\n          //  console.log(allData)\n          for(var j=0;j&lt;allData.length;j++){\n            if(word.charAt(i).toLowerCase()==allData[j][0].toLowerCase()){\n                if (allData[j][1] == 1) {\n                str += &#39;(&#39;;\n            } else {\n                str += &#39;)&#39;;\n            }\n            }\n          }\n         \n           \n        }\n        // if(toolflag){\n        //     str+=&quot;,should ignore case&quot;;\n        // }\n        console.log(allData)\n        return str;\n    }',20),(201,'664','279','function isValidWalk(walk) {\n  var dx = 0\n  var dy = 0\n  var dt = walk.length\n  \n  for (var i = 0; i &lt; walk.length; i++) {\n    switch (walk[i]) {\n      case &#39;n&#39;: dy--; break\n      case &#39;s&#39;: dy++; break\n      case &#39;w&#39;: dx--; break\n      case &#39;e&#39;: dx++; break\n    }\n  }\n  \n  return dt === 10 &amp;&amp; dx === 0 &amp;&amp; dy === 0\n}\n',21),(202,'155','710','function isValidWalk(walk) {\n  function count(val) {\n    return walk.filter(function(a){return a==val;}).length;\n  }\n  return walk.length==10 &amp;&amp; count(&#39;n&#39;)==count(&#39;s&#39;) &amp;&amp; count(&#39;w&#39;)==count(&#39;e&#39;);\n}',21),(203,'82','115','function isValidWalk(walk) {\n  const north = walk.filter(item =&gt; { return item === &quot;n&quot; }).length;\n  const south = walk.filter(item =&gt; { return item === &quot;s&quot; }).length;\n  const east = walk.filter(item =&gt; { return item === &quot;e&quot; }).length;\n  const west = walk.filter(item =&gt; { return item === &quot;w&quot; }).length;\n  \n  return walk.length === 10 &amp;&amp; north === south &amp;&amp; east === west;\n}',21),(204,'39','324','function isValidWalk(walk) {\n  return walk.length == 10 &amp;&amp; !walk.reduce(function(w,step){ return w + {&quot;n&quot;:-1,&quot;s&quot;:1,&quot;e&quot;:99,&quot;w&quot;:-99}[step]},0)\n}',21),(205,'29','39','function isValidWalk(walk) {\n  var res = {n:0, w:0, s:0, e:0};\n  walk.forEach((c) =&gt; res[c]++);\n  return walk.length === 10 &amp;&amp; res.n == res.s &amp;&amp; res.e == res.w;\n}',21),(206,'22','5','const MOVEMENTS = {\n	n({x, y}) { return { x, y: y + 1 }; },\n  s({x, y}) { return { x, y: y - 1 }; },\n  e({x, y}) { return { x: x + 1, y }; },\n  w({x, y}) { return { x: x - 1, y }; },\n};\n\nfunction isValidWalk(walk) {\n  return takes10MinutesToWalk(walk) &amp;&amp;\n  				returnsToStartingPoint(walk);\n}\n\nfunction takes10MinutesToWalk(walk) {\n	return walk.length === 10;\n}\n\nfunction returnsToStartingPoint(walk) {\n	return isOrigin(processWalk(walk));\n}\n\nfunction isOrigin(position) {\n	return position.x === 0 &amp;&amp; position.y === 0\n}\n\nfunction processWalk(walk=[], position={ x: 0, y: 0 }) {\n	return walk.reduce((pos, direction) =&gt; MOVEMENTS[direction](pos), position);\n}',21),(207,'10','17','function isValidWalk(walk) {\n  function count(c) { return walk.filter(function (v) { return v == c }).length }\n  return walk.length == 10 &amp;&amp; count(&#39;w&#39;) == count(&#39;e&#39;) &amp;&amp; count(&#39;n&#39;) == count(&#39;s&#39;)\n}\n',21),(208,'9','32','function count(dir, walk) {\n  return walk.filter(function(d) {\n    return d == dir;\n  }).length;\n}\n\nfunction isValidWalk(walk) {\n  return walk.length === 10 &amp;&amp;\n  count(&#39;n&#39;, walk) == count(&#39;s&#39;, walk) &amp;&amp;\n  count(&#39;e&#39;, walk) == count(&#39;w&#39;, walk)\n}',21),(209,'8','22','function isValidWalk(walk) {\n  return walk.filter(function(dir, i, arr) {return dir != arr[i+1];}).length === 10;\n}',21),(210,'5','5','function countDirections(walk) {\n  var count = {\n    n: 0, s: 0, w: 0, e: 0,\n    \n    total: function() {\n      return this.n + this.s + this.w + this.e;\n    },\n    \n    sameStartAndEndPoint: function() {\n      return (this.n === this.s) &amp;&amp; (this.w === this.e);\n    }\n  }\n\n  walk.forEach(function(direction) {\n    count[direction]++;\n  });\n  return count;\n}\n\nfunction isValidWalk(walk) {\n  var count = countDirections(walk);\n  return count.total() === 10 &amp;&amp; count.sameStartAndEndPoint();\n}',21),(211,'364','191','function uniqueInOrder(it) {\n  var result = []\n  var last\n  \n  for (var i = 0; i &lt; it.length; i++) {\n    if (it[i] !== last) {\n      result.push(last = it[i])\n    }\n  }\n  \n  return result\n}',22),(212,'199','419','var uniqueInOrder=function(iterable){\n    return [...iterable].filter((a, i) =&gt; a !== iterable[i-1])\n}\n',22),(213,'123','723','var uniqueInOrder = function (iterable)\n{\n	return [].filter.call(iterable, (function (a, i) { return iterable[i - 1] !== a }));\n}',22),(214,'25','6','var uniqueInOrder=function(iterable){\n  var res = [];\n  for (var i = 0; i &lt; iterable.length; i++) {\n    if (iterable[i] != iterable[i+1]) res.push(iterable[i]);\n  }\n  return res;\n}',22),(215,'16','4','var uniqueInOrder=function(iterable){\n  var result = [];\n  for (var i = 0; i &lt; iterable.length; i++) {\n    if (iterable[i-1] === undefined || iterable[i-1] !== iterable[i]) {\n      result.push(iterable[i]);\n    }\n  }\n  return result;\n}',22),(216,'13','29','const uniqueInOrder = d =&gt; [...d].filter((x, i, a) =&gt; x != a[i + 1])',22),(217,'13','12','var uniqueInOrder=function(iterable){\n  return Array.prototype.filter.call(iterable, function(current, index){ return iterable[index - 1] !== current})\n}\n\n',22),(218,'11','33','var uniqueInOrder=function(iterable){\n	return Array.prototype.reduce.call(iterable, function(a,b) { if (a[a.length-1] !== b) a.push(b); return a; }, []);\n}',22),(219,'9','5','var uniqueInOrder=function(iterable){\n  iterable = typeof iterable === &#39;string&#39; ? iterable.split(&#39;&#39;) : iterable;\n  return iterable.filter(function(e, i, arr) {\n    return e !== arr[i-1];\n  });\n}',22),(220,'9','4','var uniqueInOrder=function(iterable){\n  //your code here - remember iterable can be a string or an array\n  var result = []; // this array will store unique elements\n	for (var i = 0, length = iterable.length; i &lt; length; i++){\n  // we step through the elements in iterable from the beginning to the end\n		if (iterable.indexOf(iterable[i]) !== iterable.indexOf(iterable[i + 1])) {\n			// and add an element to the result array every time this is different from the following element\n      result.push(iterable[i]);\n		}\n	}\n	return result;\n}',22),(221,'1306','589','function songDecoder(song){\n  return song.replace(/(WUB)+/g,&quot; &quot;).trim()\n}',23),(222,'129','680','function songDecoder(song){\n  return song.split(&#39;WUB&#39;).filter(Boolean).join(&#39; &#39;);\n}',23),(223,'70','47','var songDecoder = (song) =&gt; song.split(&#39;WUB&#39;).filter(x =&gt; x !== &#39;&#39;).join(&#39; &#39;)',23),(224,'46','20','const songDecoder = song =&gt; song.replace(/(WUB)+/g, &#39; &#39;).trim();',23),(225,'10','49','function songDecoder(song){\n  var str = &#39;&#39;;\n  for(var i=0;i&lt;song.length;i++){\n    if((song[i] == &#39;W&#39; &amp;&amp; song[i+1] == &#39;U&#39; &amp;&amp; song[i+2] == &#39;B&#39;) \n    || (song[i-1] == &#39;W&#39; &amp;&amp; song[i] == &#39;U&#39; &amp;&amp; song[i+1] == &#39;B&#39;)\n    || (song[i-2] == &#39;W&#39; &amp;&amp; song[i-1] == &#39;U&#39; &amp;&amp; song[i] == &#39;B&#39;))\n      str += str[str.length-1] !== &#39; &#39; ? &#39; &#39; : &#39;&#39;;\n    else\n      str += song[i];\n  }\n  return str.trim();\n}',23),(226,'9','5','function songDecoder(song){\n    return song.replace(/(WUB){1,3}/g, &quot; &quot;).trim();\n}',23),(227,'7','7','function songDecoder(song){\n  var re = /(WUB)+/g;\n  return song.replace( re, &#39; &#39; ).trim();\n}',23),(228,'6','6','function songDecoder(song){\n  return song.split(&#39;WUB&#39;).filter((w) =&gt; w).join(&#39; &#39;);\n}',23),(229,'6','5','var songDecoder=s=&gt;s.split`WUB`.filter(v=&gt;v).join` `',23),(230,'5','13','function songDecoder(song){\n  return song.replace(/(WUB)+/gi, &#39; &#39;).trim();\n}',23),(231,'483','549','function tribonacci(signature,n){  \n  for (var i = 0; i &lt; n-3; i++) { // iterate n times\n    signature.push(signature[i] + signature[i+1] + signature[i+2]); // add last 3 array items and push to trib\n  }\n  return signature.slice(0, n); //return trib - length of n\n}',24),(232,'120','137','function tribonacci(signature,n) {\n  const result = signature.slice(0, n);\n  while (result.length &lt; n) {\n    result[result.length] = result.slice(-3).reduce((p,c) =&gt; p + c, 0);\n  }\n  return result;\n}',24),(233,'74','92','function tribonacci(s,n){\n  var arr = [];\n  for(var i=0; i&lt;n; i++) {\n    arr.push((i&lt;3) ? s[i] : arr[i-1]+arr[i-2]+arr[i-3]);\n  }\n  return arr;\n}',24),(234,'32','63','function tribonacci(signature, n) {\n  while(signature.length &lt; n) {\n    signature.push(signature.slice(-3).reduce(sum));\n  }\n  return signature.slice(0, n);\n}\n\nfunction sum(a, b) { return a + b }',24),(235,'27','15','function tribonacci(sign,n){\n	for (var i = 3; i &lt; n; i++) {\n 		sign[i] = sign[i-1] + sign[i-2] + sign[i-3];\n  }\n  return sign.slice(0, n);\n}',24),(236,'19','10','function tribonacci(signature,n){\n  while (signature.length &lt; n) {\n    signature.push(signature.slice(-3).reduce((a, b) =&gt; a + b));\n  }\n  return signature.slice(0, n);\n}',24),(237,'13','47','function tribonacci(arr,n){\n  if (n &lt; 3) return arr.slice(0, n);\n  return [arr[0]].concat(tribonacci([arr[1], arr[2], arr[0] + arr[1] + arr[2]], n-1));\n}',24),(238,'10','4','function tribonacci(signature,n){\n  var l = signature.splice(0, n);\n    \n  for (var i=3; i&lt;n; i++)\n    l.push(l[i-3] + l[i-2] + l[i-1]);\n    \n  return l;\n}',24),(239,'9','1','function tribonacci(signature,n){\n  //your code here\n   var result = signature;\n  \n  if (n==0){\n    return [];\n  }\n  if (n &lt;= 3){\n    return result.slice(0,n)\n  }\n  \n  function sum(a,b){\n    return a+b;\n  }\n  \n  for (var i=0; i&lt;n-3; i++){\n    result.push(result.slice(i,i+3).reduce(sum,0))\n  }\n  \n  return result;\n}',24),(240,'7','3','function tribonacci(signature, n) {\n  var res = [];\n\n  if (n == 0) {\n    return [];\n  } else if (n &lt;= 3) {\n    for (let i = 0; i &lt; n; i++) {\n      res.push(signature[i]);\n    }\n    return res;\n  }\n  \n  return myTribonacciRecursive(signature, n);\n}\n\nfunction myTribonacci(signature, n) {\n  var nextFib = 0;\n  var singLeng = signature.length;\n  while (singLeng &lt; n) {\n    nextFib = signature[singLeng - 3] + signature[singLeng - 2] + signature[singLeng - 1];\n    signature.push(nextFib);\n    singLeng++;\n  }\n\n  return signature;\n}\n\nfunction myTribonacciRecursive(signature, n) {\n  if (n &lt;= 3) {\n    return signature;\n  } else {\n    var sum = signature[signature.length - 3] + signature[signature.length - 2] + signature[signature.length - 1];\n    signature.push(sum);\n    return myTribonacciRecursive(signature, n - 1);\n  }\n\n}',24),(241,'748','989','function order(words){\n  \n  return words.split(&#39; &#39;).sort(function(a, b){\n      return a.match(/\\d/) - b.match(/\\d/);\n   }).join(&#39; &#39;);\n}    ',25),(242,'71','62','var reg = /\\d/;\n\nfunction order(words){\n  return words.split(&#39; &#39;).sort(comparator).join(&#39; &#39;);\n}\n\nfunction comparator(word, nextWord) {\n  return +word.match(reg) - +nextWord.match(reg)\n}',25),(243,'60','51','function order(words){\n  var array = words.split(&#39; &#39;);\n  var sortedArray = [];\n  for(i = 0; i &lt;= array.length; i++) {\n    for(j = 0; j &lt; array.length; j++) {\n      if(array[j].indexOf(i) &gt;= 0) {\n        sortedArray.push(array[j]);\n      }\n    }\n  }\n  return sortedArray.join(&#39; &#39;);\n}',25),(244,'36','33','function order(words) {\n  return words.split(&#39; &#39;).sort((wordA, wordB) =&gt; wordA.match(/\\d+/) &gt; wordB.match(/\\d+/)).join(&#39; &#39;)\n}',25),(245,'9','50','function order(words){\n  // ...\n  return words &amp;&amp; words.split(&#39; &#39;)\n    .map(word =&gt; word.match(/\\d/) + word)\n    .sort()\n    .map(word =&gt; word.slice(1))\n    .join(&#39; &#39;);\n}',25),(246,'9','13','const order = w =&gt; w.split(&#39; &#39;).sort((a, b) =&gt; /\\d/.exec(a) - /\\d/.exec(b)).join(&#39; &#39;);',25),(247,'8','9','function order(str)\n{\n	str=str.split(&quot; &quot;);\n	var index, result=new Array(str.length);\n	for(var i in str)\n	{\n		index=str[i].match(/\\d/);\n		result[index-1]=str[i];\n	}\n	return result.join(&quot; &quot;);\n}',25),(248,'7','7','function order(words) {\n  return words.split(&quot; &quot;).sort((a, b) =&gt; a.replace(/[^\\d]/g, &quot;&quot;) - b.replace(/[^\\d]/g, &quot;&quot;)).join(&quot; &quot;)\n}',25),(249,'5','8','function order(words){\n  return words.split(&#39; &#39;).sort(function(a, b){    \n    return a.match(/\\d+/g) - b.match(/\\d+/g);    \n  }).join(&#39; &#39;);\n}',25),(250,'5','1','\n\nfunction order(string){\n  // ...\n  return string.split(&#39; &#39;).reduce((acc,el,i) =&gt; {   \n    acc[el.match(/\\d/)-1]=el\n    return acc;\n  },[]).join(&#39; &#39;)\n  \n  \n  \n  \n}',25),(251,'409','309','function iqTest(numbers){\n  numbers = numbers.split(&quot; &quot;).map(function(el){return parseInt(el)});\n  \n  var odd = numbers.filter(function(el){ return el % 2 === 1});\n  var even = numbers.filter(function(el){ return el % 2 === 0});\n  \n  return odd.length &lt; even.length ? (numbers.indexOf(odd[0]) + 1) : (numbers.indexOf(even[0]) + 1);\n}',26),(252,'97','113','function iqTest(numbers){\n  numbers = numbers.split(&#39; &#39;)\n  \n  var evens = []\n  var odds = []\n  \n  for (var i = 0; i &lt; numbers.length; i++) {\n    if (numbers[i] &amp; 1) {\n      odds.push(i + 1)\n    } else {\n      evens.push(i + 1)\n    }\n  }\n  \n  return evens.length === 1 ? evens[0] : odds[0]\n}',26),(253,'78','385','function iqTest(numbers){\n  var nums = numbers.split(&quot; &quot;).map(x =&gt; x % 2);  \n  var sum = nums.reduce((a,b) =&gt; a + b);  \n  var target = sum &gt; 1 ? 0 : 1;\n  \n  return nums.indexOf(target) + 1;\n}',26),(254,'20','9','const iqTest = test =&gt; {\n  const numbers = test.split(&quot; &quot;);\n  const evens = numbers.filter(el =&gt; el%2 );\n  const odds = numbers.filter(el =&gt; !(el%2));\n  const differ = evens.length == 1 ? evens[0] : odds[0]\n  \n  return numbers.indexOf(differ) + 1\n}',26),(255,'16','19','function iqTest(numbers){\n  var n = numbers.split(&quot; &quot;);\n  var isMajorEven = (n[0]%2 + n[1]%2 + n[2]%2) &lt; 2;\n  \n  for(var i=0; i&lt;n.length; i++) \n    if((isMajorEven &amp;&amp; n[i]%2===1) || (!isMajorEven &amp;&amp; n[i]%2===0))\n      return i+1;\n}',26),(256,'8','148','function iqTest(numbers){\n  var m = numbers.match(/[02468]\\b.*[02468]\\b/.test(numbers) ? /\\d*[13579]\\b/ : /\\d*[02468]\\b/)[0];\n  return numbers.split(&#39; &#39;).indexOf(m) + 1;\n}\n',26),(257,'8','6','function iqTest(numbers){\n  var ary = numbers.split(&quot; &quot;)\n  var even = []\n  var odd = []\n  \n  ary.forEach(function(num){Number(num) % 2 == 0 ? even.push(num) : odd.push(num)})\n  \n  return even.length &gt; odd.length ? ary.indexOf(odd[0]) + 1 : ary.indexOf(even[0]) + 1  \n}',26),(258,'7','1','function iqTest(numbers){\n  var odd = [];\n  var even = [];\n\n  var magicPos = 0; // position of the unique integer\n  \n  numbers = numbers.split(&#39; &#39;);\n  for (var i = 0; i &lt; numbers.length; i++){\n\n    if ((numbers[i] % 2) === 0){\n      even.push(numbers.indexOf(numbers[i])+1);\n    } else {\n      odd.push(numbers.indexOf(numbers[i])+1);\n    }\n  }\n  odd.length === 1 ? magicPos = odd[0] : magicPos = even[0];\n  \n  return magicPos;\n\n\n}',26),(259,'4','34','function iqTest(numbers){\n  numbers=numbers.split(&quot; &quot;).map(function(x){return parseInt(x)%2;});\n  if (numbers[0]+numbers[1]+numbers[2]==3 || numbers[0]+numbers[1]+numbers[2]==2) return numbers.indexOf(0)+1;\n  else return numbers.indexOf(1)+1;\n}',26),(260,'4','30','const iqTest = numbers =&gt; {\n  numbers = numbers.replace(/(\\d+\\s)|(\\d+$)/g, c =&gt; c % 2);\n  return numbers.indexOf(numbers.match(/0/g).length &gt; 1 ? &#39;1&#39; : &#39;0&#39;) + 1;\n}',26),(261,'336','512','function toCamelCase(str){\n      var regExp=/[-_]\\w/ig;\n      return str.replace(regExp,function(match){\n            return match.charAt(1).toUpperCase();\n       });\n}',27),(262,'174','402','function toCamelCase(str){\n  return str.replace(/[-_](.)/g, (_, c) =&gt; c.toUpperCase());\n}',27),(263,'31','36','function toCamelCase(str){\n  return str.split(/-|_/g).map((w, i) =&gt; (i &gt; 0 ? w.charAt(0).toUpperCase() : w.charAt(0)) + w.slice(1)).join(&#39;&#39;);\n}',27),(264,'24','8','function toCamelCase(str){\n  return str.split(/\\-|_/).reduce(function(previous, current, index){ return camelize(previous, current, index);});\n}\n\nfunction camelize(previous, current, index){\n  return previous + current.capitalizeFirstLetter();\n}\n\nString.prototype.capitalizeFirstLetter = function() {\n    return this.charAt(0).toUpperCase() + this.slice(1);\n}',27),(265,'15','35','function toCamelCase(str){\n  return str.replace(/[_-]\\w/gi, ch =&gt; ch[1].toUpperCase());\n}',27),(266,'11','4','function toCamelCase(str){\n  return str.replace(/(_|-)./g, m =&gt; m.substr(1, 1).toUpperCase());\n}',27),(267,'11','0','function toCamelCase(str){\n  if (str.length === 0) return str;\n  let firstUpperCase = false;\n  let res = &quot;&quot;;\n\n  if (str[0] === str[0].toUpperCase()) firstUpperCase = true;\n\n  let arrStr = str.split(/-|_/)\n\n  for (let i = 0; i &lt; arrStr.length; i++) {\n    if (i===0 &amp;&amp; !firstUpperCase) {\n      res += arrStr[i];\n    } else {\n      res += capitilizeFirstLetter(arrStr[i]);\n    }\n  }\n  \n  return res;\n}\n\nfunction capitilizeFirstLetter (string) {\n  return string[0].toUpperCase() + string.slice(1)\n}',27),(268,'10','11','function toCamelCase(str){\n  return str.replace(/([-_])(\\w)/g, function(match,dash,letter) { return letter.toUpperCase() });\n}',27),(269,'7','18','function toCamelCase(str) {\n  return str.replace(/[_-][A-Za-z]/g, function(match) {return match[1].toUpperCase();});\n}',27),(270,'6','9','function toCamelCase(str){\n  var strArray;\n  if (str.indexOf(&#39;-&#39;) !== -1){ //if delineated by -\n    strArray = str.split(&#39;-&#39;);\n  } else {\n    strArray = str.split(&#39;_&#39;);  //if delineated by _\n  }\n  var camelCase = strArray[0]; //keeps first word value as is\n  for (var i=1, len=strArray.length; i &lt; len; i++){\n    var capitalized = strArray[i].substr(0, 1).toUpperCase() + strArray[i].slice(1);\n    camelCase += capitalized;\n  }\n  return camelCase;\n  \n\n}',27),(271,'383','540','function digPow(n, p) {\n  var x = String(n).split(&quot;&quot;).reduce((s, d, i) =&gt; s + Math.pow(d, p + i), 0)\n  return x % n ? -1 : x / n\n}',28),(272,'82','265','i = 0\nfunction digPow(n, p){\n  return  [1,-1,51,9,-1,1,1,1,1,1,1,1,-1,-1,3,3,2,1,2,19,5,1,1,5,35,66,10,1,1,1,4,12933][i++]\n}',28),(273,'54','146','function digPow(n, p){\n  var ans = (&#39;&#39;+n).split(&#39;&#39;)\n    .map(function(d,i){return Math.pow(+d,i+p) })\n    .reduce(function(s,v){return s+v}) / n\n  return ans%1 ? -1 : ans    \n}//z.',28),(274,'23','16','function digPow(n, p){\n  var ans = n.toString().split(&#39;&#39;)\n             .map((v,i) =&gt; Math.pow(parseInt(v), i+p))\n             .reduce((a,b) =&gt; a+b) / n;\n  return ans%1 == 0 ? ans : -1;\n}',28),(275,'15','7','function digPow(n, p){\n  // ...\n  var num1=n.toString();\n  var num2=p.toString();\n  var sum=0;\n  \n  for(var i=0;i&lt;num1.length;i++){\n    sum=sum+Math.pow(parseInt(num1.charAt(i)),p);\n    p++;\n    if(sum%n==0){return sum/n;}\n  }\n  return -1;\n  \n  \n}',28),(276,'10','4','function digPow(n, p){\n  var str = n.toString()\n  var res = 0;\n  \n  for(var i=0; i&lt;str.length; i++){\n    res += Math.pow(parseInt(str[i]),p++); \n  }\n  \n  return res%n === 0 ? res/n : -1;\n}',28),(277,'9','4','function digPow(num, pow) {\n  const raisedAndSummed = num.toString()\n                             .split(&#39;&#39;)\n                             .map(n =&gt; Math.pow(n, pow++))\n                             .reduce((sum, n) =&gt; sum + n, 0)\n  return (raisedAndSummed % num === 0) ? raisedAndSummed / num : -1\n}',28),(278,'6','5','function digPow(n, p){\n  var str = String(n);\n  var sum = 0;\n  for(var i=0 ; i&lt; str.length ; i++){\n    sum += Math.pow(str[i], p+i);\n  }\n  \n  if(sum%n == 0){\n     return sum/n;\n  }\n  return -1;\n}',28),(279,'5','2','function digPow(n, p){\n  if(n &lt;= 0 || !p) return -1;\n  var total = 0,\n      numstr = &quot;&quot;+n,\n      tmp;\n  \n  for(var i=0; i&lt;numstr.length; i++) {\n    total += Math.pow(numstr[i], p++);\n  }\n  \n  return (total/n)%1===0 ? total/n : -1;\n}',28),(280,'4','7','function digPow(n, p){\n  let total = Reflect.apply(Array.prototype.reduce, \n    Reflect.apply(Array.prototype.map, n.toString(), [(i) =&gt; parseInt(i)]), \n  [(prev, curr, i) =&gt; prev + Math.pow(curr, i + p), 0]);\n\n  let division = total / n;\n\n  if(total % n &gt; 0) {\n    return -1;\n  }\n  \n  return division;\n}',28),(281,'796','1057','function getCount(str) {\n  return (str.match(/[aeiou]/ig)||[]).length;\n}',29),(282,'127','62','function getCount(str) {\n  var vowelsCount = 0;\n  var vowels = [&quot;a&quot;,&quot;e&quot;,&quot;i&quot;,&quot;o&quot;,&quot;u&quot;];\n  for(var i = 0;i &lt; str.length;i++){\n    for(var j=0;j&lt;vowels.length;j++){\n      if(str[i] === vowels[j]){\n        vowelsCount++;\n      }\n    }\n  }\n  \n  return vowelsCount;\n}',29),(283,'91','322','function getCount(str) {\n  return str.replace(/[^aeiou]/gi, &#39;&#39;).length;\n}',29),(284,'38','54','function getCount(str) {\n return str.split(&#39;&#39;).filter(c =&gt; &quot;aeiouAEIOU&quot;.includes(c)).length;\n}',29),(285,'35','23','function getCount(str) {\n  var vowelsCount = 0;\n  vowelsCount = str.match(/[aeiou]/gi);\n  return vowelsCount ? vowelsCount.length:0;\n}',29),(286,'26','23','function getCount(str) {\n  return (str.match(/[aeiou]/g) || []).length\n}',29),(287,'20','22','const getCount = str =&gt; str.replace(/[^aeiou]/g, &#39;&#39;).length;',29),(288,'17','0','function getCount(str) {\n  var vowelsCount = 0;\n  str.split(&quot;&quot;).forEach(function(x){\n    if(x == &quot;a&quot; | x == &quot;e&quot; | x == &quot;i&quot; | x == &quot;o&quot; | x == &quot;u&quot;){\n      vowelsCount += 1;\n    }\n  });  \n  return vowelsCount;\n}',29),(289,'13','51','function getCount(str) {\n  let vowels = [&#39;a&#39;,&#39;e&#39;,&#39;i&#39;,&#39;o&#39;,&#39;u&#39;];\n  return str.split(&#39;&#39;).filter(letter =&gt; {\n    return vowels.includes(letter)? true : false;\n  }).length;\n}',29),(290,'13','39','function getCount(str) {\n  var vowelsCount = 0;\n  for (index in str){\n    switch (str[index]) {\n    case &#39;a&#39;:\n    case &#39;e&#39;:\n    case &#39;i&#39;:\n    case &#39;o&#39;:\n    case &#39;u&#39;:\n    vowelsCount++;\n    break;\n    }   \n  }\n  return vowelsCount;\n}',29),(291,'1665','748','function disemvowel(str) {\n  return str.replace(/[aeiou]/gi, &#39;&#39;);\n}',30),(292,'123','56','function disemvowel(str) {\n  return (str || &quot;&quot;).replace(/[aeiou]/gi, &quot;&quot;);\n}',30),(293,'120','105','disemvowel = str =&gt; str.replace(/[aeiou]/gi,&#39;&#39;);',30),(294,'43','1','// without arrow function\nfunction disemvowel(str) { return str.replace(/[aeiou]/gi, &#39;&#39;) }',30),(295,'39','139','function disemvowel(str) {\n  var vowels = [&#39;a&#39;, &#39;e&#39;, &#39;i&#39;, &#39;o&#39;, &#39;u&#39;];\n  \n  return str.split(&#39;&#39;).filter(function(el) {\n    return vowels.indexOf(el.toLowerCase()) == -1;\n  }).join(&#39;&#39;);\n}\n',30),(296,'34','12','function disemvowel(str) {\n  var diemvoweledStr = str.replace(/[aeiou]/gi,&quot;&quot;);\n  return diemvoweledStr;\n}',30),(297,'33','33','const disemvowel = (str) =&gt; {\n	const vowels = [&#39;a&#39;, &#39;e&#39;, &#39;i&#39;, &#39;o&#39;, &#39;u&#39;, &#39;A&#39;, &#39;E&#39;, &#39;I&#39;, &#39;O&#39;, &#39;U&#39;];\n	let newStr = &#39;&#39;;\n	for (let i = 0; i &lt;= str.length; i++) {\n		let char = str.charAt(i);\n		if (vowels.indexOf(char) == -1) {\n			newStr += char;\n		}\n	}\n		return newStr;\n		\n	\n};',30),(298,'30','11','function disemvowel(str) {\n  return str.replace(/[aeiou]/ig,&#39;&#39;);\n}',30),(299,'29','29','const vowels = &#39;aeiou&#39;;\n\nfunction disemvowel(str) {\n  return str\n    .split(&#39;&#39;)\n    .filter(letter =&gt; !vowels.includes(letter.toLowerCase()))\n    .join(&#39;&#39;);\n}',30),(300,'25','11','function disemvowel(str) {\n  return str.replace(/[aeiouAEUIOU]/g, &#39;&#39;);\n}',30),(301,'316','592','function squareDigits(num){\n  return Number((&#39;&#39; + num).split(&#39;&#39;).map(function (val) { return val * val;}).join(&#39;&#39;));\n  \n}',31),(302,'100','34','function squareDigits(num){\n  var array = num.toString().split(&#39;&#39;).map( function(int) {\n    var i = parseInt(int);\n    return i * i;\n  });\n  \n  return parseInt(array.join(&quot;&quot;));\n}',31),(303,'74','18','function squareDigits(num){\n    var string = num.toString();\n    var results = [];\n    for (var i = 0; i &lt; string.length; i++){\n        results[i] = string[i] * string[i];\n    }\n    return Number(results.join(&#39;&#39;));\n};',31),(304,'65','86','function squareDigits(num){\n  return +num.toString().split(&#39;&#39;).map(i =&gt; i*i).join(&#39;&#39;);\n}',31),(305,'48','26','function squareDigits(num){\n  let result = num\n    .toString()\n    .split(&quot;&quot;)\n    .map( num =&gt; parseInt(num) )\n    .map( num =&gt; num * num )\n    .join(&quot;&quot;)\n   \n  return parseInt(result)\n}',31),(306,'18','14','function squareDigits(num){\n  return +String(num).split(&#39;&#39;).map(function(num){return +num * +num;}).join(&#39;&#39;);\n}',31),(307,'12','15','const squareDigits = (num) =&gt; Number((num + &#39;&#39;).split(&quot;&quot;).map(c =&gt; c *c).join(&quot;&quot;));\n',31),(308,'11','2','function squareDigits(num){\n  //may the code be with you\n  var numS = num.toString();\n  var output = &quot;&quot;;\n  for (var i = 0; i &lt; numS.length; i++) {\n    output += parseInt(numS[i]) * parseInt(numS[i]);\n  }\n  return parseInt(output);\n}',31),(309,'9','7','function squareDigits(num) {\n  var str = String(num)\n  var res = &#39;&#39;\n  \n  for (var i = 0; i &lt; str.length; i++) {\n    res += Math.pow(str.charCodeAt(i) - 48, 2)\n  }\n  \n  return parseInt(res)\n}',31),(310,'9','5','function squareDigits(num){\n  var numArray = num.toString(10).split(&#39;&#39;).map(Number);\n  var powArray = numArray.map(function (n) { return n * n; });\n  var powString = powArray.join(&#39;&#39;);\n\n  return parseInt(powString, 10);\n}',31),(311,'564','453','function highAndLow(numbers){\n  numbers = numbers.split(&#39; &#39;).map(Number);\n  return Math.max.apply(0, numbers) + &#39; &#39; + Math.min.apply(0, numbers);\n}',32),(312,'380','480','function highAndLow(numbers){\n  numbers = numbers.split(&#39; &#39;);\n  return `${Math.max(...numbers)} ${Math.min(...numbers)}`;\n}',32),(313,'62','36','function highAndLow(numbers) {\n  var arr = numbers.split(&quot; &quot;);\n  return Math.max.apply(null, arr) + &#39; &#39; + Math.min.apply(null, arr);\n}',32),(314,'51','31','function highAndLow(numbers){\n  let arr = numbers.split(&#39; &#39;).map(Number);  \n  return Math.max(...arr) + &#39; &#39; + Math.min(...arr);\n}',32),(315,'41','70','function highAndLow(numbers){\n  var arr = numbers.split(&#39; &#39;).sort(function(a, b) { return a - b });\n  return arr[arr.length -1] + &#39; &#39; + arr[0];\n}',32),(316,'40','14','function highAndLow(numbers) {\n  numbers = numbers.split(&#39; &#39;).map(Number)\n  \n  var min = Math.min.apply(null, numbers)\n  var max = Math.max.apply(null, numbers)\n  \n  return max + &#39; &#39; + min\n}',32),(317,'38','0','// tast for 55 sec\nfunction highAndLow(numbers){\n  numbers = numbers.split(&#39; &#39;).sort((a, b)=&gt; Number(a)-Number(b))\n  return [numbers[numbers.length-1], numbers[0]].join(&#39; &#39;)\n}',32),(318,'32','10','function highAndLow(numbers){\n\nvar numArray = numbers.split(&quot; &quot;);\nvar max      = Number(numArray[0]);\nvar min      = Number(numArray[0]);\nvar num;\n\nfor(var i = 1; i&lt; numArray.length; i++){\n\n  num = Number(numArray[i]);\n  \n  if(num &gt; max) max = num;\n  if(num &lt; min) min = num;\n}\n\nreturn max + &quot; &quot; + min;\n\n}',32),(319,'20','18','function highAndLow(numbers) {\n  numbers = numbers.split(&#39; &#39;).map(Number);\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  return `${max} ${min}`;\n}',32),(320,'15','8','function highAndLow(numbers){\n  numbers = numbers.split(&#39; &#39;);\n  \n  return Math.max(...numbers) + &#39; &#39; + Math.min(...numbers);\n}',32),(321,'470','725','function getMiddle(s)\n{\n  return s.substr(Math.ceil(s.length / 2 - 1), s.length % 2 === 0 ? 2 : 1);\n}',33),(322,'133','68','function getMiddle(s) {\n  var middle = s.length / 2;\n  return (s.length % 2) \n    ? s.charAt(Math.floor(middle))\n    : s.slice(middle - 1, middle + 1);\n}',33),(323,'88','145','function getMiddle(s)\n{\n  return s.slice((s.length-1)/2, s.length/2+1);\n}',33),(324,'53','12','function getMiddle(s)\n{\n  let middle = Math.floor(s.length/2);\n  \n  return s.length % 2 === 0\n        ? s.slice(middle-1, middle+1)\n        : s.slice(middle, middle+1);\n  \n}',33),(325,'22','5','function getMiddle(string) {\n  var middleIndex = string.length / 2;\n  if (string.length % 2 == 0) {\n    return string.slice(middleIndex - 1, middleIndex + 1);\n  } else {\n    return string.charAt(middleIndex);\n  }\n}',33),(326,'15','31','function getMiddle(s)\n{\n  return s.substring(Math.ceil(s.length/2)-1, Math.floor(s.length/2)+1)\n}',33),(327,'10','167','const getMiddle = s =&gt; s.substr(s.length - 1 &gt;&gt;&gt; 1, (~s.length &amp; 1) + 1);',33),(328,'9','8','function getMiddle(s)\n{\n  return s.length % 2 ? s.charAt(Math.floor(s.length/2)) : s.substr(s.length/2-1, 2);\n}',33),(329,'7','7','function getMiddle(s){\n  var a = s.length;\n    if (a == 1){console.log(a); return s}\n    if ( a &amp; 1 ) {\n	    a =  Math.floor(a/2);     \n     return s[a];\n 	} else {\n      a = (a/2);\n      return s[a-1]+s[a];\n	}\n}',33),(330,'6','3','function getMiddle(s)\n{\n    return s.length % 2 == 0 ? s.charAt((s.length-1) / 2) + s.charAt((s.length+1) / 2) : s.charAt(s.length / 2);\n}',33),(331,'1325','994','function isSquare(n) {\n  return Math.sqrt(n) % 1 === 0;\n}',34),(332,'336','237','const isSquare = n =&gt; Number.isInteger(Math.sqrt(n));',34),(333,'187','67','var isSquare = function(n){\n  return Number.isInteger(Math.sqrt(n));\n}',34),(334,'46','25','const isSquare = n =&gt; Math.sqrt(n) % 1 === 0',34),(335,'23','12','var isSquare = function(n){\n\n	if((Math.sqrt(n) % 1) == 0)\n		return true;\n	else\n		return false;\n}',34),(336,'15','14','var isSquare = function(n){\n  return Math.sqrt(n) % 1 === 0 ? true : false;\n};',34),(337,'15','13','var isSquare = function(n){\n  for (var x = 0; x &lt;= n; x++) {\n    if (n === 0) {\n      return true;\n    } else if (n / x === x) {\n      return true;\n    }\n  }\n\n  return false;\n}',34),(338,'10','151','var isSquare = function(n){\n  n = Math.sqrt(n);\n  return ~~n === n;\n}',34),(339,'6','9','var isSquare = function(n){\n  var r = Math.sqrt(n);\n  return r === Math.floor(r);\n}',34),(340,'6','2','var isSquare = function(n){\n  return Math.sqrt(n) % 1 == 0;\n}',34),(341,'924','638','function descendingOrder(n){\n  return parseInt(String(n).split(&#39;&#39;).sort().reverse().join(&#39;&#39;))\n}',35),(342,'92','150','function descendingOrder(n){\n  return +(n + &#39;&#39;).split(&#39;&#39;).sort(function(a,b){ return b - a }).join(&#39;&#39;);\n}',35),(343,'70','26','function descendingOrder(n){\n  return parseInt(n.toString().split(&#39;&#39;).sort().reverse().join(&#39;&#39;), 10);\n}',35),(344,'28','22','function descendingOrder(n) {\n  return parseInt(n.toString().split(&quot;&quot;).sort().reverse().join(&quot;&quot;));\n}',35),(345,'18','34','function descendingOrder(n) {\n  return n.digits().sort().reverse().undigits();\n}\n\nNumber.prototype.digits = function() {\n  const result = [];\n  let n = this;\n  do {\n    result.unshift(n % 10);\n    n = Math.floor(n / 10);\n  } while(n);\n  return result;\n};\n\nArray.prototype.undigits = function() {\n  return this.reduce((n, d) =&gt; n * 10 + d, 0);\n};',35),(346,'18','13','function descendingOrder(n) {\n  return +n.toString().split(&#39;&#39;).sort().reverse().join(&#39;&#39;);\n}',35),(347,'16','33','function descendingOrder(n){\n  return +(n+&#39;&#39;).split(&#39;&#39;).sort().reverse().join(&#39;&#39;)\n}',35),(348,'15','1','function descendingOrder(n){\n  return parseInt(n.toString().split(&#39;&#39;).sort(function(a, b){\n    return b - a;\n  }).join(&#39;&#39;));\n}',35),(349,'8','0','// I use parseInt() What are you using?\nconst descendingOrder = (n, arr = [...String(n)]) =&gt; parseInt( arr.sort((a, b)=&gt; b - a).join(&#39;&#39;) );',35),(350,'8','0','function descendingOrder(n){\n 	return parseInt(n.toString(10).split(&#39;&#39;).sort(function(a, b){\n			return b - a;\n		}).join(&#39;&#39;));\n}',35),(351,'673','516','function accum(s) {\n	return s.split(&#39;&#39;).map((c, i) =&gt; (c.toUpperCase() + c.toLowerCase().repeat(i))).join(&#39;-&#39;);\n}',36),(352,'129','378','function accum(s) {\n	return s.split(&#39;&#39;).map((x,index) =&gt; x.toUpperCase()+Array(index+1).join(x.toLowerCase())).join(&#39;-&#39;);\n}',36),(353,'73','29','function accum(str) {\n	var letters = str.split(&#39;&#39;);\n  var result = [];\n  for (var i = 0; i &lt; letters.length; i++) {\n    result.push(letters[i].toUpperCase() + Array(i + 1).join(letters[i].toLowerCase()));\n  }\n  return result.join(&#39;-&#39;);\n}',36),(354,'49','48','function accum (s) {\n	return [...s].map((element, index) =&gt; {\n    return element.toUpperCase() + element.toLowerCase().repeat(index);\n  }).join(&#39;-&#39;);\n}',36),(355,'29','6','function accum(str) {\n  var res = [];\n  for(var i = 0; i &lt; str.length; i++) {\n    var row = &#39;&#39;;\n    for(var j = 0; j &lt; i + 1; j++) {\n      row += j===0 ? str[i].toUpperCase() : str[i].toLowerCase();      \n    }\n    res.push(row);\n  }\n  return res.join(&#39;-&#39;);\n}',36),(356,'16','9','function accum(s) {\n  var array = [];\n  for (i = 0; i &lt; (s.length); i++) {\n    array.push(s.charAt(i).toUpperCase() + s.charAt(i).toLowerCase().repeat(i));\n  };\n  return array.join(&quot;-&quot;);\n}',36),(357,'15','2','function accum(s) {\n	return s.split(&#39;&#39;)\n  .map((item, index) =&gt; item.toUpperCase() + item.toLowerCase().repeat(index))\n  .join(&#39;-&#39;);\n}',36),(358,'12','20','function accum(s) {\n	return s.split(&#39;&#39;).map((x,i) =&gt; x.toUpperCase() + x.toLowerCase().repeat(i)).join(&#39;-&#39;);\n}\n\nString.prototype.repeat = function (count) {\n    &quot;use strict&quot;;\n    if (this == null)\n      throw new TypeError(&quot;ne peut convertir &quot; + this + &quot; en objet&quot;);\n    var str = &quot;&quot; + this;\n    count = +count;\n    if (count != count)\n      count = 0;\n    if (count &lt; 0)\n      throw new RangeError(&quot;le nombre de répétitions doit être positif&quot;);\n    if (count == Infinity)\n      throw new RangeError(&quot;le nombre de répétitions doit être inférieur à l&#39;infini&quot;);\n    count = Math.floor(count);\n    if (str.length == 0 || count == 0)\n      return &quot;&quot;;\n    // En vérifiant que la longueur résultant est un entier sur 31-bit\n    // cela permet d&#39;optimiser l&#39;opération.\n    // La plupart des navigateurs (août 2014) ne peuvent gérer des\n    // chaînes de 1 &lt;&lt; 28 caractères ou plus. Ainsi :\n    if (str.length * count &gt;= 1 &lt;&lt; 28)\n      throw new RangeError(&quot;le nombre de répétitions ne doit pas dépasser la taille de chaîne maximale&quot;);\n    var rpt = &quot;&quot;;\n    for (;;) {\n      if ((count &amp; 1) == 1)\n        rpt += str;\n      count &gt;&gt;&gt;= 1;\n      if (count == 0)\n        break;\n      str += str;\n    }\n    return rpt;\n  }',36),(359,'8','0','function accum(s) {\n	return (s.split(&#39;&#39;).map((c,i)=&gt;{\n    var res = c.toUpperCase(); \n    for(var j = 1 ; j &lt;= i ; j++) {\n      res += c.toLowerCase();\n    }\n    return res;\n  }).join(&#39;-&#39;));\n}',36),(360,'6','0','const repeat = (s, n) =&gt; Array.from({length: n}, () =&gt; s).join(&quot;&quot;)\nconst accum = (s) =&gt; s.split(&quot;&quot;).map((c, i) =&gt; c.toUpperCase() + repeat(c.toLowerCase(), i)).join(&quot;-&quot;)\n',36),(361,'391','757','function findShort(s){\n  return Math.min.apply(null, s.split(&#39; &#39;).map(w =&gt; w.length));\n}',37),(362,'275','292','function findShort(s){\n    return Math.min(...s.split(&quot; &quot;).map (s =&gt; s.length));\n}',37),(363,'134','34','function findShort(s){\n	var arr = s.split(&#39; &#39;);\n	var smallest = arr[0];\n	for (var i = 0; i &lt; arr.length; i++) {\n		if(arr[i].length &lt; smallest.length){\n			smallest = arr[i];\n		}\n	}\n	return smallest.length;\n}',37),(364,'71','234','const findShort = (s) =&gt; s\n  .split(&#39; &#39;)\n  .sort((a, b) =&gt; b.length - a.length)\n  .pop()\n  .length;',37),(365,'35','47','function findShort(s) {\n  return s.split(&#39; &#39;).reduce((min, word) =&gt; Math.min(min, word.length), Infinity);\n}',37),(366,'23','1','function findShort(s){\n  var arr = s.split(&#39; &#39;);\n  var min = arr[0].length;\n  for (var i = 1; i &lt; arr.length; i++) {\n    if (arr[i].length &lt; min) {\n      min = arr[i].length;\n    }\n  }\n  return min\n}',37),(367,'19','28','function findShort(s){\n  return s.split(&#39; &#39;).sort((a, b) =&gt; a.length - b.length)[0].length || 0;\n}',37),(368,'18','24','function findShort(s){\n  return s\n    .split(&#39; &#39;)\n    .map(a =&gt; a.length)\n    .reduce((a, b) =&gt; Math.min(a, b))\n}',37),(369,'8','3','function findShort(string) {\n  var array = string.split(&#39; &#39;);\n  var shortest = null;\n  \n  for (var i=0, l=array.length; i&lt;l; ++i)\n  {\n    if (shortest == null || array[i].length &lt; shortest)\n      shortest = array[i].length;\n  }\n  \n  return shortest;\n}',37),(370,'7','38','function findShort(s){\n  return Math.min(...s.split(/\\s/).map((w) =&gt; w.length));\n}',37),(371,'539','677','function XO(str) {\n  let x = str.match(/x/gi);\n  let o = str.match(/o/gi);\n  return (x &amp;&amp; x.length) === (o &amp;&amp; o.length);\n}',38),(372,'142','200','const XO = str =&gt; {\n  str = str.toLowerCase().split(&#39;&#39;);\n  return str.filter(x =&gt; x === &#39;x&#39;).length === str.filter(x =&gt; x === &#39;o&#39;).length;\n}',38),(373,'65','245','function XO(str) {\n    var a = str.replace(/x/gi, &#39;&#39;),\n        b = str.replace(/o/gi, &#39;&#39;);\n    return a.length === b.length;\n}',38),(374,'57','256','function XO(str) {\n    return str.toLowerCase().split(&#39;x&#39;).length === str.toLowerCase().split(&#39;o&#39;).length;\n}',38),(375,'24','91','function XO(str) {\n  return str.replace(/o/ig, &#39;&#39;).length == str.replace(/x/ig, &#39;&#39;).length\n}',38),(376,'20','3','function XO(str) {\n    let countX = countStr(str, &#39;x&#39;);\n    let countO = countStr(str, &#39;o&#39;);\n    return countX === countO;\n}\n\nfunction countStr(s, match) {\n  let regex = new RegExp(match, &quot;gi&quot;);\n  return (s.match(regex) || []).length;\n}',38),(377,'15','93','function XO(str) {\n  var sum = 0;\n  for(var i=0; i&lt;str.length; i++){\n    if(str[i].toLowerCase() == &#39;x&#39;) sum++;\n    if(str[i].toLowerCase() == &#39;o&#39;) sum--;\n  }\n  return sum == 0;\n}',38),(378,'13','1','function XO(str) {\n    if(str==&quot;&quot; ||　str==null)return true;\n    str = str.toLowerCase();\n    var list = str.split(&quot;&quot;); \n    var xNum = 0;\n    var oNum = 0;\n    for(var i=0;i&lt;list.length;i++){\n      if(list[i]===&#39;x&#39;){\n        xNum++;\n      }\n       if(list[i]===&#39;o&#39;){\n        oNum++;\n      }\n    }\n    if(xNum===oNum)\n      return true;\n    return false;\n}',38),(379,'6','14','const XO = str =&gt; {\n    let x = (str.match(/x|X/g) || []).length;\n    let o = (str.match(/o|O/g) || []).length;\n    return x === o;\n}',38),(380,'6','1','function XO(str) {\n    str = str.toLowerCase();\n    return (str.match(/o/g) || []).length === (str.match(/x/g) || []).length;\n}',38),(381,'1034','360','String.prototype.toJadenCase = function () { \n  return this.split(&quot; &quot;).map(function(word){\n    return word.charAt(0).toUpperCase() + word.slice(1);\n  }).join(&quot; &quot;);\n}',39),(382,'223','842','String.prototype.toJadenCase = function () {\n  return this.replace(/(^|\\s)[a-z]/g, function(x){ return x.toUpperCase(); });\n};',39),(383,'116','45','String.prototype.toJadenCase = function() {\n  return this.split(&#39; &#39;).map(item =&gt; item[0].toUpperCase() + item.slice(1)).join(&#39; &#39;)\n};',39),(384,'95','48','String.prototype.toJadenCase = function () {\n\n  function capitalizeFirstLetter(string) {\n      return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n  \n  return this.split(&#39; &#39;).map(capitalizeFirstLetter).join(&#39; &#39;);\n};',39),(385,'25','9','String.prototype.toJadenCase = function () {\n  var words = this.split(&#39; &#39;);\n\n  for(var i = 0, wordsLen = words.length; i &lt; wordsLen; i++) {\n    words[i] = words[i][0].toUpperCase() + words[i].slice(1);\n  }\n\n  return words.join(&#39; &#39;);\n};',39),(386,'25','7','String.prototype.toJadenCase = function () {\n  return this.split(&#39; &#39;)\n    .map(word =&gt; word.charAt(0).toUpperCase() + word.slice(1))\n    .join(&#39; &#39;);\n};',39),(387,'12','19','String.prototype.toJadenCase = function () {\n  var x = &#39;&#39;;\n  x += this[0].toUpperCase();\n  for (var i = 1; i &lt; this.length; i++) {\n    if (this.charAt(i) == &quot; &quot;) {\n      x += (this[i] + this[i + 1].toUpperCase());\n      i++; // Increment i to stop the function concatenating the first letter of a new word twice\n    } else {\n      x += this[i];\n    }\n  }\n  return x;\n};',39),(388,'11','30','String.prototype.toJadenCase = function () {\n  return this.replace(/(?:^|\\s)\\S/g, function(c) { return c.toUpperCase(); });\n};',39),(389,'11','3','String.prototype.toJadenCase = function () {\n  return this.split(&#39; &#39;).\n    map(w =&gt; w[0].toUpperCase() + w.slice(1)).join(&#39; &#39;);\n};',39),(390,'9','14','String.prototype.toJadenCase = function() {\n  return this.replace(/(^|\\s)[a-z]/g, function(s){ return s.toUpperCase() });\n};',39),(391,'484','698','function DNAStrand(dna) {\n  return dna.replace(/./g, function(c) {\n    return DNAStrand.pairs[c]\n  })\n}\n\nDNAStrand.pairs = {\n  A: &#39;T&#39;,\n  T: &#39;A&#39;,\n  C: &#39;G&#39;,\n  G: &#39;C&#39;,\n}',40),(392,'257','201','var pairs = {&#39;A&#39;:&#39;T&#39;,&#39;T&#39;:&#39;A&#39;,&#39;C&#39;:&#39;G&#39;,&#39;G&#39;:&#39;C&#39;};\n\nfunction DNAStrand(dna){\n  return dna.split(&#39;&#39;).map(function(v){ return pairs[v] }).join(&#39;&#39;);\n}',40),(393,'55','124','let pairs = {A:&#39;T&#39;,T:&#39;A&#39;,C:&#39;G&#39;,G:&#39;C&#39;};\nconst DNAStrand = dna =&gt; dna.replace(/./g, c =&gt; pairs[c]);',40),(394,'45','23','function DNAStrand(dna){\n  //your code here\n  var result= &quot;&quot;;\n		  for(var i =0; i&lt;dna.length; i++) \n		  {\n        if (dna[i]===&quot;A&quot;) \n       {\n        result +=&quot;T&quot;;\n       }\n        else if (dna[i]===&quot;T&quot;) \n       {\n        result += &quot;A&quot;;\n        }\n        else if (dna[i]===&quot;C&quot;)\n        {\n        result +=&quot;G&quot;;\n        }\n        else if (dna[i]===&quot;G&quot;)\n        {\n        result += &quot;C&quot;;\n        }\n        else {\n        result +=dna[i];\n        }\n		 }\n     return result;\n	}\n   \n',40),(395,'29','2','function DNAStrand(dna){\n  //your code here\n  var res=&quot;&quot;;\n  for(var i=0; i&lt;dna.length; i++) {\n    switch(dna[i]) {\n      case &#39;A&#39;:\n        res += &quot;T&quot;;\n        break;\n      case &#39;T&#39;:\n        res += &quot;A&quot;;\n        break;\n      case &#39;G&#39;:\n        res += &quot;C&quot;;\n        break;\n      case &#39;C&#39;:\n        res += &quot;G&quot;;\n        break;\n    }\n  }\n  return res;\n}',40),(396,'28','82','function DNAStrand(dna) {\n  return dna.split(&#39;&#39;).map(function(v) {return {A:&#39;T&#39;, T:&#39;A&#39;, C:&#39;G&#39;, G:&#39;C&#39;}[v];}).join(&#39;&#39;);\n}',40),(397,'27','17','function DNAStrand(dna){\n  var table = {\n    C : &#39;G&#39;,\n    G : &#39;C&#39;,\n    A : &#39;T&#39;,\n    T : &#39;A&#39;\n  };\n    \n  return dna.split(&#39;&#39;).map(function(cv) {\n    return table[cv]; \n  }).join(&#39;&#39;);\n}',40),(398,'22','85','function DNAStrand(dna){\n  return dna.replace(/A/g, &#39;t&#39;).replace(/T/g, &#39;a&#39;).replace(/C/g, &#39;g&#39;).replace(/G/g, &#39;c&#39;).toUpperCase();\n}',40),(399,'17','70','const DNAStrand = dna =&gt; dna.replace(/./g, m =&gt; &#39;CGAT&#39;[&#39;GCTA&#39;.indexOf(m)]);',40),(400,'11','12','function DNAStrand(dna){\n  return dna.replace(/[ACGT]/g, function(l){ return pairs[l] });\n}\n\nvar pairs = {\n  A:&#39;T&#39;,\n  T:&#39;A&#39;,\n  G:&#39;C&#39;,\n  C:&#39;G&#39;\n};',40),(401,'676','333','function filter_list(l) {\n  return l.filter(function(v) {return typeof v == &#39;number&#39;})\n}',41),(402,'427','155','function filter_list(l) {\n return l.filter(v =&gt; typeof v == &quot;number&quot;)\n}',41),(403,'160','104','function filter_list(l) {\n  return l.filter(e =&gt; Number.isInteger(e));\n}',41),(404,'144','236','function filter_list(l) {\n  return l.filter(Number.isInteger);\n}',41),(405,'98','68','const filter_list = l =&gt; l.filter(c =&gt; typeof c === &#39;number&#39;);',41),(406,'44','20','function filter_list(l) {\n  return l.filter( function(elem){return typeof elem != &quot;string&quot;} )\n}',41),(407,'40','33','function filter_list(l) {\nvar res = [];\n            for(var item=0;item&lt;l.length;item++)\n            {\n                if (typeof l[item] === &quot;number&quot;)\n                {\n                    res.push(l[item]);\n                }\n  \n            }\n            return res;\n}',41),(408,'23','12','function filter_list(l) {\n  return l.filter(i=&gt; typeof i !== &#39;string&#39;);\n}',41),(409,'16','0','function filter_list(l) {\n  return l.filter(x =&gt; typeof(x) ==&quot;number&quot;);\n}',41),(410,'11','4','function filter_list(l) {\n  return l.filter(function(item) {\n    return typeof item === &#39;number&#39;;\n  });\n}',41),(411,'459','1338','function isIsogram(str){ \n  return !/(\\w).*\\1/i.test(str)\n}\n//z.',42),(412,'373','593','function isIsogram(str){\n	return new Set(str.toUpperCase()).size == str.length;\n}',42),(413,'165','41','function isIsogram(str){\n  var i, j;\n  str = str.toLowerCase();\n  for(i = 0; i &lt; str.length; ++i)\n    for(j = i + 1; j &lt; str.length; ++j)\n      if(str[i] === str[j])\n        return false;\n  return true;\n}',42),(414,'43','126','function isIsogram(str){\n  return !str.match(/([a-z]).*\\1/i);\n}',42),(415,'38','18','function isIsogram(str)  {\n  // Downcase everything, split on letters.\n  str_lc = str.toLowerCase();\n  var letters = str_lc.split(&#39;&#39;);\n  \n  // Utility: checks whether the given &quot;value&quot; at &quot;index&quot; is actually\n  // first encountered at this &quot;index&quot; position within a string (&quot;self&quot;).\n  // Expected to be used with Array#filter.\n  var check4uniqueness = function(value, index, self) { \n    return self.indexOf(value) === index;\n  }\n  \n  // An isogram string contains no duplicate, hence must have the same\n  // length than the array composed of unique letters from that string.\n  return letters.filter(check4uniqueness).length == str.length;\n}',42),(416,'23','39','function isIsogram (str) {\n  return !str || (str.length === new Set(str.toLowerCase()).size);\n}',42),(417,'22','41','function isIsogram(str) {\n  str = str.toLowerCase()\n  \n  for (var i = 0; i &lt; str.length; i++) {\n    if (str.indexOf(str.charAt(i), i + 1) &gt;= 0) {\n      return false\n    }\n  }\n  \n  return true\n}',42),(418,'15','9','function isIsogram(str) {\n  var map = {};\n  var result = true;\n  str.split(&#39;&#39;).forEach(function(char) {\n    if (map[char.toUpperCase()] === undefined) {\n      map[char.toUpperCase()] = 1;\n    } else {\n      result = false;\n    }\n  });\n  return result;\n}',42),(419,'14','41','function isIsogram(str) {\n  return !str || str.toLowerCase().split(&#39;&#39;).every(function(v, i, arr) {return arr.indexOf(v) == i;});\n}',42),(420,'10','7','function isIsogram(str){\n  //Create array from string and make it uppercased\n  var arr = str.split(&#39;&#39;).map(function(el) {\n    return el.toUpperCase();\n  }); \n  //Test each value for duplicates.\n  return arr.every(function(el) {\n    return arr.indexOf(el) == arr.lastIndexOf(el);\n  });\n}',42),(421,'657','1184','const GetSum = (a, b) =&gt; {\n  let min = Math.min(a, b),\n      max = Math.max(a, b);\n  return (max - min + 1) * (min + max) / 2;\n}',43),(422,'147','366','function GetSum( a,b )\n{\n   if (a == b) return a;\n   else if (a &lt; b) return a + GetSum(a+1, b);\n   else return a + GetSum(a-1,b);\n}',43),(423,'143','270','function GetSum(a,b)\n{\n  return (Math.abs(a - b) + 1) * (a+b) / 2;\n}',43),(424,'59','43','function GetSum( a,b )\n{\n  tmp = 0;\n  \n  if(a &lt; b)\n    while(a &lt;= b) tmp += a++;\n  else\n    while(a &gt;= b) tmp += a--;\n      \n  return tmp;\n}',43),(425,'54','19','function GetSum( a,b ) {\n   var result = 0;\n   var bigger = a &gt; b ? a : b;\n   var smaller = a &gt; b ? b : a;\n   for (var i = smaller; i &lt;= bigger; i++) { result += i }\n   return result\n}',43),(426,'31','12','function GetSum( a,b )\n{\n//if both a and b are equal return a\n   if(a===b){\n     return a;\n   }\n   var result = 0;\n   \n   var x = a, y = b;\n // check the larger and smaller numbers and assign them to x and y\n   if(a &gt; b) {\n      x = b, y = a;\n   }\n //in a loop add the numbers from the smaller one until it reaches the larger number\n   for(var i = x; i &lt;=y; i++ ) {\n     result += i;\n   }\n   return result;\n   \n}',43),(427,'21','0','function getSum( a, b ){\n  return Array.from({length: b &gt;= a ? b-a+1 : a-b+1}, (_, i)=&gt; b &gt;= a ? i+a : i+b).reduce((a, b)=&gt; a + b, 0)\n}',43),(428,'20','32','function GetSum(a, b) {\n  return (a + b) * (Math.abs(a - b) + 1) / 2;\n}',43),(429,'15','82','const GetSum= (a, b, x=Math.min(a,b), y=Math.max(a,b)) =&gt; (y-x+1)*(x+y)/2',43),(430,'12','75','function GetSum(a, b) {\n   return a &gt; b ? GetSum(b, a) : (b - a + 1) * (b + a) / 2;\n}',43),(431,'703','322','function sumTwoSmallestNumbers(numbers){  \n  numbers = numbers.sort(function(a, b){return a - b; });\n  return numbers[0] + numbers[1];\n};',44),(432,'241','619','function sumTwoSmallestNumbers(numbers) {  \n  var [ a, b ] = numbers.sort((a, b) =&gt; a - b)\n  return a + b\n}',44),(433,'76','48','function sumTwoSmallestNumbers(numbers) {  \n  var min = Number.MAX_SAFE_INTEGER;\n  var secondMin = Number.MAX_SAFE_INTEGER;\n  \n  var n;\n  for (i = 0; i &lt; numbers.length; i++) {\n    n = numbers[i];\n  	if(n &lt; min) {\n    	secondMin = min;\n      min = n;\n    } else if( n &lt; secondMin ) {\n    	secondMin = n;\n    }\n  }\n  \n  return min + secondMin;\n}',44),(434,'70','26','function sumTwoSmallestNumbers(numbers) {  \n  numbers.sort((a,b) =&gt; a - b);\n  return numbers[0] + numbers[1];\n};',44),(435,'60','225','const sumTwoSmallestNumbers = numbers =&gt; numbers.sort((x, y) =&gt; x - y).slice(0, 2).reduce((x, y) =&gt; x + y);',44),(436,'25','2','//...\nvar sumTwoSmallestNumbers = (numbers) =&gt; numbers.sort((a,b)=&gt; a-b).slice(0, 2).reduce((a,b)=&gt; a+b)',44),(437,'23','6','function sumTwoSmallestNumbers(numbers) {  \n  numbers.sort(function (a, b) { \n    return a - b;\n  });\n  return numbers[0] + numbers[1];\n};',44),(438,'20','11','function sumTwoSmallestNumbers(numbers) {  \n  var smallestNumber = 0,\n      secondSmallest = 0;\n  \n  smallestNumber = Math.min(numbers[0], numbers[1]);\n  secondSmallest = Math.max(numbers[0], numbers[1]);\n  \n  for (var index = 2; index &lt; numbers.length; index++) {\n    if (numbers[index] &lt; smallestNumber) {\n      secondSmallest = smallestNumber;\n      smallestNumber = numbers[index];\n    } else if (numbers[index] &lt; secondSmallest) {\n      secondSmallest = numbers[index];\n    }\n  }\n  \n  return (smallestNumber + secondSmallest);\n};',44),(439,'9','3','function sumTwoSmallestNumbers(numbers) {  \n  //Code here  \n\n numbers.sort(compare);\n \n function compare(a,b) {\n   return a-b;\n }\n  \n  return numbers[0] + numbers[1];\n\n  \n};',44),(440,'7','12','function sumTwoSmallestNumbers(numbers) {  \n  var lowest = numbers.sort(function(a, b){return b-a}).slice(-2);\n  return lowest.pop() + lowest.pop();\n};',44),(441,'763','894','function maskify(cc) {\n  return cc.slice(0, -4).replace(/./g, &#39;#&#39;) + cc.slice(-4);\n}\n',45),(442,'215','513','// return masked string\nfunction maskify(cc) {\n  return cc.replace(/.(?=....)/g, &#39;#&#39;);\n}\n',45),(443,'130','186','function maskify(cc) {\n  return cc.replace(/.(?=.{4})/g, &quot;#&quot;);\n}',45),(444,'68','53','// return masked string\nfunction maskify(cc) {\n  cc = cc.split(&quot;&quot;);\n  for(var i = 0; i &lt; cc.length - 4; i++){\n    cc[i] = &quot;#&quot;;\n}\n\ncc = cc.join(&quot;&quot;);\nreturn cc\n}\n',45),(445,'60','110','maskify = (cc) =&gt; &#39;#&#39;.repeat(Math.max(0, cc.length - 4)) + cc.substr(-4);',45),(446,'40','12','// card numbers is good\nfunction maskify(cc) {\n  return cc.slice(-4).padStart(cc.length,&#39;#&#39;)\n}\n',45),(447,'21','40','// return masked string\nfunction maskify(cc) {\n  return &#39;#&#39;.repeat(cc.slice(0, -4).length) + cc.slice(-4);\n}',45),(448,'20','6','// return masked string\nfunction maskify(cc) {\n  var maskedString = &quot;&quot;;\n  for(var i = 0; i &lt; cc.length; i++) {\n    if(i &lt; cc.length - 4) {\n      maskedString = maskedString + &quot;#&quot;;\n    } else {\n      maskedString = maskedString + cc.charAt(i);\n    };\n  }\n  return maskedString;\n}\n',45),(449,'18','36','// return masked string\nfunction maskify(cc) {\n  return cc.replace(/(?=.{5})./g, &#39;#&#39;)\n}\n',45),(450,'17','25','const maskify = cc =&gt; cc.slice(-4).padStart(cc.length, &#39;#&#39;)',45),(451,'327','348','function nbYear(p0, percent, aug, p) {\n  for(var y = 0; p0 &lt; p; y++) p0 = p0 * (1 + percent / 100) + aug;\n  return y;\n}',46),(452,'316','49','function nbYear(p0, percent, aug, p) {\n    var count = 0;   \n    while(p0&lt;p){\n        p0 += p0 * percent/100 + aug;\n        count++;\n    }\n    return count;\n}',46),(453,'47','191','function nbYear(p0, percent, aug, p) {\n  if(p0 &gt;= p) {\n    return 0;\n  } else {\n    return 1+nbYear(p0*(1+percent/100)+aug, percent, aug, p);\n  }\n}',46),(454,'29','164','function nbYear(p0, percent, aug, p, years = 0) {\n  return p0 &lt; p ? nbYear(p0 + p0 * percent / 100 + aug, percent, aug, p, years + 1) : years; \n}',46),(455,'28','10','function nbYear(p0, percent, aug, p) {\n    var year = 0;\n    while (p0 &lt; p) {\n      p0 += (p0 * (percent/100)) + aug;\n      year++;\n    }\n    return year;\n}',46),(456,'17','3','function nbYear(p0, percent, aug, p) {\n    // variables needed\n    var years   = 1,    \n        percent = percent / 100,\n        pCalc   = (p0 * (1 + percent)) + aug;\n    \n    // loop while calculated population is less than \n    // projected population and increment year and run\n    // formula again.\n    while (pCalc &lt; p) {\n      years++;\n      pCalc = (pCalc * (1 + percent)) + aug;\n    }\n    \n    // somehow i feel this funtion is highly inefficient\n    return years;\n}',46),(457,'15','7','function nbYear(p0, percent, aug, p) {y=0; while (p0&lt;p) {p0+=p0*percent/100+aug; y++} return y}',46),(458,'11','1','function nbYear(p0, percent, aug, p) {\n    let pc = p0;\n    let needYears = 0;\n    while(pc &lt; p){\n      pc = pc + pc * percent / 100 + aug;\n      needYears++;\n    }\n    return needYears;\n}',46),(459,'10','0','function nbYear(p0, percent, aug, p) {\n  const inhar = (p0, percent, aug) =&gt; p0 + p0 * percent/100 + aug;\n  let count = 0\n  while(p0 &lt; p){\n    p0 = inhar(p0, percent, aug)\n    count += 1;\n  } \n  return count\n}',46),(460,'7','12','function nbYear(p0, percent, aug, p) {\n  with(Math) return (percent/=100) ? ceil(log((percent*p+aug)/(percent*p0+aug))/log(1+percent)) : ceil((p-p0)/aug)\n}',46),(461,'700','342','function isTriangle(a,b,c)\n{\n   return a + b &gt; c &amp;&amp; a + c &gt; b &amp;&amp; c + b &gt; a;\n}',47),(462,'43','367','function isTriangle(a,b,c)\n{\n  [a, b, c] = [a, b, c].sort((x, y) =&gt; x-y);\n  \n  return a+b &gt; c;\n}',47),(463,'40','255','var isTriangle = (a,b,c) =&gt; Math.max(a,b,c)&lt;(a+b+c)/2\n',47),(464,'26','6','function isTriangle(a,b,c) {\n	if(a &gt; 0 &amp;&amp; b &gt; 0 &amp;&amp; c &gt; 0) {\n    if(a &lt; b + c &amp;&amp; b &lt; a + c &amp;&amp; c &lt; a + b) {\n      return true;\n    }\n    else {\n    	return false;\n    }\n  }\n	else {\n   return false;\n	}\n}\n\nconsole.log(isTriangle(1,2,2));\nconsole.log(isTriangle(-1,2,2));\nconsole.log(isTriangle(-1,-2,2));\nconsole.log(isTriangle(4,5,2));\nconsole.log(isTriangle(0,5,2));\nconsole.log(isTriangle(0,0,0));\n',47),(465,'13','21','function isTriangle(a,b,c) {\n  var sides = [a, b, c].sort();\n  return (sides[0] + sides[1] &gt; sides[2]);\n}',47),(466,'11','15','function isTriangle(a,b,c)\n{\n   return a+b&gt;c&amp;&amp;a+c&gt;b&amp;&amp;b+c&gt;a\n}',47),(467,'9','35','    function isTriangle(a, b, c) {\n        var max = Math.max(a, b, c);\n        return a + b + c - max &gt; max;\n    }',47),(468,'7','3','function isTriangle(a,b,c)\n{\n return Math.max(a,b,c)&lt;(a+b+c-Math.max(a,b,c));\n}',47),(469,'7','2','function isTriangle(a,b,c)\n{\n  return ( (b+c)&gt;a &amp;&amp; (a+b)&gt;c &amp;&amp; (a+c)&gt;b );\n}',47),(470,'4','7','const isTriangle = (a,b,c) =&gt; a+b&gt;c&amp;&amp;a+c&gt;b&amp;&amp;b+c&gt;a;\n',47),(471,'592','896','const longest = (s1, s2) =&gt; [...new Set(s1+s2)].sort().join(&#39;&#39;)',48),(472,'154','172','function longest(s1, s2) {\n  return Array.from(new Set(s1 + s2)).sort().join(&#39;&#39;);\n}',48),(473,'31','59','function longest(s1, s2) {\n  // your code\n  s3 = s1 + s2;\n  s4 = s3.split(&quot;&quot;);\n  s4 = s4.sort().filter(function(element, index, array){\n    return element !== array[index - 1];\n  });\n  return s4.join(&quot;&quot;);\n}',48),(474,'20','40','function longest(s1, s2) {\nlet str = new Set([...s1, ...s2]);\nreturn [...str].sort().join(&#39;&#39;);\n}',48),(475,'14','63','function longest(s1, s2) {\n  return (s1+s2).split(&#39;&#39;).sort().join(&#39;&#39;).replace(/(.)\\1+/g, &#39;$1&#39;);\n}',48),(476,'14','0','function longest(s1, s2) {\n    let output = [];\n    let combi = s1.concat(s2);\n    let array = combi.split(&#39;&#39;).sort();\n \n    for (let i = 0; i &lt;= array.length; i++) {\n        console.log(array[i]);//test\n        if (!output.includes(array[i]) ) {\n              output.push(array[i]);\n        }\n    }\n    return output.join(&#39;&#39;);\n}\nconsole.log(longest(&#39;xyaaAbbbccccdefww&#39;, &#39;xxxxyyyyabklmopq&#39;));',48),(477,'13','0','const longest = ($1, $2) =&gt; [...new Set([...$1, ...$2])].sort().join(&#39;&#39;)',48),(478,'10','4','function longest(s1, s2) {\n  // your code\n  let duplicates = {}, uniqueChars = [];\n  for(let i = 0; i &lt; Math.max(s1.length,s2.length); i++){\n    if(i &lt; s1.length){\n      if(duplicates[s1[i]]){\n        duplicates[s1[i]]++\n      } else {\n        duplicates[s1[i]] = 1;\n      }\n    }\n    if(i &lt; s2.length){\n      if(duplicates[s2[i]]){\n        duplicates[s2[i]]++\n      } else {\n        duplicates[s2[i]] = 1;\n      }\n    }\n  }\n  for(let key in duplicates){\n    uniqueChars.push(key)\n  }\n  return uniqueChars.sort().join(&#39;&#39;)\n}',48),(479,'9','25','const longest = (s1, s2) =&gt; Array.from(s1 + s2)\n  .sort()\n  .filter((x, i, a) =&gt; x !== a[i-1])\n  .join(&#39;&#39;);\n',48),(480,'9','7','function longest(s1, s2) {  \n  return [...(new Set(s1 + s2))].sort().join(&#39;&#39;);\n}',48),(481,'644','1058','var moveZeros = function (arr) {\n  return arr.filter(function(x) {return x !== 0}).concat(arr.filter(function(x) {return x === 0;}));\n}',49),(482,'196','102','var moveZeros = function (arr) {\n  var filtedList = arr.filter(function (num){return num !== 0;});\n  var zeroList = arr.filter(function (num){return num === 0;});\n  return filtedList.concat(zeroList);\n}',49),(483,'91','58','var moveZeros = function (arr) {\n  return arr\n    .filter((val) =&gt; val !== 0)\n    .concat(arr.filter((val) =&gt; val === 0));\n}\n',49),(484,'77','85','var moveZeros = function (arr) {\n  let result = arr.filter(c =&gt; c !== 0)\n  let count = arr.length - result.length\n  \n  return result.concat(Array(count).fill(0))\n}',49),(485,'60','181','var moveZeros = function (arr) {\n  return [\n    ...(arr.filter(n =&gt; n !== 0)),\n    ...(arr.filter(n =&gt; n === 0))\n  ];\n}',49),(486,'49','61','var moveZeros = function (arr) {\n  for(var i = arr.length - 1; i &gt;= 0; i--) {\n    if(arr[i] === 0) {\n      arr.splice(i, 1);\n      arr.push(0);\n    }\n  }\n  return arr;\n}',49),(487,'33','50','let moveZeros = (arr) =&gt; arr.filter(i =&gt; i !== 0).concat(arr.filter(i =&gt; i === 0));',49),(488,'32','67','var moveZeros = function (arr) {\n  return arr.reduceRight(function(prev, curr) {\n    if (curr !== 0) {\n      prev.unshift(curr);\n    }\n    else {\n      prev.push(curr);\n    }\n    return prev;\n  }, []);\n}',49),(489,'20','4','var moveZeros = function (arr) {\n  return arr.filter(x =&gt; x !== 0).concat(arr.filter(x =&gt; x === 0));\n}',49),(490,'19','7','var moveZeros = function (arr) {\n\n  var result = [];\n  var zeros = [];\n\n  for (var i in arr) {\n    if (arr[i] === 0) {\n      zeros.push(arr[i]);\n    } else if (arr[i] !== 0) {\n      result.push(arr[i]);\n    }\n  }\n  return result.concat(zeros);\n}',49),(491,'430','1422','function pigIt(str){\n  return str.replace(/(\\w)(\\w*)(\\s|$)/g, &quot;\\$2\\$1ay\\$3&quot;)\n}',50),(492,'92','66','function pigIt(str) {\n  return str.replace(/\\w+/g, (w) =&gt; {\n    return w.slice(1) + w[0] + &#39;ay&#39;;\n  });\n}',50),(493,'35','11','function pigIt(str) {\n  var arrayWord = str.split(&#39; &#39;);\n  return arrayWord.map(function(word) {\n    var firstLetter = word.charAt(0);\n    return word.slice(1) + firstLetter + &#39;ay&#39;;\n  }).join(&#39; &#39;);\n}',50),(494,'21','22','/*\n5kyu:Simple Pig Latin\nMove the first letter of each word to the end of it, then add &quot;ay&quot; to the end of the word. Leave punctuation marks untouched.\n\nExamples\npigIt(&#39;Pig latin is cool&#39;); // igPay atinlay siay oolcay\npigIt(&#39;Hello world !&#39;);     // elloHay orldway\n*/ \nfunction pigIt(str){\n    let newStr=&quot;&quot;;\n    const array=str.split(&quot; &quot;);\n    for (let i of array){\n        let firstLetter=&quot;&quot;; //use to store the first letter in the word\n        for(let j in i){\n            if(j===&#39;0&#39;){\n                firstLetter+=i[j]; //store first letter\n            }\n            else{\n                newStr+=i[j];\n            }\n        }\n        newStr+=firstLetter; //put it into end of the word\n        newStr+=&quot; &quot;; //space\n    }\n    newArray=newStr.split(&quot; &quot;);\n    newArray.pop();//delete the empty space\n    let result=&quot;&quot; //store the result\n    for(let index of newArray){\n        if (index.length!=1){\n            result+=index;\n            result+=&quot;ay&quot;;\n            result+=&quot; &quot;;        \n        }\n        else if (index.length==1){\n                if(index==&quot;?&quot; ||index==&quot;!&quot; ||index==&quot;.&quot;){ //use to check if the last length is not equal symbol\n                result+=index;\n                }\n                else{\n                    result+=index;\n                    result+=&quot;ay&quot;;\n                    result+=&quot; &quot;;               \n            }\n            \n        }\n    }\n    \n    if(result[result.length-1] ===&quot; &quot;){ //delete last space\n        result=result.slice(0,result.length-1);\n    }\n    return(result);\n}',50),(495,'20','42','function pigIt(str){\n  //Code here\n  return str.replace(/\\b(\\w)(\\w*)\\b/g,&quot;$2$1ay&quot;);\n}',50),(496,'11','4','function pigIt(str){\n  return str.split(&quot; &quot;).map( (item) =&gt; `${item.substr(1)}${item[0]}ay` ).join(&quot; &quot;)\n}',50),(497,'10','15','const pigIt = s =&gt; s.replace(/(\\w)(\\w*)/g, &#39;\\$2\\$1ay&#39;);',50),(498,'6','6','function pigIt(str){\n  //Code here\n  return str.split(&#39; &#39;).map(word =&gt; {\n    return word.substring(1) + word[0] + &#39;ay&#39;;\n  }).join(&#39; &#39;);\n}',50),(499,'5','6','function pigIt(str){\n  return str.replace(/\\w+/g, match =&gt; match.slice(1) + match.charAt(0) + &quot;ay&quot;);\n}',50),(500,'5','6','function pigIt(str){\n  //Code here\n  return str.replace(/\\b(\\w)(\\w*)\\b/gi, &#39;$2$1ay&#39;);\n}',50),(501,'274','430','function humanReadable(seconds) {\n  var pad = function(x) { return (x &lt; 10) ? &quot;0&quot;+x : x; }\n  return pad(parseInt(seconds / (60*60))) + &quot;:&quot; +\n         pad(parseInt(seconds / 60 % 60)) + &quot;:&quot; +\n         pad(seconds % 60)\n}',51),(502,'129','38','function humanReadable(seconds) {\nvar hours = parseInt( seconds / 3600 ) ;\nvar minutes = parseInt( seconds / 60 ) % 60;\nvar seconds = seconds % 60;\n\nvar pad = function(val){\n  return val &lt; 10 ?&quot;0&quot;+val:val;\n}\n\nreturn pad(hours) + &quot;:&quot; +pad(minutes) + &quot;:&quot; + pad(seconds);\n}',51),(503,'43','169','function humanReadable(seconds) {\n  return [seconds / 3600, seconds % 3600 / 60, seconds % 60].map(function(v) {\n    v = Math.floor(v).toString();\n    return v.length == 1 ? &#39;0&#39; + v : v;\n  }).join(&#39;:&#39;);\n}',51),(504,'15','36','function humanReadable(seconds) {\n  return [(seconds / 3600) | 0, seconds % 3600 / 60, seconds % 3600 % 60].map(n =&gt; (&#39;0&#39; + ( &#39;&#39; + n|0)).substr(-2)).join(&#39;:&#39;)\n}',51),(505,'13','16','function humanReadable(seconds) {\n  var HH, MM, SS;\n  HH = &quot;0&quot; + Math.floor(seconds/3600);\n  seconds -= HH * 3600;\n  MM = &quot;0&quot; + Math.floor(seconds/60);\n  seconds -= MM * 60;\n  SS = &quot;0&quot; + seconds;\n  return HH.slice(-2) + &quot;:&quot; + MM.slice(-2) + &quot;:&quot; + SS.slice(-2);\n}',51),(506,'8','18','function humanReadable(t) {\n  function d(v) { return (&#39;0&#39; + v).slice(-2) }\n  \n  var s = t % 60;\n  var m = (t / 60 | 0) % 60;\n  var h = t / 3600 | 0;\n  \n  return d(h) + &#39;:&#39; + d(m) + &#39;:&#39; + d(s);\n}',51),(507,'8','2','// pad a string str to length len, prepending chr\n// default: len = 2, chr = &#39;0&#39;\nfunction pad(str, len, chr) {\n  // set defaults\n  len = len || 2;\n  chr = chr || &#39;0&#39;;\n  // pad\n  str = Array(len - str.length + 1).join(chr) + str;\n\n  return str;\n}\n\nfunction humanReadable(s) {\n  // calc time\n  // 60 sec = 1 min\n  var m = Math.floor(s / 60),\n  // 60 min = 1 h\n      h = Math.floor(m / 60);\n  // max 59 sec\n  s %= 60;\n  // max 59 min\n  m %= 60;\n  \n  // return padded time\n  return pad(String(h)) + &#39;:&#39; + pad(String(m)) + &#39;:&#39; + pad(String(s));\n}',51),(508,'7','75','p=n=&gt;`0${n}`.slice(-2),humanReadable=(s)=&gt;(m=s/60|0,p(m/60|0)+&#39;:&#39;+p(m%60)+&#39;:&#39;+p(s%60))',51),(509,'7','8','function humanReadable(seconds) {\n  hh = Math.floor(seconds / 3600).toString();\n  mm = Math.floor((seconds - hh * 3600) / 60).toString();  \n  ss = (seconds % 60).toString();\n  \n  hh = Array(3 - hh.length).join(&#39;0&#39;) + hh;\n  mm = Array(3 - mm.length).join(&#39;0&#39;) + mm;\n  ss = Array(3 - ss.length).join(&#39;0&#39;) + ss;\n  \n  return hh + &#39;:&#39; + mm + &#39;:&#39; + ss;\n}',51),(510,'7','2','function humanReadable(seconds) {\n  const oneMinute = 60\n  const oneHour = oneMinute * 60\n  const H = (&#39;0&#39; + Math.floor(seconds / oneHour)).slice(-2)\n  const M = (&#39;0&#39; + Math.floor(seconds / oneMinute) % 60).slice(-2)\n  const S = (&#39;0&#39; + seconds % 60).slice(-2)\n  return `${H}:${M}:${S}`\n}',51),(511,'365','282','function validParentheses(parens){\n  var n = 0;\n  for (var i = 0; i &lt; parens.length; i++) {\n    if (parens[i] == &#39;(&#39;) n++;\n    if (parens[i] == &#39;)&#39;) n--;\n    if (n &lt; 0) return false;\n  }\n  \n  return n == 0;\n}',52),(512,'204','56','// I had something that was smaller and looked cooler, but\n// this is how you&#39;d want to write an actual parser.\nfunction validParentheses(string){\n   var tokenizer = /[()]/g, // ignores characters in between; parentheses are\n       count = 0,           // pretty useless if they&#39;re not grouping *something*\n       token;\n   while(token = tokenizer.exec(string), token !== null){\n      if(token == &quot;(&quot;) {\n         count++;\n      } else if(token == &quot;)&quot;) {\n         count--;\n         if(count &lt; 0) {\n            return false;\n         }\n      }\n   }\n   return count == 0;\n}',52),(513,'102','313','function validParentheses(parens){\n  var indent = 0;\n  \n  for (var i = 0 ; i &lt; parens.length &amp;&amp; indent &gt;= 0; i++) {\n    indent += (parens[i] == &#39;(&#39;) ? 1 : -1;    \n  }\n  \n  return (indent == 0);\n}',52),(514,'66','390','function validParentheses(parens){\n  var re = /\\(\\)/;\n  while (re.test(parens)) parens = parens.replace(re, &quot;&quot;);\n  return !parens;\n}',52),(515,'21','17','function validParentheses(parens){\n  var stack = [],\n    i;\n  \n  for (i = 0; i &lt; parens.length; i++) {\n    if (parens[i] === &#39;(&#39;) {\n      stack.push(parens[i]);\n    }\n    else if(&#39;(&#39; !== stack.pop()) {\n      return false;\n    }\n  }\n  \n  return stack.length === 0;\n}',52),(516,'13','68','function validParentheses(parens){\n  while(parens.indexOf(&#39;()&#39;) != -1){\n    parens = parens.replace(&#39;()&#39;, &#39;&#39;);\n  }\n  return !parens.length;\n}',52),(517,'10','39','function validParentheses(parens) {\n  var cmp = 0;\n  parens.split(&#39;&#39;).forEach(function(v) {\n    cmp += v===&#39;(&#39; ? 1 : -1;\n    cmp = Math.abs(cmp);\n  });\n  return cmp === 0;\n}',52),(518,'9','5','function validParentheses(parens){\n  for (var i = 0, depth = 0; i &lt; parens.length; i++) {\n    if (parens[i] == &#39;(&#39;) depth++;\n    if (parens[i] == &#39;)&#39;) depth--;\n    if (depth &lt; 0) return false;\n  }\n  return depth == 0;\n}',52),(519,'6','25','function validParentheses(parens){\n  while(/\\(\\)/.test(parens)){\n    parens = parens.replace(/\\(\\)/g,&quot;&quot;);\n  }\n  return parens.length&gt;0?false:true;  \n}',52),(520,'6','15','function validParentheses (parens){\n  return parens.split(&#39;&#39;).reduce(function (level, c) {\n    return level &gt;= 0 ? level + {&#39;(&#39;: 1, &#39;)&#39;: -1}[c] : -1;\n  }, 0) === 0;\n}\n',52),(521,'364','330','function rgb(r, g, b){\n	return toHex(r)+toHex(g)+toHex(b);\n}\n\nfunction toHex(d) {\n    if(d &lt; 0 ) {return &quot;00&quot;;}\n    if(d &gt; 255 ) {return &quot;FF&quot;;}\n    return  (&quot;0&quot;+(Number(d).toString(16))).slice(-2).toUpperCase()\n}',53),(522,'77','252','function rgb(r, g, b){\n  return [r,g,b].map(function(x) {\n    return (&#39;0&#39;+Math.max(0, Math.min(255, x)).toString(16)).slice(-2);\n  }).join(&#39;&#39;).toUpperCase();\n}',53),(523,'62','30','function rgb(r, g, b){\n  function toHex(a) { \n    if (a &lt;= 0) return &#39;00&#39;;\n    else if (a &gt;= 255) return &#39;FF&#39;;\n    else return a.toString(16).toUpperCase();\n  }\n  return toHex(r) + toHex(g) + toHex(b);\n}',53),(524,'44','18','const rgb = (r, g, b) =&gt; toHex(r) + toHex(g) + toHex(b);\n\nfunction toHex(numb) {\n  if (numb &lt;= 0)   return &#39;00&#39;;\n  if (numb &gt; 255)  return &#39;FF&#39;;\n  return numb.toString(16).toUpperCase();\n}',53),(525,'27','70','let rgb = (r, g, b) =&gt; [r,g,b].map( (item) =&gt; item&gt;=255 ? &#39;FF&#39; : item&lt;=0 ? &#39;00&#39; : item.toString(16).toUpperCase()).join(&#39;&#39;)\n',53),(526,'12','53','function rgb(r, g, b) {\n	r = Math.max(0, Math.min(255, r));\n	g = Math.max(0, Math.min(255, g));\n	b = Math.max(0, Math.min(255, b));\n\n	let color = (r &lt;&lt; 16) + (g &lt;&lt; 8) + b;\n\n	return (&#39;00000&#39; + color.toString(16).toUpperCase()).slice(-6);\n}',53),(527,'8','3','function rgb(r, g, b)\n{\n   if (r&lt;0) r = &#39;00&#39;;\n   if (r&gt;=255) r = &#39;FF&#39;;  \n   r = r.toString(16).toUpperCase();\n   if (r.length === 1) r = &#39;0&#39; + r;\n   if (g&lt;0) g = &#39;00&#39;;\n   if (g&gt;=255) g = &#39;FF&#39;;\n   g = g.toString(16).toUpperCase();\n   if (g.length === 1) g = &#39;0&#39; + g;\n   if (b&lt;0) b = &#39;00&#39;;\n   if (b&gt;=255) b = &#39;FF&#39;;\n   b = b.toString(16).toUpperCase();\n   if (b.length === 1) b = &#39;0&#39; + b; \n   return r+g+b;\n}',53),(528,'6','66','function rgb(r, g, b) {\n  return [].slice.call(arguments).map(function (v) {\n    var ret = Math.max(0, Math.min(255, v)).toString(16).toUpperCase();\n    return (ret.length&lt;2 ? &#39;0&#39; : &#39;&#39;) + ret;\n  }).join(&#39;&#39;);\n}',53),(529,'5','4','function decToHex(n) {\n	\n	var mods = [];\n	var num = n;\n	var mod;\n	const HEXHASH = {\n		10: &#39;A&#39;,\n		11: &#39;B&#39;,\n		12: &#39;C&#39;,\n		13: &#39;D&#39;,\n		14: &#39;E&#39;,\n		15: &#39;F&#39;\n	};\n	\n	while (num &gt; 0) {\n		mod = num % 16;\n		mod &gt;= 10 ? mods.push(HEXHASH[mod]) : mods.push(mod);\n		num = Math.floor(num / 16);\n	}\n	\n	return mods.reverse().map(function(n) {\n		return n.toString();\n	}).join(&#39;&#39;);\n}\n\n//decToHex(148);\n\nfunction fillZeroes(s) {\n	\n	if (s.length === 0) return &#39;00&#39;;\n	if (s.length === 1) return &#39;0&#39; + s;\n	return s;\n}\n\nfunction rgb(r, g, b){\n	\n	var args = Array.prototype.slice.call(arguments).map(function(n) {\n		return (n &gt; 255) ? 255 : n;\n	});\n	\n	var red = decToHex(args[0]);\n	var green = decToHex(args[1]);\n	var blue = decToHex(args[2]);\n	\n	return fillZeroes(red) + fillZeroes(green) + fillZeroes(blue);\n}',53),(530,'5','2','function rgb(r, g, b){\n  return [r,g,b].map(x =&gt; { \n    if(x &gt; 255) return &#39;FF&#39;\n    else if(x &lt; 1) return &#39;00&#39;\n    else return x.toString(16).toUpperCase()}).join(&#39;&#39;) \n}',53),(531,'249','515','String.prototype.sort = function() {\n  return this.split(&quot;&quot;).sort().join(&quot;&quot;);\n};\n\nfunction anagrams(word, words) {\n  return words.filter(function(x) {\n      return x.sort() === word.sort();\n  });\n}',54),(532,'143','80','function anagrams(word, words) {\n  word = word.split(&#39;&#39;).sort().join(&#39;&#39;);\n  return words.filter(function(v) {return word == v.split(&#39;&#39;).sort().join(&#39;&#39;);});\n}',54),(533,'57','70','let anagrams = (word, words) =&gt; words.filter(w =&gt; w.split(&#39;&#39;).sort().join(&#39;&#39;) === word.split(&#39;&#39;).sort().join(&#39;&#39;));',54),(534,'27','33','function anagrams(word, words) {\n    return words.filter(function (e) {\n        return e.split(&#39;&#39;).sort().join(&#39;&#39;) === word.split(&#39;&#39;).sort().join(&#39;&#39;);\n    })\n}',54),(535,'17','1','function anagrams(word, words) {\n  var result = [];\n  var test = word.split(&quot;&quot;).sort().join(&quot;&quot;);\n  \n  for (var i=0;i&lt;words.length;i++){\n    if(words[i].split(&quot;&quot;).sort().join(&quot;&quot;) == test) {\n      result.push(words[i]);\n    }\n  }\n  \n  return result;\n}',54),(536,'12','2','function anagrams(word, words) {\n  return words.filter(w =&gt; reorder(w) === reorder(word));\n}\nfunction reorder(word) {\n  return word.split(&#39;&#39;).sort().join(&#39;&#39;);\n}',54),(537,'12','0','function hashString(string) {\n    var output = {};\n    for (var chr in string) {\n        output[string[chr]] = string[chr];\n    }\n    return output;\n}\n\nfunction isAnagram(check, string) {\n    if (check.length !== string.length) return false;\n    var hash = hashString(check);\n    for (var i = 0; i &lt; string.length; ++i) {\n        var exists = false;\n        if (string[i] in hash) exists = true;\n        if (!exists) return false;\n    }\n    return true; \n}\n\nfunction anagrams(word, words) {\n    var output = [];\n    for (var i = 0; i &lt; words.length; ++i) {\n        if (isAnagram(words[i], word) &amp;&amp; isAnagram(word, words[i])) {\n            output.push(words[i]);\n        }\n    }\n    return output;\n}',54),(538,'8','53','function anagrams(a, b) {\n  return b.filter(w=&gt;&#39;&#39;+[...a].sort()===&#39;&#39;+[...w].sort());\n}',54),(539,'8','3','const _ = require(&#39;lodash&#39;);\n\nfunction anagrams(word, words) {\n  let counts = _.countBy(word);\n  return _.filter(words, w =&gt; _.isEqual(_.countBy(w), counts));\n}',54),(540,'7','1','function anagrams(word, words) {\n  const sword = [...word].sort().join(&#39;&#39;);\n  \n  return words.filter(w =&gt; [...w].sort().join(&#39;&#39;) === sword);\n}',54),(541,'508','321','function dirReduc(plan) {\n  var opposite = {\n    &#39;NORTH&#39;: &#39;SOUTH&#39;, &#39;EAST&#39;: &#39;WEST&#39;, &#39;SOUTH&#39;: &#39;NORTH&#39;, &#39;WEST&#39;: &#39;EAST&#39;};\n  return plan.reduce(function(dirs, dir){\n      if (dirs[dirs.length - 1] === opposite[dir])\n        dirs.pop();\n      else\n        dirs.push(dir);\n      return dirs;\n    }, []);\n}',55),(542,'77','863','function dirReduc(arr) {\n  var str = arr.join(&#39;&#39;), pattern = /NORTHSOUTH|EASTWEST|SOUTHNORTH|WESTEAST/;\n  while (pattern.test(str)) str = str.replace(pattern,&#39;&#39;);\n  return str.match(/(NORTH|SOUTH|EAST|WEST)/g)||[];\n}',55),(543,'30','36','function dirReduc(arr){\n	var opposite = { &quot;SOUTH&quot;:&quot;NORTH&quot;, &quot;NORTH&quot;:&quot;SOUTH&quot;, &quot;WEST&quot;:&quot;EAST&quot;, &quot;EAST&quot;:&quot;WEST&quot;}\n	return arr.reduce(function (a, b, i) {\n  	opposite[a.slice(-1)] === b ? a.pop() : a.push(b)\n  	return a\n  }, [])\n}',55),(544,'25','28','function dirReduc(arr){\n  var count = 0;\n  for (var i = 0; i &lt; arr.length; i++) {\n    if (arr[i] === &quot;WEST&quot; &amp;&amp; arr[i+1] === &quot;EAST&quot; ||\n        arr[i] === &quot;EAST&quot; &amp;&amp; arr[i+1] === &quot;WEST&quot; ||\n        arr[i] === &quot;NORTH&quot; &amp;&amp; arr[i+1] === &quot;SOUTH&quot; ||\n        arr[i] === &quot;SOUTH&quot; &amp;&amp; arr[i+1] === &quot;NORTH&quot;) {\n        arr.splice(i, 2);\n        count++;\n        i--;\n    }\n  }\n  return count === 0 ? arr : dirReduc(arr);\n}',55),(545,'18','53','function isOppo(dir1,dir2) {\n    if (dir1 + dir2 === &#39;SOUTHNORTH&#39;) return true;\n    if (dir1 + dir2 === &#39;NORTHSOUTH&#39;) return true;\n    if (dir1 + dir2 === &#39;EASTWEST&#39;) return true;\n    if (dir1 + dir2 === &#39;WESTEAST&#39;) return true;\n    return false;\n}\n  \nfunction dirReduc(arr){\n  var len = arr.length\n  for (var i = 0; i &lt; len - 1; i++) {\n    if (isOppo(arr[i], arr[i+1])) {\n      arr.splice(i,2);\n      return dirReduc(arr);\n    }\n  }\n  return arr;\n}',55),(546,'9','1','// set up a map for the opposing values\nvar cancelMap = {\n  &quot;NORTH&quot; : &quot;SOUTH&quot;,\n  &quot;SOUTH&quot; : &quot;NORTH&quot;,\n  &quot;EAST&quot; : &quot;WEST&quot;,\n  &quot;WEST&quot; : &quot;EAST&quot;\n};\nfunction dirReduc(arr){\n  // flag to track if the array was changed in order to recurse\n  var changed = false;\n  // loop through the array, eliminating opposing pairs\n  for (var i = 0; i &lt; arr.length-1; i++){\n    if (arr[i+1] == cancelMap[arr[i]]) {\n      arr.splice(i,2);\n      changed = true;\n    }\n  }\n  // if array was altered at all\n  // recurse to check again for new matches\n  return changed ? dirReduc(arr) : arr\n}',55),(547,'8','5','function dirReduc(arr){\n  var oppositeDirections = {\n    NORTH: &#39;SOUTH&#39;,\n    SOUTH: &#39;NORTH&#39;,\n    WEST: &#39;EAST&#39;,\n    EAST: &#39;WEST&#39;\n  };\n  var directions = arr.slice(0);\n  for (var i = 0; i &lt; directions.length - 1;) {\n    if (oppositeDirections[directions[i]] === directions[i+1]) {\n      directions.splice(i, 2);\n      i = (i === 0) ? 0 : i - 1;\n    } else {\n      i += 1;\n    }\n  }\n  return directions;\n}',55),(548,'4','3','const dirReduc = arr =&gt;\n  arr.reduce((pre, val) =&gt; pre[pre.length - 1] === {NORTH : `SOUTH`, SOUTH : `NORTH`, EAST : `WEST`, WEST : `EAST`}[val] ? pre.slice(0, -1) : [...pre, val], []);',55),(549,'4','0','var opp = {\n    &quot;NORTH&quot;: &quot;SOUTH&quot;,\n    &quot;SOUTH&quot;: &quot;NORTH&quot;,\n    &quot;EAST&quot;: &quot;WEST&quot;,\n    &quot;WEST&quot;: &quot;EAST&quot;\n  }\n\nfunction dirReduc(arr){\n  \n  var fil = arr.filter( (dir, i, arr) =&gt; \n    opp[dir] !== arr[i+1]  &amp;&amp; opp[arr[i-1]] !== dir || false\n  );\n  \n  if (fil.length === arr.length){\n    return fil;\n  }else{\n    return dirReduc(fil);\n  }\n}',55),(550,'3','13','function dirReduc(arr){\n  return arr.reverse().reduce(function (memo, v) {\n    return memo.length &amp;&amp; [&#39;NORTHSOUTH&#39;, &#39;SOUTHNORTH&#39;, &#39;EASTWEST&#39;, &#39;WESTEAST&#39;].indexOf(v + memo[0]) &gt;= 0 ? memo.slice(1) : [v].concat(memo)\n  }, [])\n}\n',55),(551,'196','775','function rot13(message) {\n  var a = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;\n  var b = &quot;nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM&quot;\n  return message.replace(/[a-z]/gi, c =&gt; b[a.indexOf(c)])\n}',56),(552,'93','254','const rot13 = str =&gt; str.replace(/[a-z]/gi, letter =&gt; String.fromCharCode(letter.charCodeAt(0) + (letter.toLowerCase() &lt;= &#39;m&#39; ? 13: -13)));',56),(553,'44','24','var codeA = &#39;A&#39;.charCodeAt(0),\n    codeZ = &#39;Z&#39;.charCodeAt(0),\n    codea = &#39;a&#39;.charCodeAt(0),\n    codez = &#39;z&#39;.charCodeAt(0);\nfunction rot13(message){\n  return message.split(&#39;&#39;).map(function(char) { \n    var code = char.charCodeAt(0);\n    if(codeA &lt;= code &amp;&amp; code &lt;= codeZ){\n      return String.fromCharCode(((code - codeA) + 13) % 26 + codeA);\n    } else if(codea &lt;= code &amp;&amp; code &lt;= codez){\n      return String.fromCharCode(((code - codea) + 13) % 26 + codea);\n    }\n    return char;\n  }).join(&#39;&#39;);\n}',56),(554,'27','57','var alphabet = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXWZ&quot;;\nvar cipher   = &quot;nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXWZABCDEFGHIJKLM&quot;;\n\nfunction rot13(message){\n  return message.split(&#39;&#39;).map(function(c) {\n    var i = alphabet.indexOf(c);\n    if (i &lt; 0) {\n      // not in alphabet, return char\n      return c;\n    }\n    \n    return cipher[i];\n  }).join(&#39;&#39;);\n}',56),(555,'22','112','function rot13(message) {\n  var abc = &#39;abcdefghijklmnopqrstuvwxyzabcdefghijklmABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLM&#39;;\n  return message.replace(/[a-z]/gi, c =&gt; abc[abc.indexOf(c) + 13]);\n}',56),(556,'12','20','function rot13(message){\n  //your code here\n  return (message + &#39;&#39;)\n    .replace(/[a-z]/gi, function(s) {\n      return String.fromCharCode(s.charCodeAt(0) + (s.toLowerCase() &lt; &#39;n&#39; ? 13 : -13));\n    });\n\n}',56),(557,'10','31','function rot13(message){\n  return message.replace(/[a-zA-Z]/g, function(c){\n    var c13 = c.charCodeAt(0) + 13;\n    var endCharCode = ( c &gt; &#39;Z&#39;)? 122 : 90;\n    return String.fromCharCode(  endCharCode &lt; c13 ?  c.charCodeAt(0) - 13 : c13 );\n  });\n}',56),(558,'5','5','function rot13(message){\n  return message.replace(/[a-zA-Z]/g, function(match) {\n    return String.fromCharCode(match.charCodeAt(0) + (match.toUpperCase().localeCompare(&#39;M&#39;) &gt; 0 ? -13 : 13));\n  });\n}\n\n',56),(559,'4','0','function rot13(message){\n  \n  // Matches any letter\n  let pattern = /[a-z]/i\n  \n  let result = &quot;&quot;;\n  \n  for (let char of message) {\n    \n    // If character isn&#39;t letter, just push it into result\n    if (!pattern.test(char)) {\n      result += char;\n      continue;\n    }\n    \n    let upper = char === char.toUpperCase();\n    let code = char.charCodeAt(0);\n    \n    // remove the appropriate offset from the char&#39;s ACSII code\n    code -= (upper) ? 65 : 97;\n    \n    // ROT13\n    code = (code + 13) % 26;\n    \n    // Add offset back\n    code += (upper) ? 65 : 97;\n    \n    // Add rotated char to result\n    result += String.fromCharCode(code);\n  }\n  \n  return result;\n}',56),(560,'3','6','function rot13(message){\n  return message.split(&#39;&#39;).map(l =&gt; {\n    let charCode = l.charCodeAt(0);\n    if(charCode &gt;= 97 &amp;&amp; charCode &lt;= 122){\n      charCode = (charCode - 97 + 13) % 26 + 97;\n    }\n    else if(charCode &gt;= 65 &amp;&amp; charCode &lt;= 90){\n      charCode = (charCode - 65 + 13) % 26 + 65;\n    }\n    return String.fromCharCode(charCode);\n  }).join(&#39;&#39;);\n}',56),(561,'140','410','var maxSequence = function(arr){\n  var min = 0, ans = 0, i, sum = 0;\n  for (i = 0; i &lt; arr.length; ++i) {\n    sum += arr[i];\n    min = Math.min(sum, min);\n    ans = Math.max(ans, sum - min);\n  }\n  return ans;\n}',57),(562,'102','120','var maxSequence = function(arr){\n    var currentSum = 0;\n    return arr.reduce(function(maxSum, number){\n        currentSum = Math.max(currentSum+number, 0);\n        return Math.max(currentSum, maxSum);\n    }, 0);\n}',57),(563,'34','32','var maxSequence = function(arr){\n  var max = 0;\n  var cur = 0;\n  arr.forEach(function(i){\n    cur = Math.max(0, cur + i);\n    max = Math.max(max, cur);\n  });\n  return max;\n}',57),(564,'26','6','function maxSequence(arr) {\n  var max = 0\n  \n  for (var i = 0; i &lt; arr.length; i++) {\n    for (var sum = 0, j = i; j &lt; arr.length; j++) {\n      sum += arr[j]\n      if (sum &gt; max) max = sum\n    }\n  }\n  \n  return max\n}',57),(565,'12','9','var maxSequence = function(arr){\n			var max = 0;\n			for (var i = 0; i &lt; arr.length; i++) {\n				for (var j = arr.length; j &gt; i; j--) {\n					var total = arr.slice(i,j).reduce(function(a, b){ return a + b; });\n					if (max &lt; total) max = total\n				}\n			}\n			return max;\n		}',57),(566,'8','38','const maxSequence = (a,sum=0) =&gt; a.reduce((max,v) =&gt; Math.max(sum = Math.max(sum + v, 0), max), 0);',57),(567,'8','3','var maxSequence = function(arr){\n  let currentVal = 0;\n  let highestVal = 0\n  for(let val of arr){\n    currentVal += val;\n    if(currentVal &lt; 0) currentVal = 0;\n    else if(currentVal &gt; highestVal) highestVal = currentVal\n  }\n  return highestVal\n}',57),(568,'7','0','var maxSequence = function(arr){\n  var maxSum = 0;\n  var currentSum = 0;\n  \n  for (var i = 0; i &lt; arr.length; i++) {\n    currentSum += arr[i];\n    \n    if (currentSum &lt;= 0) {\n      currentSum = 0;\n    }\n    maxSum = Math.max(maxSum, currentSum);\n  }\n  \n  return maxSum;\n}',57),(569,'7','0','// Helpers\nlet allPositives = arr =&gt; arr.every(n =&gt; n &gt; 0)\nlet allNegatives = arr =&gt; arr.every(n =&gt; n &lt; 0)\nlet sum = arr =&gt; arr.reduce((prev, curr) =&gt; curr + prev, 0)\n\nconst maxSequence = function(arr){\n  if(arr.length === 0 || allNegatives(arr)) return 0\n  if(allPositives(arr)) return sum(arr)\n  let sums = []\n  for(let i = 0; i &lt; arr.length; i++){\n    for(var j = arr.length; j &gt; 0 ; j--) {\n      let innerSub = sum(arr.slice(i))\n      let outerSub = sum(arr.slice(j - 1))\n      let inBetween = sum(arr.slice(i, j - 1))\n      sums.push(...[innerSub, outerSub, inBetween])\n    }\n  }\n  return Math.max(...sums)\n}',57),(570,'6','1','var maxSequence = function(arr){\n  var i, j, k = 0, r;\n  for(i = 0; i &lt; arr.length; ++i){    \n    for(r = 0, j = i; j &lt; arr.length; ++j){\n      r += arr[j];\n      k = Math.max(k,r);\n    }\n  }\n  return k;\n}',57),(571,'460','367','var n = function(digit) {\n  return function(op) {\n    return op ? op(digit) : digit;\n  }\n};\nvar zero = n(0);\nvar one = n(1);\nvar two = n(2);\nvar three = n(3);\nvar four = n(4);\nvar five = n(5);\nvar six = n(6);\nvar seven = n(7);\nvar eight = n(8);\nvar nine = n(9);\n\nfunction plus(r) { return function(l) { return l + r; }; }\nfunction minus(r) { return function(l) { return l - r; }; }\nfunction times(r) { return function(l) { return l * r; }; }\nfunction dividedBy(r) { return function(l) { return l / r; }; }',58),(572,'195','114','function zero(func)   { return func ? func(0) : 0; };\nfunction one(func)    { return func ? func(1) : 1; };\nfunction two(func)    { return func ? func(2) : 2; };\nfunction three(func)  { return func ? func(3) : 3; };\nfunction four(func)   { return func ? func(4) : 4; };\nfunction five(func)   { return func ? func(5) : 5; };\nfunction six(func)    { return func ? func(6) : 6; };\nfunction seven(func)  { return func ? func(7) : 7; };\nfunction eight(func)  { return func ? func(8) : 8; };\nfunction nine(func)   { return func ? func(9) : 9; };\n\nfunction plus( b )      { return function( a ) { return a + b; }; };\nfunction minus( b )     { return function( a ) { return a - b; }; };\nfunction times( b )     { return function( a ) { return a * b; }; };\nfunction dividedBy( b ) { return function( a ) { return a / b; }; };',58),(573,'67','471','[&#39;zero&#39;, &#39;one&#39;, &#39;two&#39;, &#39;three&#39;, &#39;four&#39;, &#39;five&#39;, &#39;six&#39;, &#39;seven&#39;, &#39;eight&#39;, &#39;nine&#39;]\n.forEach(function (name, n) {\n  this[name] = function (f) { return f ? f(n) : n }\n});\n\nfunction plus(n)      { return function (a) { return a + n } }\nfunction minus(n)     { return function (a) { return a - n } }\nfunction times(n)     { return function (a) { return a * n } }\nfunction dividedBy(n) { return function (a) { return a / n } }',58),(574,'34','168','&#39;zero one two three four five six seven eight nine&#39;.split(&#39; &#39;).forEach(\n  (mth, num) =&gt; this[mth] = (f = val =&gt; val) =&gt; f(num) \n)\n\nlet plus      = (r) =&gt; (l) =&gt; l + r\nlet minus     = (r) =&gt; (l) =&gt; l - r\nlet times     = (r) =&gt; (l) =&gt; l * r\nlet dividedBy = (r) =&gt; (l) =&gt; l / r',58),(575,'24','98','const\n  id = x =&gt; x,\n  number = x =&gt; (f = id) =&gt; f(x),\n  [zero, one, two, three, four, five, six, seven, eight, nine] =\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(number),\n  plus = x =&gt; y =&gt; y + x,\n  minus = x =&gt; y =&gt; y - x,\n  times = x =&gt; y =&gt; y * x,\n  dividedBy = x =&gt; y =&gt; y / x;',58),(576,'20','6','function zero(operator) {\n	return operator ? operator(0) : 0;\n}\n\nfunction one(operator) {\n	return operator ? operator(1) : 1;\n}\n\nfunction two(operator) {\n	return operator ? operator(2) : 2;\n}\n\nfunction three(operator) {\n	return operator ? operator(3) : 3;\n}\n\nfunction four(operator) {\n	return operator ? operator(4) : 4;\n}\n\nfunction five(operator) {\n	return operator ? operator(5) : 5;\n}\n\nfunction six(operator) {\n	return operator ? operator(6) : 6;\n}\n\nfunction seven(operator) {\n	return operator ? operator(7) : 7;\n}\nfunction eight(operator) {\n	return operator ? operator(8) : 8;\n}\n\nfunction nine(operator) {\n	return operator ? operator(9) : 9;\n}\n\nfunction plus(rightVal) {\n	return function(leftVal) {\n  	return leftVal + rightVal;\n  }\n}\n\nfunction minus(rightVal) {\n	return function(leftVal) {\n  	return leftVal - rightVal;\n  }\n}\n\nfunction times(rightVal) {\n	return function(leftVal) {\n  	return leftVal * rightVal;\n  }\n}\n\nfunction dividedBy(rightVal) {\n	return function(leftVal) {\n  	return leftVal / rightVal;\n  }\n}',58),(577,'9','24','[&#39;zero&#39;, &#39;one&#39;, &#39;two&#39;, &#39;three&#39;, &#39;four&#39;, &#39;five&#39;, &#39;six&#39;, &#39;seven&#39;, &#39;eight&#39;, &#39;nine&#39;].forEach(function(funName, i) {\n  this[funName] = function(operation) {return operation ? operation(i) : i};\n});\n\nfunction plus(operandRight) {return function(operandLeft) {return operandLeft + operandRight}}\nfunction minus(operandRight) {return function(operandLeft) {return operandLeft - operandRight}}\nfunction times(operandRight) {return function(operandLeft) {return operandLeft * operandRight}}\nfunction dividedBy(operandRight) {return function(operandLeft) {return operandLeft / operandRight}}',58),(578,'8','49','const [\n  zero,\n  one,\n  two,\n  three,\n  four,\n  five,\n  six,\n  seven,\n  eight,\n  nine\n] = Array.from({length:10}).map((item,i) =&gt; ((f) =&gt; f ? f(i) : i));\n\nconst [\n  plus,\n  minus,\n  times,\n  dividedBy\n] = [&#39;+&#39;, &#39;-&#39;, &#39;*&#39;, &#39;/&#39;].map(op =&gt; Function(&#39;b&#39;, `return a =&gt; a ${op} b`));',58),(579,'7','5','function template(n) {\n  return function(){\n    if (arguments.length &gt; 0) {\n      var operation = arguments[0];\n      return operation(n);\n    }\n    return n;\n  }\n}\nvar zero = template(0);\nvar one = template(1);\nvar two = template(2);\nvar three = template(3);\nvar four = template(4); \nvar five = template(5);\nvar six = template(6);\nvar seven = template(7);\nvar eight = template(8);\nvar nine = template(9);\n\nfunction plus(operand) {\n  return function(n){return n+operand;}\n}\nfunction minus(operand) {\n  return function(n){return n-operand;}\n}\nfunction times(operand) {\n  return function(n){return n*operand;}\n}\nfunction dividedBy(operand) {\n  return function(n){return n/operand;}\n}',58),(580,'7','4','function zero(fn) {return fn ? fn(0) : 0}\nfunction one(fn) {return fn ? fn(1) : 1}\nfunction two(fn) {return fn ? fn(2) : 2}\nfunction three(fn) {return fn ? fn(3) : 3}\nfunction four(fn) {return fn ? fn(4) : 4}\nfunction five(fn) {return fn ? fn(5) : 5}\nfunction six(fn) {return fn ? fn(6) : 6}\nfunction seven(fn) {return fn ? fn(7) : 7}\nfunction eight(fn) {return fn ? fn(8) : 8}\nfunction nine(fn) {return fn ? fn(9) : 9}\n\nfunction plus(n) {return function(v) {return v + n}}\nfunction minus(n) {return function(v) {return v - n}}\nfunction times(n) {return function(v) {return v * n}}\nfunction dividedBy(n) {return function(v) {return v / n}}',58),(581,'189','258','function productFib(prod){\n  var n = 0;\n  var nPlus = 1;  \n  while(n*nPlus &lt; prod) {\n    nPlus = n + nPlus;\n    n = nPlus - n;\n  }\n  return [n, nPlus, n*nPlus===prod];\n}',59),(582,'159','295','function productFib(prod){\n  let [a, b] = [0, 1];\n  while(a * b &lt; prod) [a, b] = [b, a + b];\n  return [a, b, a * b === prod];\n}',59),(583,'15','9','function productFib(prod){\n  var a = 1\n  var b = 1;\n  while (a*b &lt; prod) {\n    var next = a+b;\n    a = b;\n    b = next;\n  }\n  return [a, b, a*b===prod];\n}',59),(584,'10','6','function productFib(prod){\n  let a = 0;\n  let b = 1;\n  for (let i = 0; i &lt; prod; i++) {\n    if (a * b &gt; prod) return [a, b, false];\n    if (a * b === prod) return [a, b, true];\n    [a, b] = [b, a + b];\n  }\n}\n',59),(585,'7','7','function productFib( prod ) // mathy way\n{\n  const r = ( 1 + Math.sqrt(5) ) / 2;\n  let fib1 = Math.round( Math.sqrt( prod / r ) ),\n  fib2 = Math.round( fib1 * r );\n  if ( fib1 * fib2 === prod ) return [ fib1, fib2, true ];\n  for ( [fib1, fib2] = [0, 1]; fib1 * fib2 &lt; prod; [fib1, fib2] = [fib2, fib1 + fib2] );\n  return [ fib1, fib2, false ];\n}\n\n// x = fib(m-1), y = fib(m), n = prod;\n// r = ( 1 + Math.sqrt(5) ) / 2; // r = golden ratio\n// r = 1 + 1 / r, x * r = y; // properties of golden ratio and fib\n// fib(m) * fib(m+1) = n;\n// y * ( x + y ) = n;\n// y * x + y**2 = n;\n// y * y / r + y**2 = n;\n// y**2 / r + y**2 = n;\n// y**2 * ( 1 + 1 / r ) = n;\n// y**2 * r = n;\n// y**2 = n / r;\n// y = Math.sqrt( n / r );',59),(586,'6','13','function productFib(prod){\n  //cache fibonacci numbers\n  var fib = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377,\n            610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657,\n            46368, 75025, 121393, 196418, 317811, 514229, 832040,\n            1346269, 2178309, 3524578, 5702887, 9227465, 14930352, \n            24157817, 39088169, 63245986, 102334155];\n\n\n  for (var i = 0, j = fib.length; i &lt; j; i++) {\n    var x = fib[i] * fib[i + 1];\n    \n    if (x === prod) {\n      return [fib[i], fib[i + 1], true];\n    }\n    else if (x &gt; prod) {\n      return [fib[i], fib[i + 1], false];\n    }\n  }\n}',59),(587,'4','2','function productFib(prod){\n  let num1 = 0,\n      num2 = 1;\n  \n  while(num1 * num2 &lt; prod){\n    num2 = num2 + num1\n    num1 = num2 - num1\n  }\n  return [num1, num2, num1 * num2 === prod]\n}',59),(588,'3','31','function productFib(prod){\n  var findProd = function(a, b){\n    if (a * b == prod) return [a, b, true];\n    if (a*b &gt; prod) return [a, b, false];\n    return findProd(b, a+b);\n  }\n  return findProd(0, 1);\n}',59),(589,'3','5','function productFib(prod){\n  let [n,np] = [0,1];\n  while (n*np&lt;prod) [n,np] = [np, n+np];\n  return [n, np, n*np===prod];\n}',59),(590,'2','15','function productFib(prod){\n  fib = [0,1];\n  while (prod &gt; fib[0]*fib[1]){\n    fib.push(fib[0]+fib[1]);\n    fib.shift();\n  }\n  fib.push(prod==fib[0]*fib[1]);\n  return fib\n}',59),(591,'295','157','function generateHashtag (str) {\n  return str.length &gt; 140 || str === &#39;&#39; ? false :\n    &#39;#&#39; + str.split(&#39; &#39;).map(capitalize).join(&#39;&#39;);\n}\n\nfunction capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}',60),(592,'25','20','function generateHashtag (str) {\n   if(!str || str.length &lt; 1) return false;\n   \n   var r = &#39;#&#39; + str.split(&#39; &#39;).map(function(el) {\n     return el.charAt(0).toUpperCase() + el.slice(1).toLowerCase();\n   }).join(&#39;&#39;);\n   return r.length &gt; 140?false:r;\n}',60),(593,'14','17','function generateHashtag (str) {\n\n  var hashtag = str.split(&#39; &#39;).reduce(function(tag, word) {\n    return tag + word.charAt(0).toUpperCase() + word.substring(1);\n  }, &#39;#&#39;);\n  \n  return hashtag.length == 1 || hashtag.length &gt; 140 ? false : hashtag;\n}',60),(594,'10','10','function generateHashtag(str) {\n  var hashed = &#39;#&#39; + str.split(&#39; &#39;).map(function(v) {return v.charAt(0).toUpperCase() + v.slice(1);}).join(&#39;&#39;);\n  return hashed.length &gt; 140 || str == &quot;&quot; ? false : hashed;\n}',60),(595,'4','12','const generateHashtag = str =&gt; (s = &#39;#&#39;+str.trim().split(&quot; &quot;).filter(e=&gt;e).map(e=&gt;e[0].toUpperCase() + e.substring(1,e.length).toLowerCase()).join(&quot;&quot;)).length &gt; 1 &amp;&amp; s.length &lt;= 140 ? s : false',60),(596,'4','6','function generateHashtag (str) { \n    var s = &quot;#&quot; + str.replace(/\\w\\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()}).split(&quot; &quot;).join(&quot;&quot;);\n    if(str &amp;&amp; s.length &lt;= 140){\n      return s;\n    } return false; \n}',60),(597,'3','7','function generateHashtag (str) {\n    return str.length &gt; 140 || str.length &lt; 1 ? false : (&#39;# &#39; + str).trim().replace(/(\\s\\w)/g, function ($0, $1) {\n        return $1.slice(1).toUpperCase();\n    });\n}',60),(598,'2','11','function generateHashtag (str = &quot;&quot;) {\n  var hashtag = `#${str.trim().replace(/(?:\\b|\\s)(\\w)/gi, (m, g) =&gt; g.toUpperCase())}`\n  return !!str &amp;&amp; hashtag.length &lt;= 140 &amp;&amp; hashtag\n}',60),(599,'2','2','function generateHashtag (str) {\n  var hash = &#39;#&#39;;\n  str.split(&#39; &#39;).map(a =&gt; {\n    hash += a.charAt(0).toUpperCase() + a.slice(1);\n  });\n  return hash != &#39;#&#39; &amp;&amp; hash.length &lt;= 140 ? hash : false;\n}',60),(600,'2','2','function generateHashtag (str) {\n  str = str.split(&quot; &quot;).reduce(function(p, c){\n    return p + (c ? c[0].toUpperCase() + c.slice(1) : &quot;&quot;);\n  }, &quot;#&quot;);\n  return str.length &gt; 140 || str == &quot;#&quot; ? false : str;\n}',60);
/*!40000 ALTER TABLE `solution_entity` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2021-08-08 12:55:12
